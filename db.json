{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/back2top.js","path":"js/back2top.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/code-block.js","path":"js/code-block.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/dark-light-toggle.js","path":"js/dark-light-toggle.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/header-shrink.js","path":"js/header-shrink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/post-helper.js","path":"js/post-helper.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/avatar.svg","path":"images/avatar.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/bg.svg","path":"images/bg.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/animated.styl","path":"css/common/animated.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/basic.styl","path":"css/common/basic.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/keep-theme.styl","path":"css/common/keep-theme.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/variables.styl","path":"css/common/variables.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-brands-400.ttf","path":"font/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-brands-400.woff2","path":"font/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-regular-400.ttf","path":"font/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-regular-400.woff2","path":"font/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-solid-900.ttf","path":"font/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-solid-900.woff2","path":"font/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-v4compatibility.ttf","path":"font/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-v4compatibility.woff2","path":"font/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/css/brands.min.css","path":"font/css/brands.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/css/fontawesome.min.css","path":"font/css/fontawesome.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/css/regular.min.css","path":"font/css/regular.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/css/solid.min.css","path":"font/css/solid.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/gitee.png","path":"images/deploy-provider/gitee.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/aliyun.png","path":"images/deploy-provider/aliyun.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/github.png","path":"images/deploy-provider/github.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/netlify.png","path":"images/deploy-provider/netlify.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/tencent_cloud.png","path":"images/deploy-provider/tencent_cloud.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/upyun.png","path":"images/deploy-provider/upyun.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/vercel.png","path":"images/deploy-provider/vercel.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/code-block.styl","path":"css/common/code-block/code-block.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/code-theme.styl","path":"css/common/code-block/code-theme.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/highlight.styl","path":"css/common/code-block/highlight.styl","modified":0,"renderable":1},{"_id":"source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/bg.svg","path":"images/bg.svg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/JavaScript封装XMLHttpRequest请求.md","hash":"91ccc06d065b776fb0a28800129c2a46a48f3cb5","modified":1689735894645},{"_id":"source/_posts/Markdown.md","hash":"9a2ef9fb2f9986f7870d3a0e932debf2e78b3693","modified":1689736015806},{"_id":"source/_posts/Ajax跨域的几种解决方案.md","hash":"341b1928e027567a469bc4e69f6d590c71bc686b","modified":1689735940877},{"_id":"source/_posts/Jquery-Dom元素Index-方法的使用.md","hash":"208b3e640d40ae55f378fb49c8032a2cea1c17e8","modified":1689735962420},{"_id":"source/_posts/Qiniu-image-tool-实现图片一键上传七牛云.md","hash":"1eb731d72762ef4245ffdcf71ab906cf58d21757","modified":1689736020226},{"_id":"source/_posts/css常用奇淫技巧-不断更新.md","hash":"250fcd695b43728f057ff179cffbd811d86cab11","modified":1689735867574},{"_id":"source/_posts/essionStorage和localStorage解释及区别.md","hash":"81a807d9e927b7c8e71cadb15da0431416d0b423","modified":1689735947811},{"_id":"source/_posts/git常用命令.md","hash":"d9b646a20f5667ce1c0add34434c570412e51186","modified":1689735952404},{"_id":"source/_posts/js-将对象数组中具有相同值的对象取出组成新的数组.md","hash":"ed4b8871d3225b70b1e71ac2af1e1d218ed3591b","modified":1689735986960},{"_id":"source/_posts/js Date对象的详细使用.md","hash":"851b0117c9a3988b78a4de94554def45f6fdfe29","modified":1689735975024},{"_id":"source/_posts/js经典算法.md","hash":"f4b6ee3e7bd42dadf667fd5361dd5b2c74972783","modified":1689735995479},{"_id":"source/_posts/ss3伪类选择器nth-child和nth-of-type的区别.md","hash":"3679c8113650dd218bba3ff5ed6f583bc9d161a5","modified":1689736029657},{"_id":"source/_posts/js跳出循环总结.md","hash":"65895328e5cf70b00bd9359e74e22a124b5a5be6","modified":1689736006369},{"_id":"source/_posts/使用gulp自动化构建前端项目.md","hash":"7e0259996122cdfc18ebcecb2ad806f791291561","modified":1689735930838},{"_id":"source/_posts/使用gulp插件快速开发项目.md","hash":"cf24e5f3e463171b3ab8dbecd2b3c0953e801dd6","modified":1689735934891},{"_id":"source/categories/index.md","hash":"b3348d12132b6666cc96d3f1a55f44f777d8206e","modified":1689670941068},{"_id":"source/tags/index.md","hash":"ff509c1563f036cbb26e0d8219353d80221963cd","modified":1689671880648},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1689669794564},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1689669794564},{"_id":"public/categories/index.html","hash":"82778a0b9f1d8bd30e41b7a61816619f838200ca","modified":1689738432545},{"_id":"public/tags/index.html","hash":"b3f64cecb66a64f3945d5bb16f7742af6de56d59","modified":1689738432545},{"_id":"public/tags/ajax/index.html","hash":"5f658e27aeeaeff6bfa91c13c81087c194572a29","modified":1689738432545},{"_id":"public/tags/跨域/index.html","hash":"b0c2d370589c68cab5af8f0b168177150927c1d0","modified":1689738432545},{"_id":"public/tags/jquery/index.html","hash":"e88ca707636dec930c1df77ea1749ded21250da7","modified":1689738432545},{"_id":"public/tags/Markdown/index.html","hash":"d16ab8105ca686c9cc7fe5598f4115cea398a332","modified":1689738432545},{"_id":"public/tags/upload/index.html","hash":"26ff43f611a89f17dd36771b1b8557eaa1c3096f","modified":1689738432545},{"_id":"public/tags/CSS/index.html","hash":"01e30443a36e4fa0e06c18135011bc1350935e57","modified":1689738432545},{"_id":"public/tags/sessionStorage/index.html","hash":"487fa0e0bb01a17826cd4cfb0c2355cb59cdba60","modified":1689738432545},{"_id":"public/tags/localStorage/index.html","hash":"98e7b086f6d450225921c76c223ef55db77f85bd","modified":1689738432545},{"_id":"public/tags/git/index.html","hash":"fd2d95ca9bb5baec0c98fdeb98658714a8203a49","modified":1689738432545},{"_id":"public/tags/js/index.html","hash":"d01ea60fda92ed33c4a056500ee1c21c6e16a77d","modified":1689738432545},{"_id":"public/tags/date/index.html","hash":"97ebfc5c868ac42a16eb115f15fead359ff4c2aa","modified":1689738432545},{"_id":"public/tags/Array/index.html","hash":"eb50d2aa04b95ea40703d651a62da83491052f61","modified":1689738432545},{"_id":"public/tags/sort/index.html","hash":"a5f24051b1b3d7c970e02f5616520f488299f1ee","modified":1689738432545},{"_id":"public/tags/循环/index.html","hash":"b290ae67de0eebb0ee3d2c0c00467a4dbe915e96","modified":1689738432545},{"_id":"public/tags/css/index.html","hash":"6be81882e02e34afe3fb8682ee53d518d4ace50d","modified":1689738432545},{"_id":"public/tags/伪类选择器/index.html","hash":"54667a119f7b4cc9c473bf756b2132305a8f2c33","modified":1689738432545},{"_id":"public/tags/gulp/index.html","hash":"aee51154dbe8dd8df11c4527afb8c08c93fb8caa","modified":1689738432545},{"_id":"public/archives/index.html","hash":"e0431b1d825f4ed4abf9b9cbf91525f8453b8039","modified":1689738432545},{"_id":"public/archives/page/2/index.html","hash":"21f4bd2038ce1c4e7d54d48dc279c384020c5890","modified":1689671069610},{"_id":"public/archives/2017/index.html","hash":"20eb8c093b5c40d11a2baa9aaae92b6da365d4da","modified":1689738432545},{"_id":"public/archives/2017/06/index.html","hash":"cb0440ddde8098762eed81a6f4dfade8ed4d2a27","modified":1689738432545},{"_id":"public/archives/2017/07/index.html","hash":"643fc37c90bedc081e260a7774a2dcf93c2347e7","modified":1689738432545},{"_id":"public/archives/2018/index.html","hash":"e1742a02d5b29be25740ada9e5f2d91cf3219f6a","modified":1689738432545},{"_id":"public/archives/2018/07/index.html","hash":"c51ca3ec4b216fafdf9f7fd55a994340b841b79d","modified":1689738432545},{"_id":"public/archives/2018/08/index.html","hash":"7aec8cf44d86af3deec96eb9959457568b713524","modified":1689738432545},{"_id":"public/categories/Ajax/index.html","hash":"592dfb82aa893eb60954daacd65e487cefa7845f","modified":1689738432545},{"_id":"public/categories/javascript/index.html","hash":"71ff0568d05c96edc2723a2700afe9fba34335bf","modified":1689738432545},{"_id":"public/categories/Markdown/index.html","hash":"90f7fe691b8d362d368dde47e985950b1936c13c","modified":1689738432545},{"_id":"public/categories/云储存/index.html","hash":"a9e99612c4e65c9d20bcf70cd16e3456b02bf030","modified":1689738432545},{"_id":"public/categories/前端/index.html","hash":"7d7a6dfa7eb96d2261adee417edef499901c1612","modified":1689738432545},{"_id":"public/categories/工具/index.html","hash":"6e8ea7784361b184eca2ac5828df153cdb125e44","modified":1689738432545},{"_id":"public/categories/算法/index.html","hash":"558232dc9937f6df65084df589c3c050e139a615","modified":1689738432545},{"_id":"public/2018/08/30/css常用奇淫技巧-不断更新/index.html","hash":"2d7c523b06dd2a46e936c0e1141dc2c9bb4d6883","modified":1689738432545},{"_id":"public/2018/08/16/JavaScript封装XMLHttpRequest请求/index.html","hash":"5a8ecae79ac6b6198fe5ec59dafa11edf11485d0","modified":1689738432545},{"_id":"public/2018/08/14/Ajax跨域的几种解决方案/index.html","hash":"8935d7928eadc06fb51340af20a7d03772d6342b","modified":1689738432545},{"_id":"public/2018/08/07/essionStorage和localStorage解释及区别/index.html","hash":"c52361794aa4814d83df0ecb3a29461f1734eead","modified":1689738432545},{"_id":"public/2018/07/31/js跳出循环总结/index.html","hash":"193b508e7187378484232ddc5568bfc99c2caee5","modified":1689738432545},{"_id":"public/2018/07/27/js经典算法/index.html","hash":"fa86df946354a567b3f4377fca6bc5da7db0093f","modified":1689738432545},{"_id":"public/2018/07/26/js-将对象数组中具有相同值的对象取出组成新的数组/index.html","hash":"c9101e6c2928c844ea60079bd8bc39cc27d6e548","modified":1689738432545},{"_id":"public/2018/07/19/js Date对象的详细使用/index.html","hash":"e37c64a5a528b7018b04a1288037f98d61b83e3d","modified":1689738432545},{"_id":"public/2018/07/08/git常用命令/index.html","hash":"6295543e7918b17c9f5981640de07ae85faf3f56","modified":1689738432545},{"_id":"public/2018/07/02/Qiniu-image-tool-实现图片一键上传七牛云/index.html","hash":"92fab242e8e9c342be361c1640328a1c40834c2b","modified":1689738432545},{"_id":"public/2017/07/16/使用gulp插件快速开发项目/index.html","hash":"f791abbc14332d67a954cc79e26648e6682cac5d","modified":1689738432545},{"_id":"public/2017/07/09/使用gulp自动化构建前端项目/index.html","hash":"7121d526a2b58adf757feb2d6a45d809f245096d","modified":1689738432545},{"_id":"public/2017/06/10/ss3伪类选择器nth-child和nth-of-type的区别/index.html","hash":"7e936158ef109b635199e904f7bc5b21f54c0517","modified":1689738432545},{"_id":"public/2017/06/10/Jquery-Dom元素Index-方法的使用/index.html","hash":"5dcb3adfa900876e3d06925a3a0414d997b5a601","modified":1689738432545},{"_id":"public/2017/06/09/Markdown/index.html","hash":"a45c200be1d7c3549212c2712e3750dea2ba1f7f","modified":1689738432545},{"_id":"public/index.html","hash":"f708798834bfaecd8b40f2e1fd5bda92d6ad0ec3","modified":1689738432545},{"_id":"public/page/2/index.html","hash":"e5dd3abed89304648d31b59fb0b4d9eee355fd2d","modified":1689738432545},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1689671069610},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1689671069610},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1689671069610},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1689671069610},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1689671069610},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1689671069610},{"_id":"node_modules/hexo-theme-keep/.stylelintrc.js","hash":"63ce9d43e8675a8cb771332c81c89ba7a60b5516","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/.editorconfig","hash":"a1c91f0a086bf92fddb02ccf23578ec2b51c099c","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/.prettierrc","hash":"459178a4dff70a0885b6f5a49eb6a6265eea3083","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/package.json","hash":"b9773cf0a19570228bafa4e1b909e7bd77c4f725","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/archive-content.ejs","hash":"cfa8f29b8863534f407136ea3deb18a4b2ff722c","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/LICENSE","hash":"a2f9ffbf32eeb6284afa81bc4fb4c27b80d044e9","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/README.md","hash":"de7d040ec4f6c641cf0b1862a3b3a50871204f66","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/article-content.ejs","hash":"c86ed0ca8b954dafa27344230377cea3a4297377","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/category-content.ejs","hash":"aef0c90a395f909be7d2c358eb41d5558a10406f","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/home-content.ejs","hash":"a93a12e6e1ef5dea5040ad9e6d4a5ff54ce59d34","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/category-list.ejs","hash":"a9390b25238332417fd554d32563a4d9999db90f","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/index.ejs","hash":"f5fee4e079a9c2c23059ebde4cd89ec723e310c6","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/layout.ejs","hash":"da9dbeba541ad19fed35c41fe187f4016e41f0db","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/_config.yml","hash":"e08115d887eceddb2b9d9af4f65acd88cdb6ee85","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/page.ejs","hash":"12e4a259b150550df0b5d755445eb66279fd070b","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/tag-content.ejs","hash":"ce4c8192a4ccd6a626af412a7ba258d1edbc0b95","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/languages/en.yml","hash":"a35457c872d210187297ed847019ed4cc3b7490b","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/docs/README_zh-TW.md","hash":"b671446e33d6a3c2eda4e5cf872b6af50e05cb0c","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/languages/zh-TW.yml","hash":"d11704ad1a296b1065e95d0334f8005631064120","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/scripts/use-source-data.js","hash":"b29e05a8a9ba823cce7c6f6d8b1482aad5ff0d78","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/languages/zh-CN.yml","hash":"91408372d2d5de3ec5ed258067048d01cf0573a7","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/docs/README_zh-CN.md","hash":"23bd77d30922600b087de94a7554c4453b42ed00","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/archive-list.ejs","hash":"7c33e49286d54824cd8f3483e30de5579951edc6","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/article-meta-info.ejs","hash":"02517e621cfca341e4302515254b9b093e59096d","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/article-copyright-info.ejs","hash":"80a076f448d4ba0aeefa23a328c6a35373457ceb","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/first-screen.ejs","hash":"02b8c87fd2efb2c7f119c5d39df8ca2ece8090e2","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/friends-link.ejs","hash":"fe35aa6dabeb31bc677270062eed569f37472c2c","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/head.ejs","hash":"5756715ca7169e7892d1ecf1106b375c2384f0f3","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/footer.ejs","hash":"1427ce2d450bca6c62182b072e6ab1ae91e3e0cd","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/header.ejs","hash":"d7e7c69f35803eda54d382c9d6dd18e07fe59151","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/home-article-meta-info.ejs","hash":"80ec05febba29bcc4e7ee4f69f0913a37a367401","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/image-viewer.ejs","hash":"e785b4ca258ce378354216038ef544ca6ef4af51","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/local-search.ejs","hash":"18207b298e413fc6b89efc07aa63e8c95a06e56c","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/page-template.ejs","hash":"867ad77ad0316b16368ad9ed15216278b6787142","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/paginator.ejs","hash":"cfd4d9a30bd20ee0750b79226cb94562439013bf","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/progress-bar.ejs","hash":"ed9cc028221623ee70ec036be7a339e535a96282","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/scripts.ejs","hash":"4f8d78d8f2fb77b1a8362f5b4b8cb332bc44e0e3","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/post-tools.ejs","hash":"b694e79dafb0353c52d95ceb6d6d3125bdff2bbb","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/scripts/filters/lazyload-handle.js","hash":"d2bad37e2d3fa4eb68b84b27c6b1469b283958bb","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/tagcloud.ejs","hash":"5968618b53a029922f2255b0c76bf8a9f11712ff","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/scripts/filters/link-handle.js","hash":"37a157254ba77fc365c8d9a365cd794cede49394","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/scripts/helpers/helper.js","hash":"b26b7ef5533f0b821e8b67c7f19736b94f47b8d0","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/side-tools.ejs","hash":"c02154a6ff23ed86029a97d87ee9e32f138f86e9","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/toc.ejs","hash":"a4677037bb85ecf001d75f89c24d56012d5ed713","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/scripts/helpers/export-config.js","hash":"b27150a8dfb5294907519c7b4036a863466ee0d5","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/js/code-block.js","hash":"2a8ec5a390a22b241d0530f1bc2b31099e2c8b98","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/js/back2top.js","hash":"29844919b56731cb8e5f004dd0bbf60d7f35ffa2","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/style.styl","hash":"835ad066434da1b4aa01b3ed85d297fad8bb335c","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/js/dark-light-toggle.js","hash":"8917d0a55490f38ddeb22ddcd2bb299e1efc0a03","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/js/main.js","hash":"444d930270ca4dcac83db08b6e9ec88972d5a7ce","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/js/header-shrink.js","hash":"eee93fda3976ed7b9bebfe2f22b13d0cd085d1b1","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/js/lazyload.js","hash":"d0e0878947b429ba59b0f952a498a05d6d77d0fa","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/js/toc.js","hash":"4ecdb3a10ffb72d47166ae05afca1dca7921ea18","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/js/post-helper.js","hash":"0a4dbabbea430fbb22f4c13710f46476b9de333b","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/js/local-search.js","hash":"752f9a59729f14d10a57df1694edca12db312565","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/images/avatar.svg","hash":"aba8367cd7550e75279f707671d7146813c2a776","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/images/bg.svg","hash":"f3106cd334dc2ceef885c19012bf59a48498af42","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/js/utils.js","hash":"a960cadda1391cb1154e889c63c1a2fb7801dbb4","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/images/logo.svg","hash":"b618728f9964a5698b1dc2548db35b3d06dd115f","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/comment.ejs","hash":"5cb7b276a1690942d89abdbe96256a7d56997cee","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/gitalk.ejs","hash":"e906fe83b2dcd1cc564d56a6233ae2aabaaf7762","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/twikoo.ejs","hash":"ade54480d4a6b5b29ff4d49c96b5c10f77bd8e13","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/valine.ejs","hash":"e8a51e1fa6af6741130f3cd8a34005953b34f29f","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/waline.ejs","hash":"ccc31caba2b087dd4b60ae19ce38219ac2d3b815","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/layout/_partial/pjax/pjax.ejs","hash":"949d3fdd4bd215cd7d0c95152c4be630ce227e16","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/archive-content.styl","hash":"f9e5b3f42edf8acee239b0e2852d2fa46e9027fd","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/article-content.styl","hash":"a74e5ada04616f97a362867ee04be2216281a277","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/category-list.styl","hash":"175732fde377c35deab38baea5f2b84630404075","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/page.styl","hash":"317013278ed0528e831170af499fbf26f7d353cb","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/tag-content.styl","hash":"bcbf91ada5ba27a1a3465c7f2b0dd11fffe27b81","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/category-content.styl","hash":"220d03f95fdc742ca02006f6d73c477d2472913e","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/home-content.styl","hash":"4646c2409eab7a62b66116d776485fd270f1da11","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/common/keep-theme.styl","hash":"63c4d5d18d0e7ea31fb31cfeff5dffd700990c1b","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/common/basic.styl","hash":"c58a437727ee5f5c79939b51b67f135eb8f1a18d","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/common/animated.styl","hash":"1b1cbce1030843b0d8db76ca54a16570939c3518","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/common/markdown.styl","hash":"a376fa3f9bb12031ecca449ad3899497dfa22723","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/common/variables.styl","hash":"9f1a790f091711178c0602150d5d7b3d3e4d3cd3","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-regular-400.ttf","hash":"9262ea1d0711b658bb75d5cbe9345e080c7dea90","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-regular-400.woff2","hash":"56be4c28de7c67747b0fe3dd606be8b319f6d4f4","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-v4compatibility.woff2","hash":"9e1f957bf329bd280aba89e578420301b312403d","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/font/css/brands.min.css","hash":"bb325aa1de092336cbce1281b36663b7fa198023","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/font/css/regular.min.css","hash":"58d2ff307db72217d6628940a3c07f9e982a3eea","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-v4compatibility.ttf","hash":"b12c2b515fb62c370de1af4ca99635b00aabfe58","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/font/css/solid.min.css","hash":"f588237d4d8957093e2837c965ac78d059230f78","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/gitee.png","hash":"d4c79d132c914bf28386df102e7c3f0607c95369","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/github.png","hash":"fa9ed69cd0a004f3cd334d098b8fea5ae2ac3835","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/netlify.png","hash":"894e9d227c3ebe1ca05d431c74b61c716eaf4e4d","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/tencent_cloud.png","hash":"be5357326af6c68b7c109fe5d4f92ada5daec900","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/upyun.png","hash":"923dafcc484388f2a1c20356e37eaf62b85479f4","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/vercel.png","hash":"2b0538b5cd09f71f06f5968a6cd0ae910a96f4ca","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/images/deploy-provider/aliyun.png","hash":"4a4464a8a66adb9ecddf2084087dd652690942d5","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/article-copyright-info.styl","hash":"4728dae2a69efa49857387f9f2b7c984c70aead7","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/archive-list.styl","hash":"4b2f8f1e2c800f0466c5cb3750f59db4bc8b8d7a","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/article-meta-info.styl","hash":"f0633d845a41311f3cee8e65d6f1051820558534","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/first-screen.styl","hash":"74f197f4b43000a5fc35384c01a62089b58870ca","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/footer.styl","hash":"dd66e8ecf2880d335f2fa2234eea6f8d79918b4e","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/local-search.styl","hash":"ba965eb5230054feab9aad37c7668daf10281e3f","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/header.styl","hash":"2f74bb36adefa08b816d86c64d880a460bab0795","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/image-viewer.styl","hash":"d3fb3d4beb0e8f3558d3010b7d28298600c2ae8f","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/paginator.styl","hash":"da05f5e854e87d5f6b9a32c25ba8fce6198d7896","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/page-template.styl","hash":"cd41dcf44aa780e649379d6315c60472c36583cb","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/post-tools.styl","hash":"919dda64b34d03db6f18568f784e93d86d75c84e","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/progress-bar.styl","hash":"004f03e06116caedbb8726ddf62d1508df0fe279","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/side-tools.styl","hash":"0bc1cd82840a1d99effc764781f3c79767e15fd1","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/toc.styl","hash":"e1be679e4d097e711177c34136d23be53761d3a6","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/tagcloud.styl","hash":"d44fd728256fa9156bf3e915c930b9aa12ccf716","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/code-block.styl","hash":"56d3453a414a10a93a72e7b252f26d5089f7becb","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/highlight.styl","hash":"c28de7e1471b5f00950e94114539038b2e7c0822","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/code-theme.styl","hash":"abbe5cd155deeda2cb60a46f55ba484ff62d5f04","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/gitalk.styl","hash":"6344eabedc352463b3ae25e2ee28024c70bd31a2","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/comment.styl","hash":"46e9995d972e1a7813ea42b01c86b5136bc9885a","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/twikoo.styl","hash":"df0b0cf4a778d1e1fbcade3d226ced1a74fdb38f","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/valine.styl","hash":"71ef4b5b22a63d567e48f76ccfaacc79ee40e7bc","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/waline.styl","hash":"c125cadea4680ec3f08aa32ddabe3b2fed935dbe","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-brands-400.woff2","hash":"380bea4e9eb484d835d89cc608f2af7c3179e8a4","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/font/css/fontawesome.min.css","hash":"f2c5219fb9f58c2baee6dbd965741975cbc8ae71","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-brands-400.ttf","hash":"42350ed503d66ae23a9c68d38966f25bc3007319","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-solid-900.woff2","hash":"a7fca574d24e9ffa5ee0e0589ffe17277ae4ec27","modified":1689671470766},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-solid-900.ttf","hash":"d2caaf5ce75d0da13ace325e24f7aa7079ef1891","modified":1689671470766},{"_id":"source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1689673160345},{"_id":"source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1689673160348},{"_id":"source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1689673160349},{"_id":"source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1689673160349},{"_id":"source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1689673160350},{"_id":"source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1689673160351},{"_id":"source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1689673160352},{"_id":"source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1689673160352},{"_id":"source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1689673160353},{"_id":"source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1689673160354},{"_id":"source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1689673160355},{"_id":"source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1689673160356},{"_id":"source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1689673160354},{"_id":"source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1689673160355},{"_id":"source/images/weixin.png","hash":"f3c98f05125b5009413427f62d3cb655fc57d055","modified":1689673160357},{"_id":"source/images/alipay.png","hash":"bbfb872e5bb1f475a9ea1557ff6aeabd5c655560","modified":1689673160347},{"_id":"source/images/xiaoxiong.png","hash":"e865d3a544d4411433aaed5f192ff478c7f0f18d","modified":1689673160360},{"_id":"source/.DS_Store","hash":"4958815f0dda2261a5b9d5b7197e79cd1f7c90ac","modified":1689738388336},{"_id":"source/images/bg.svg","hash":"f3106cd334dc2ceef885c19012bf59a48498af42","modified":1689729434540},{"_id":"source/images/avatar.jpg","hash":"d01520e7d6cb83134771d9f8ef0e9a11bdc6a912","modified":1689729267806},{"_id":"source/images/.DS_Store","hash":"2d43cb3f102655a163eea58fb900c18e052d3993","modified":1689738383288},{"_id":"public/search.json","hash":"c9347443f6ccb1de81199689df6f60980ca61d09","modified":1689738432545},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1689738432545}],"Category":[{"name":"Ajax","_id":"clk82gyjc00043164acrm6wi2"},{"name":"javascript","_id":"clk82gyjl000d3164gzubhrm0"},{"name":"Markdown","_id":"clk82gyjo000l31647kcre09q"},{"name":"云储存","_id":"clk82gyjt000r31643bjm725b"},{"name":"前端","_id":"clk82gyjw000y3164arzqc0fj"},{"name":"工具","_id":"clk82gyk0001a3164bwm9hhc4"},{"name":"算法","_id":"clk82gyk1001f316473yn8hmo"}],"Data":[],"Page":[{"title":"categories","date":"2017-06-05T12:13:54.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-06-05 20:13:54\ntype: \"categories\"\n---\n","updated":"2023-07-18T09:02:21.068Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clk82gyj100003164dj0074ji","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","date":"2017-06-05T12:11:31.000Z","_content":"","source":"tags/index.md","raw":"title: tags\ntype: tags\ndate: 2017-06-05 20:11:31\n---","updated":"2023-07-18T09:18:00.648Z","path":"tags/index.html","_id":"clk82gyja000231649qja1oct","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Ajax跨域的几种解决方案","author":"熊 超","date":"2018-08-14T06:45:00.000Z","_content":"<!-- more --> \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这个前后端分离越来越流行的时代，跨域请求对于我们来说已经非常常见了。关于跨域，有N种类型，本文只专注于ajax请求跨域。\n## 何为跨域请求\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跨域问题来源于JavaScript的同源策略，即只有 协议+主机名+端口号 (如存在)相同，则允许相互访问。也就是说JavaScript只能访问和操作自己域下的资源，不能访问和操作其他域下的资源。跨域问题是针对JS和ajax的，html本身没有跨域问题，比如a标签、script标签、甚至form标签（可以直接跨域发送数据并接收数据）等。\n\n## 几种常见跨域请求\n\n|  请求地址  | 服务器地址 | 结果 |\n| --------   | -----  | :----:  |\n| http://www.123.com | http://www.abc.com | (主域名不同，跨域)\n| http://123.xiongchao.com | http://abc.xiongchao.com | (子域名不同，跨域)\n| http://www.xiongchao.com:8080 | http://www.xiongchao.com:8081 | (端口不同，跨域)\n| http://www.xiongchao.com | https://www.xiongchao.com | (协议不同，跨域)\n注意：localhost 和 localhost:8080、localhost 和 127.0.0.1 也属于跨域\n\n\n## 跨域情形\n\n\n请求代码：\n``` js\nvar requestApi = \"http://localhost:8080/springmvc_hibernate_maven/\";\n$.ajax({\n    type:'get',\n    url:requestApi + \"test/userInfo\",\n    dataType:'json',\n    success:function(data){\n        console.log(data);\n    },\n    error:function(err){\n        console.log(err);\n    }\n});\n```\n\n服务器端java代码\n``` java\n@Controller\n@RequestMapping(\"/test\")\npublic class Test {\n\t@ResponseBody\n\t@RequestMapping(value = \"/userInfo\",method = RequestMethod.GET)\n\tpublic String getUserInfo(HttpServletResponse httpServletResponse){\n\t\tUser user = new User();\n\t\tuser.setId(1);\n\t\tuser.setName(\"java\");\n\t\tuser.setPassword(\"123456\");\n\t\tuser.setLoginDate(\"2018-08-14\");\n\t\tSystem.out.println(JSON.toJSONString(user));\n\t\treturn JSON.toJSONString(user);\n\t}\n}\n```\n\n浏览器中访问（将html部署到nginx）结果:\n![](http://xiongcao.github.io/blogImage/201808141515_419.png)\n![](http://xiongcao.github.io/blogImage/201808141516_535.png)\n\n虽然请求成功并且返回了状态码200，但是并没有返回内容，并且控制台还打印了报错信息\n\n\n## 常见几种解决方案\n\n### jsonp方式处理（基本被淘汰了）\n先看看json和jsonp数据格式的区别：\n#### json格式\n``` json\n{\n  \"id\":\"1\",\n  \"name\":\"java\",\n  \"password\":\"123456\",\n  \"loginDate\":\"2018-08-14\"\n}\n```\n\n#### jsonp格式\n``` jsonp\ncallback({\n  \"id\":\"1\",\n  \"name\":\"java\",\n  \"password\":\"123456\",\n  \"loginDate\":\"2018-08-14\"\n})\n```\njsonp比json外面有多了一层，callback()。\n\n我们在请求的url后面拼接一个callback参数，用于返回jsonp格式数据\n``` js\n$.ajax({\n    type:'get',\n    url:requestApi + \"test/userInfo?callback=\",\n    dataType:'jsonp',\n    success:function(data){\n        console.log(data);\n    },\n    error:function(err){\n        console.log(err);\n    }\n})\n```\n\n服务器端处理：\n``` java\n@Controller\n@RequestMapping(\"/test\")\npublic class Test {\n\t@ResponseBody\n\t@RequestMapping(value = \"/userInfo\",method = RequestMethod.GET)\n\tpublic String getUserInfo(HttpServletRequest request){\n                String callback = request.getParameter(\"callback\");\n\t\tUser user = new User();\n\t\tuser.setId(1);\n\t\tuser.setName(\"java\");\n\t\tuser.setPassword(\"123456\");\n\t\tuser.setLoginDate(\"2018-08-14\");\n\t\tSystem.out.println(JSON.toJSONString(user));\n\t\treturn callback+\"(\" + JSONObject.toJSONString(user) + \")\";\n\t}\n}\n```\n\n我们看一下后台获取的callback的值\n![](http://xiongcao.github.io/blogImage/201808141602_241.png)\n\n修改请求代码再看一下后台获取的callback的值\n``` js\n$.ajax({\n    type:'get',\n    url:requestApi + \"test/userInfo\",\n    dataType:'jsonp',\n    jsonpCallback:'testCallback',\n    success:function(data){\n        console.log(data);\n    },\n    error:function(err){\n        console.log(err);\n    }\n})\n```\n正是我们自定义的callback的值\n![](http://xiongcao.github.io/blogImage/201808141605_213.png)\n\n最后查看请求结果，控制台成功打印获取获取的数据\n![](http://xiongcao.github.io/blogImage/201808141607_11.png)\n\n#### <font color=\"red\">需要注意的是jsonp是不支持post方式跨域请求，就算指定成POST方式，会自动转为GET方式；而后端如果设置成POST方式了，那就请求不了了。</font>\n#### <font color=\"red\">另外可以使用jquer-jsonp插件实现跨域请求，服务器端无需做任何处理。</font>\n\n\n### java服务器端添加允许跨域请求的响应头\n\najax请求不用改，只需要添加响应头部Access-Control-Allow-Origin允许所有请求来源就可以了（所有服务器端处理都类似，对java不是很熟练，所以简单略过）\n``` java\n@Controller\n@RequestMapping(\"/test\")\npublic class Test {\n\t@ResponseBody\n\t@RequestMapping(value = \"/userInfo\",method = RequestMethod.GET)\n\tpublic String getUserInfo(HttpServletResponse httpServletResponse){\n                httpServletResponse.addHeader(\"Access-Control-Allow-Origin\", \"*\");\n\t\tUser user = new User();\n\t\tuser.setId(1);\n\t\tuser.setName(\"java\");\n\t\tuser.setPassword(\"123456\");\n\t\tuser.setLoginDate(\"2018-08-14\");\n\t\tSystem.out.println(JSON.toJSONString(user));\n\t\treturn JSON.toJSONString(user);\n\t}\n}\n```\n\n结果：\n![](http://xiongcao.github.io/blogImage/201808141525_79.png)\n成功请求！\n\n\n### 比jsonp更强大的CORS方式解决跨域\n\n基于JSONP的实现原理,所以JSONP只能是“GET”请求,不能进行较为复杂的POST和其它请求,所以遇到那种情况,就得参考下面的CORS解决跨域了。\n\n这里介绍的是java后端应该如何配置以解决问题\n\n第一步：\n1.非maven项目：获取依赖jar包下载 cors-filter-1.7.jar, java-property-utils-1.9.jar 这两个库文件放到lib目录下\n2.mavne项目：添加如下依赖到pom.xml中\n``` xml\n<dependency>\n  <groupId>com.thetransactioncompany</groupId>\n  <artifactId>cors-filter</artifactId>\n  <version>2.6</version>\n</dependency>\n```\n\n第二步:添加CORS配置到项目的Web.xml中(/WEB-INF/web.xml)\n```\n<!-- 跨域配置 -->\n<filter>\n  <!-- The CORS filter with parameters -->\n  <filter-name>CORS</filter-name>\n  <filter-class>com.thetransactioncompany.cors.CORSFilter</filter-class>\n  <!-- Note: All parameters are options, if omitted the CORS Filter will \n    fall back to the respective default values. -->\n  <init-param>\n    <param-name>cors.allowGenericHttpRequests</param-name>\n    <param-value>true</param-value>\n  </init-param>\n  <init-param>\n    <param-name>cors.allowOrigin</param-name>\n    <param-value>*</param-value>\n  </init-param>\n  <init-param>\n    <param-name>cors.allowSubdomains</param-name>\n    <param-value>false</param-value>\n  </init-param>\n  <init-param>\n    <param-name>cors.supportedMethods</param-name>\n    <param-value>GET, HEAD, POST,PUT,DELETE OPTIONS</param-value>\n  </init-param>\n  <init-param>\n    <param-name>cors.supportedHeaders</param-name>\n    <param-value>Accept, Origin, X-Requested-With, Content-Type, Last-Modified</param-value>\n  </init-param>\n  <init-param>\n    <param-name>cors.exposedHeaders</param-name>\n    <!--这里可以添加一些自己的暴露Headers -->\n    <param-value>X-Test-1, X-Test-2</param-value>\n  </init-param>\n  <init-param>\n    <param-name>cors.supportsCredentials</param-name>\n    <param-value>true</param-value>\n  </init-param>\n  <init-param>\n    <param-name>cors.maxAge</param-name>\n    <param-value>3600</param-value>\n  </init-param>\n</filter>\n<filter-mapping>\n  <!-- CORS Filter mapping -->\n  <filter-name>CORS</filter-name>\n  <url-pattern>/*</url-pattern>\n</filter-mapping>\n```\n请注意,以上配置文件请放到web.xml的前面,作为第一个filter存在(可以有多个filter的)\n\n除了上述配置，我们无需添加其他任何代码就可以尽情的使用GET,POST,PUT,DELETE等等这个方法了，是不是比jsonp强大多了\n\n现在我们再来正常请求和处理请求试一下\n``` js\n$.ajax({\n    type:'delete',\n    url:requestApi + \"test/userInfo\",\n    dataType:'json',\n    success:function(data){\n        console.log(data);\n    },\n    error:function(err,textStatus){\n        console.log(\"err\",err);\n    }\n})\n```\n\n``` java\n@Controller\n@RequestMapping(\"/test\")\npublic class Test {\n\t@ResponseBody\n\t@RequestMapping(value = \"/userInfo\",method = RequestMethod.DELETE)\n\tpublic String getUserInfo(HttpServletRequest request,HttpServletResponse response){\n\t\tUser user = new User();\n\t\tuser.setId(1);\n\t\tuser.setName(\"java\");\n\t\tuser.setPassword(\"123456\");\n\t\tuser.setLoginDate(\"2018-08-14\");\n\t\treturn JSONObject.toJSONString(user); \n\t}\n}\n```\n\n请求结果：可以看到有OPTIONS请求了\n![](http://xiongcao.github.io/blogImage/201808141716_132.png)\n![](http://xiongcao.github.io/blogImage/201808141716_238.png)\n![](http://xiongcao.github.io/blogImage/201808141607_11.png)\n","source":"_posts/Ajax跨域的几种解决方案.md","raw":"title: Ajax跨域的几种解决方案\nauthor: 熊 超\ntags:\n  - ajax\n  - 跨域\ncategories:\n  - Ajax\ndate: 2018-08-14 14:45:00\n---\n<!-- more --> \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这个前后端分离越来越流行的时代，跨域请求对于我们来说已经非常常见了。关于跨域，有N种类型，本文只专注于ajax请求跨域。\n## 何为跨域请求\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跨域问题来源于JavaScript的同源策略，即只有 协议+主机名+端口号 (如存在)相同，则允许相互访问。也就是说JavaScript只能访问和操作自己域下的资源，不能访问和操作其他域下的资源。跨域问题是针对JS和ajax的，html本身没有跨域问题，比如a标签、script标签、甚至form标签（可以直接跨域发送数据并接收数据）等。\n\n## 几种常见跨域请求\n\n|  请求地址  | 服务器地址 | 结果 |\n| --------   | -----  | :----:  |\n| http://www.123.com | http://www.abc.com | (主域名不同，跨域)\n| http://123.xiongchao.com | http://abc.xiongchao.com | (子域名不同，跨域)\n| http://www.xiongchao.com:8080 | http://www.xiongchao.com:8081 | (端口不同，跨域)\n| http://www.xiongchao.com | https://www.xiongchao.com | (协议不同，跨域)\n注意：localhost 和 localhost:8080、localhost 和 127.0.0.1 也属于跨域\n\n\n## 跨域情形\n\n\n请求代码：\n``` js\nvar requestApi = \"http://localhost:8080/springmvc_hibernate_maven/\";\n$.ajax({\n    type:'get',\n    url:requestApi + \"test/userInfo\",\n    dataType:'json',\n    success:function(data){\n        console.log(data);\n    },\n    error:function(err){\n        console.log(err);\n    }\n});\n```\n\n服务器端java代码\n``` java\n@Controller\n@RequestMapping(\"/test\")\npublic class Test {\n\t@ResponseBody\n\t@RequestMapping(value = \"/userInfo\",method = RequestMethod.GET)\n\tpublic String getUserInfo(HttpServletResponse httpServletResponse){\n\t\tUser user = new User();\n\t\tuser.setId(1);\n\t\tuser.setName(\"java\");\n\t\tuser.setPassword(\"123456\");\n\t\tuser.setLoginDate(\"2018-08-14\");\n\t\tSystem.out.println(JSON.toJSONString(user));\n\t\treturn JSON.toJSONString(user);\n\t}\n}\n```\n\n浏览器中访问（将html部署到nginx）结果:\n![](http://xiongcao.github.io/blogImage/201808141515_419.png)\n![](http://xiongcao.github.io/blogImage/201808141516_535.png)\n\n虽然请求成功并且返回了状态码200，但是并没有返回内容，并且控制台还打印了报错信息\n\n\n## 常见几种解决方案\n\n### jsonp方式处理（基本被淘汰了）\n先看看json和jsonp数据格式的区别：\n#### json格式\n``` json\n{\n  \"id\":\"1\",\n  \"name\":\"java\",\n  \"password\":\"123456\",\n  \"loginDate\":\"2018-08-14\"\n}\n```\n\n#### jsonp格式\n``` jsonp\ncallback({\n  \"id\":\"1\",\n  \"name\":\"java\",\n  \"password\":\"123456\",\n  \"loginDate\":\"2018-08-14\"\n})\n```\njsonp比json外面有多了一层，callback()。\n\n我们在请求的url后面拼接一个callback参数，用于返回jsonp格式数据\n``` js\n$.ajax({\n    type:'get',\n    url:requestApi + \"test/userInfo?callback=\",\n    dataType:'jsonp',\n    success:function(data){\n        console.log(data);\n    },\n    error:function(err){\n        console.log(err);\n    }\n})\n```\n\n服务器端处理：\n``` java\n@Controller\n@RequestMapping(\"/test\")\npublic class Test {\n\t@ResponseBody\n\t@RequestMapping(value = \"/userInfo\",method = RequestMethod.GET)\n\tpublic String getUserInfo(HttpServletRequest request){\n                String callback = request.getParameter(\"callback\");\n\t\tUser user = new User();\n\t\tuser.setId(1);\n\t\tuser.setName(\"java\");\n\t\tuser.setPassword(\"123456\");\n\t\tuser.setLoginDate(\"2018-08-14\");\n\t\tSystem.out.println(JSON.toJSONString(user));\n\t\treturn callback+\"(\" + JSONObject.toJSONString(user) + \")\";\n\t}\n}\n```\n\n我们看一下后台获取的callback的值\n![](http://xiongcao.github.io/blogImage/201808141602_241.png)\n\n修改请求代码再看一下后台获取的callback的值\n``` js\n$.ajax({\n    type:'get',\n    url:requestApi + \"test/userInfo\",\n    dataType:'jsonp',\n    jsonpCallback:'testCallback',\n    success:function(data){\n        console.log(data);\n    },\n    error:function(err){\n        console.log(err);\n    }\n})\n```\n正是我们自定义的callback的值\n![](http://xiongcao.github.io/blogImage/201808141605_213.png)\n\n最后查看请求结果，控制台成功打印获取获取的数据\n![](http://xiongcao.github.io/blogImage/201808141607_11.png)\n\n#### <font color=\"red\">需要注意的是jsonp是不支持post方式跨域请求，就算指定成POST方式，会自动转为GET方式；而后端如果设置成POST方式了，那就请求不了了。</font>\n#### <font color=\"red\">另外可以使用jquer-jsonp插件实现跨域请求，服务器端无需做任何处理。</font>\n\n\n### java服务器端添加允许跨域请求的响应头\n\najax请求不用改，只需要添加响应头部Access-Control-Allow-Origin允许所有请求来源就可以了（所有服务器端处理都类似，对java不是很熟练，所以简单略过）\n``` java\n@Controller\n@RequestMapping(\"/test\")\npublic class Test {\n\t@ResponseBody\n\t@RequestMapping(value = \"/userInfo\",method = RequestMethod.GET)\n\tpublic String getUserInfo(HttpServletResponse httpServletResponse){\n                httpServletResponse.addHeader(\"Access-Control-Allow-Origin\", \"*\");\n\t\tUser user = new User();\n\t\tuser.setId(1);\n\t\tuser.setName(\"java\");\n\t\tuser.setPassword(\"123456\");\n\t\tuser.setLoginDate(\"2018-08-14\");\n\t\tSystem.out.println(JSON.toJSONString(user));\n\t\treturn JSON.toJSONString(user);\n\t}\n}\n```\n\n结果：\n![](http://xiongcao.github.io/blogImage/201808141525_79.png)\n成功请求！\n\n\n### 比jsonp更强大的CORS方式解决跨域\n\n基于JSONP的实现原理,所以JSONP只能是“GET”请求,不能进行较为复杂的POST和其它请求,所以遇到那种情况,就得参考下面的CORS解决跨域了。\n\n这里介绍的是java后端应该如何配置以解决问题\n\n第一步：\n1.非maven项目：获取依赖jar包下载 cors-filter-1.7.jar, java-property-utils-1.9.jar 这两个库文件放到lib目录下\n2.mavne项目：添加如下依赖到pom.xml中\n``` xml\n<dependency>\n  <groupId>com.thetransactioncompany</groupId>\n  <artifactId>cors-filter</artifactId>\n  <version>2.6</version>\n</dependency>\n```\n\n第二步:添加CORS配置到项目的Web.xml中(/WEB-INF/web.xml)\n```\n<!-- 跨域配置 -->\n<filter>\n  <!-- The CORS filter with parameters -->\n  <filter-name>CORS</filter-name>\n  <filter-class>com.thetransactioncompany.cors.CORSFilter</filter-class>\n  <!-- Note: All parameters are options, if omitted the CORS Filter will \n    fall back to the respective default values. -->\n  <init-param>\n    <param-name>cors.allowGenericHttpRequests</param-name>\n    <param-value>true</param-value>\n  </init-param>\n  <init-param>\n    <param-name>cors.allowOrigin</param-name>\n    <param-value>*</param-value>\n  </init-param>\n  <init-param>\n    <param-name>cors.allowSubdomains</param-name>\n    <param-value>false</param-value>\n  </init-param>\n  <init-param>\n    <param-name>cors.supportedMethods</param-name>\n    <param-value>GET, HEAD, POST,PUT,DELETE OPTIONS</param-value>\n  </init-param>\n  <init-param>\n    <param-name>cors.supportedHeaders</param-name>\n    <param-value>Accept, Origin, X-Requested-With, Content-Type, Last-Modified</param-value>\n  </init-param>\n  <init-param>\n    <param-name>cors.exposedHeaders</param-name>\n    <!--这里可以添加一些自己的暴露Headers -->\n    <param-value>X-Test-1, X-Test-2</param-value>\n  </init-param>\n  <init-param>\n    <param-name>cors.supportsCredentials</param-name>\n    <param-value>true</param-value>\n  </init-param>\n  <init-param>\n    <param-name>cors.maxAge</param-name>\n    <param-value>3600</param-value>\n  </init-param>\n</filter>\n<filter-mapping>\n  <!-- CORS Filter mapping -->\n  <filter-name>CORS</filter-name>\n  <url-pattern>/*</url-pattern>\n</filter-mapping>\n```\n请注意,以上配置文件请放到web.xml的前面,作为第一个filter存在(可以有多个filter的)\n\n除了上述配置，我们无需添加其他任何代码就可以尽情的使用GET,POST,PUT,DELETE等等这个方法了，是不是比jsonp强大多了\n\n现在我们再来正常请求和处理请求试一下\n``` js\n$.ajax({\n    type:'delete',\n    url:requestApi + \"test/userInfo\",\n    dataType:'json',\n    success:function(data){\n        console.log(data);\n    },\n    error:function(err,textStatus){\n        console.log(\"err\",err);\n    }\n})\n```\n\n``` java\n@Controller\n@RequestMapping(\"/test\")\npublic class Test {\n\t@ResponseBody\n\t@RequestMapping(value = \"/userInfo\",method = RequestMethod.DELETE)\n\tpublic String getUserInfo(HttpServletRequest request,HttpServletResponse response){\n\t\tUser user = new User();\n\t\tuser.setId(1);\n\t\tuser.setName(\"java\");\n\t\tuser.setPassword(\"123456\");\n\t\tuser.setLoginDate(\"2018-08-14\");\n\t\treturn JSONObject.toJSONString(user); \n\t}\n}\n```\n\n请求结果：可以看到有OPTIONS请求了\n![](http://xiongcao.github.io/blogImage/201808141716_132.png)\n![](http://xiongcao.github.io/blogImage/201808141716_238.png)\n![](http://xiongcao.github.io/blogImage/201808141607_11.png)\n","slug":"Ajax跨域的几种解决方案","published":1,"updated":"2023-07-19T03:05:40.877Z","_id":"clk82gyj700013164b3es7hd6","comments":1,"layout":"post","photos":[],"link":"","content":"<span id=\"more\"></span> \n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这个前后端分离越来越流行的时代，跨域请求对于我们来说已经非常常见了。关于跨域，有N种类型，本文只专注于ajax请求跨域。</p>\n<h2 id=\"何为跨域请求\"><a href=\"#何为跨域请求\" class=\"headerlink\" title=\"何为跨域请求\"></a>何为跨域请求</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跨域问题来源于JavaScript的同源策略，即只有 协议+主机名+端口号 (如存在)相同，则允许相互访问。也就是说JavaScript只能访问和操作自己域下的资源，不能访问和操作其他域下的资源。跨域问题是针对JS和ajax的，html本身没有跨域问题，比如a标签、script标签、甚至form标签（可以直接跨域发送数据并接收数据）等。</p>\n<h2 id=\"几种常见跨域请求\"><a href=\"#几种常见跨域请求\" class=\"headerlink\" title=\"几种常见跨域请求\"></a>几种常见跨域请求</h2><table>\n<thead>\n<tr>\n<th>请求地址</th>\n<th>服务器地址</th>\n<th align=\"center\">结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a class=\"link\"   href=\"http://www.123.com/\" >http://www.123.com<i class=\"fas fa-external-link-alt\"></i></a></td>\n<td><a class=\"link\"   href=\"http://www.abc.com/\" >http://www.abc.com<i class=\"fas fa-external-link-alt\"></i></a></td>\n<td align=\"center\">(主域名不同，跨域)</td>\n</tr>\n<tr>\n<td><a class=\"link\"   href=\"http://123.xiongchao.com/\" >http://123.xiongchao.com<i class=\"fas fa-external-link-alt\"></i></a></td>\n<td><a class=\"link\"   href=\"http://abc.xiongchao.com/\" >http://abc.xiongchao.com<i class=\"fas fa-external-link-alt\"></i></a></td>\n<td align=\"center\">(子域名不同，跨域)</td>\n</tr>\n<tr>\n<td><a class=\"link\"   href=\"http://www.xiongchao.com:8080/\" >http://www.xiongchao.com:8080<i class=\"fas fa-external-link-alt\"></i></a></td>\n<td><a class=\"link\"   href=\"http://www.xiongchao.com:8081/\" >http://www.xiongchao.com:8081<i class=\"fas fa-external-link-alt\"></i></a></td>\n<td align=\"center\">(端口不同，跨域)</td>\n</tr>\n<tr>\n<td><a class=\"link\"   href=\"http://www.xiongchao.com/\" >http://www.xiongchao.com<i class=\"fas fa-external-link-alt\"></i></a></td>\n<td><a class=\"link\"   href=\"https://www.xiongchao.com/\" >https://www.xiongchao.com<i class=\"fas fa-external-link-alt\"></i></a></td>\n<td align=\"center\">(协议不同，跨域)</td>\n</tr>\n<tr>\n<td>注意：localhost 和 localhost:8080、localhost 和 127.0.0.1 也属于跨域</td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"跨域情形\"><a href=\"#跨域情形\" class=\"headerlink\" title=\"跨域情形\"></a>跨域情形</h2><p>请求代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> requestApi = <span class=\"string\">&quot;http://localhost:8080/springmvc_hibernate_maven/&quot;</span>;</span><br><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">error</span>:<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>服务器端java代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value = &quot;/userInfo&quot;,method = RequestMethod.GET)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getUserInfo</span><span class=\"params\">(HttpServletResponse httpServletResponse)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">\t\tuser.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tuser.setName(<span class=\"string\">&quot;java&quot;</span>);</span><br><span class=\"line\">\t\tuser.setPassword(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">\t\tuser.setLoginDate(<span class=\"string\">&quot;2018-08-14&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(JSON.toJSONString(user));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> JSON.toJSONString(user);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>浏览器中访问（将html部署到nginx）结果:<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141515_419.png\"\n                     \n                ><br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141516_535.png\"\n                     \n                ></p>\n<p>虽然请求成功并且返回了状态码200，但是并没有返回内容，并且控制台还打印了报错信息</p>\n<h2 id=\"常见几种解决方案\"><a href=\"#常见几种解决方案\" class=\"headerlink\" title=\"常见几种解决方案\"></a>常见几种解决方案</h2><h3 id=\"jsonp方式处理（基本被淘汰了）\"><a href=\"#jsonp方式处理（基本被淘汰了）\" class=\"headerlink\" title=\"jsonp方式处理（基本被淘汰了）\"></a>jsonp方式处理（基本被淘汰了）</h3><p>先看看json和jsonp数据格式的区别：</p>\n<h4 id=\"json格式\"><a href=\"#json格式\" class=\"headerlink\" title=\"json格式\"></a>json格式</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;java&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;password&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;123456&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;loginDate&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;2018-08-14&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"jsonp格式\"><a href=\"#jsonp格式\" class=\"headerlink\" title=\"jsonp格式\"></a>jsonp格式</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">callback(&#123;</span><br><span class=\"line\">  &quot;id&quot;:&quot;1&quot;,</span><br><span class=\"line\">  &quot;name&quot;:&quot;java&quot;,</span><br><span class=\"line\">  &quot;password&quot;:&quot;123456&quot;,</span><br><span class=\"line\">  &quot;loginDate&quot;:&quot;2018-08-14&quot;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>jsonp比json外面有多了一层，callback()。</p>\n<p>我们在请求的url后面拼接一个callback参数，用于返回jsonp格式数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo?callback=&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;jsonp&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">error</span>:<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>服务器端处理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value = &quot;/userInfo&quot;,method = RequestMethod.GET)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getUserInfo</span><span class=\"params\">(HttpServletRequest request)</span>&#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">callback</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;callback&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">\t\tuser.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tuser.setName(<span class=\"string\">&quot;java&quot;</span>);</span><br><span class=\"line\">\t\tuser.setPassword(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">\t\tuser.setLoginDate(<span class=\"string\">&quot;2018-08-14&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(JSON.toJSONString(user));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> callback+<span class=\"string\">&quot;(&quot;</span> + JSONObject.toJSONString(user) + <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们看一下后台获取的callback的值<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141602_241.png\"\n                     \n                ></p>\n<p>修改请求代码再看一下后台获取的callback的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;jsonp&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">jsonpCallback</span>:<span class=\"string\">&#x27;testCallback&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">error</span>:<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>正是我们自定义的callback的值<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141605_213.png\"\n                     \n                ></p>\n<p>最后查看请求结果，控制台成功打印获取获取的数据<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141607_11.png\"\n                     \n                ></p>\n<h4 id=\"需要注意的是jsonp是不支持post方式跨域请求，就算指定成POST方式，会自动转为GET方式；而后端如果设置成POST方式了，那就请求不了了。\"><a href=\"#需要注意的是jsonp是不支持post方式跨域请求，就算指定成POST方式，会自动转为GET方式；而后端如果设置成POST方式了，那就请求不了了。\" class=\"headerlink\" title=\"需要注意的是jsonp是不支持post方式跨域请求，就算指定成POST方式，会自动转为GET方式；而后端如果设置成POST方式了，那就请求不了了。\"></a><font color=\"red\">需要注意的是jsonp是不支持post方式跨域请求，就算指定成POST方式，会自动转为GET方式；而后端如果设置成POST方式了，那就请求不了了。</font></h4><h4 id=\"另外可以使用jquer-jsonp插件实现跨域请求，服务器端无需做任何处理。\"><a href=\"#另外可以使用jquer-jsonp插件实现跨域请求，服务器端无需做任何处理。\" class=\"headerlink\" title=\"另外可以使用jquer-jsonp插件实现跨域请求，服务器端无需做任何处理。\"></a><font color=\"red\">另外可以使用jquer-jsonp插件实现跨域请求，服务器端无需做任何处理。</font></h4><h3 id=\"java服务器端添加允许跨域请求的响应头\"><a href=\"#java服务器端添加允许跨域请求的响应头\" class=\"headerlink\" title=\"java服务器端添加允许跨域请求的响应头\"></a>java服务器端添加允许跨域请求的响应头</h3><p>ajax请求不用改，只需要添加响应头部Access-Control-Allow-Origin允许所有请求来源就可以了（所有服务器端处理都类似，对java不是很熟练，所以简单略过）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value = &quot;/userInfo&quot;,method = RequestMethod.GET)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getUserInfo</span><span class=\"params\">(HttpServletResponse httpServletResponse)</span>&#123;</span><br><span class=\"line\">                httpServletResponse.addHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">\t\tuser.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tuser.setName(<span class=\"string\">&quot;java&quot;</span>);</span><br><span class=\"line\">\t\tuser.setPassword(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">\t\tuser.setLoginDate(<span class=\"string\">&quot;2018-08-14&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(JSON.toJSONString(user));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> JSON.toJSONString(user);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141525_79.png\"\n                     \n                ><br>成功请求！</p>\n<h3 id=\"比jsonp更强大的CORS方式解决跨域\"><a href=\"#比jsonp更强大的CORS方式解决跨域\" class=\"headerlink\" title=\"比jsonp更强大的CORS方式解决跨域\"></a>比jsonp更强大的CORS方式解决跨域</h3><p>基于JSONP的实现原理,所以JSONP只能是“GET”请求,不能进行较为复杂的POST和其它请求,所以遇到那种情况,就得参考下面的CORS解决跨域了。</p>\n<p>这里介绍的是java后端应该如何配置以解决问题</p>\n<p>第一步：<br>1.非maven项目：获取依赖jar包下载 cors-filter-1.7.jar, java-property-utils-1.9.jar 这两个库文件放到lib目录下<br>2.mavne项目：添加如下依赖到pom.xml中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.thetransactioncompany<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cors-filter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>第二步:添加CORS配置到项目的Web.xml中(&#x2F;WEB-INF&#x2F;web.xml)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 跨域配置 --&gt;</span><br><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">  &lt;!-- The CORS filter with parameters --&gt;</span><br><span class=\"line\">  &lt;filter-name&gt;CORS&lt;/filter-name&gt;</span><br><span class=\"line\">  &lt;filter-class&gt;com.thetransactioncompany.cors.CORSFilter&lt;/filter-class&gt;</span><br><span class=\"line\">  &lt;!-- Note: All parameters are options, if omitted the CORS Filter will </span><br><span class=\"line\">    fall back to the respective default values. --&gt;</span><br><span class=\"line\">  &lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;cors.allowGenericHttpRequests&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class=\"line\">  &lt;/init-param&gt;</span><br><span class=\"line\">  &lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;cors.allowOrigin&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;*&lt;/param-value&gt;</span><br><span class=\"line\">  &lt;/init-param&gt;</span><br><span class=\"line\">  &lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;cors.allowSubdomains&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class=\"line\">  &lt;/init-param&gt;</span><br><span class=\"line\">  &lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;cors.supportedMethods&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;GET, HEAD, POST,PUT,DELETE OPTIONS&lt;/param-value&gt;</span><br><span class=\"line\">  &lt;/init-param&gt;</span><br><span class=\"line\">  &lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;cors.supportedHeaders&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;Accept, Origin, X-Requested-With, Content-Type, Last-Modified&lt;/param-value&gt;</span><br><span class=\"line\">  &lt;/init-param&gt;</span><br><span class=\"line\">  &lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;cors.exposedHeaders&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;!--这里可以添加一些自己的暴露Headers --&gt;</span><br><span class=\"line\">    &lt;param-value&gt;X-Test-1, X-Test-2&lt;/param-value&gt;</span><br><span class=\"line\">  &lt;/init-param&gt;</span><br><span class=\"line\">  &lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;cors.supportsCredentials&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class=\"line\">  &lt;/init-param&gt;</span><br><span class=\"line\">  &lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;cors.maxAge&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;3600&lt;/param-value&gt;</span><br><span class=\"line\">  &lt;/init-param&gt;</span><br><span class=\"line\">&lt;/filter&gt;</span><br><span class=\"line\">&lt;filter-mapping&gt;</span><br><span class=\"line\">  &lt;!-- CORS Filter mapping --&gt;</span><br><span class=\"line\">  &lt;filter-name&gt;CORS&lt;/filter-name&gt;</span><br><span class=\"line\">  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>\n<p>请注意,以上配置文件请放到web.xml的前面,作为第一个filter存在(可以有多个filter的)</p>\n<p>除了上述配置，我们无需添加其他任何代码就可以尽情的使用GET,POST,PUT,DELETE等等这个方法了，是不是比jsonp强大多了</p>\n<p>现在我们再来正常请求和处理请求试一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&#x27;delete&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">error</span>:<span class=\"keyword\">function</span>(<span class=\"params\">err,textStatus</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err&quot;</span>,err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value = &quot;/userInfo&quot;,method = RequestMethod.DELETE)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getUserInfo</span><span class=\"params\">(HttpServletRequest request,HttpServletResponse response)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">\t\tuser.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tuser.setName(<span class=\"string\">&quot;java&quot;</span>);</span><br><span class=\"line\">\t\tuser.setPassword(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">\t\tuser.setLoginDate(<span class=\"string\">&quot;2018-08-14&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> JSONObject.toJSONString(user); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请求结果：可以看到有OPTIONS请求了<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141716_132.png\"\n                     \n                ><br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141716_238.png\"\n                     \n                ><br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141607_11.png\"\n                     \n                ></p>\n","site":{"data":{}},"excerpt":"","more":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这个前后端分离越来越流行的时代，跨域请求对于我们来说已经非常常见了。关于跨域，有N种类型，本文只专注于ajax请求跨域。</p>\n<h2 id=\"何为跨域请求\"><a href=\"#何为跨域请求\" class=\"headerlink\" title=\"何为跨域请求\"></a>何为跨域请求</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;跨域问题来源于JavaScript的同源策略，即只有 协议+主机名+端口号 (如存在)相同，则允许相互访问。也就是说JavaScript只能访问和操作自己域下的资源，不能访问和操作其他域下的资源。跨域问题是针对JS和ajax的，html本身没有跨域问题，比如a标签、script标签、甚至form标签（可以直接跨域发送数据并接收数据）等。</p>\n<h2 id=\"几种常见跨域请求\"><a href=\"#几种常见跨域请求\" class=\"headerlink\" title=\"几种常见跨域请求\"></a>几种常见跨域请求</h2><table>\n<thead>\n<tr>\n<th>请求地址</th>\n<th>服务器地址</th>\n<th align=\"center\">结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a class=\"link\"   href=\"http://www.123.com/\" >http://www.123.com<i class=\"fas fa-external-link-alt\"></i></a></td>\n<td><a class=\"link\"   href=\"http://www.abc.com/\" >http://www.abc.com<i class=\"fas fa-external-link-alt\"></i></a></td>\n<td align=\"center\">(主域名不同，跨域)</td>\n</tr>\n<tr>\n<td><a class=\"link\"   href=\"http://123.xiongchao.com/\" >http://123.xiongchao.com<i class=\"fas fa-external-link-alt\"></i></a></td>\n<td><a class=\"link\"   href=\"http://abc.xiongchao.com/\" >http://abc.xiongchao.com<i class=\"fas fa-external-link-alt\"></i></a></td>\n<td align=\"center\">(子域名不同，跨域)</td>\n</tr>\n<tr>\n<td><a class=\"link\"   href=\"http://www.xiongchao.com:8080/\" >http://www.xiongchao.com:8080<i class=\"fas fa-external-link-alt\"></i></a></td>\n<td><a class=\"link\"   href=\"http://www.xiongchao.com:8081/\" >http://www.xiongchao.com:8081<i class=\"fas fa-external-link-alt\"></i></a></td>\n<td align=\"center\">(端口不同，跨域)</td>\n</tr>\n<tr>\n<td><a class=\"link\"   href=\"http://www.xiongchao.com/\" >http://www.xiongchao.com<i class=\"fas fa-external-link-alt\"></i></a></td>\n<td><a class=\"link\"   href=\"https://www.xiongchao.com/\" >https://www.xiongchao.com<i class=\"fas fa-external-link-alt\"></i></a></td>\n<td align=\"center\">(协议不同，跨域)</td>\n</tr>\n<tr>\n<td>注意：localhost 和 localhost:8080、localhost 和 127.0.0.1 也属于跨域</td>\n<td></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"跨域情形\"><a href=\"#跨域情形\" class=\"headerlink\" title=\"跨域情形\"></a>跨域情形</h2><p>请求代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> requestApi = <span class=\"string\">&quot;http://localhost:8080/springmvc_hibernate_maven/&quot;</span>;</span><br><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">error</span>:<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>服务器端java代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value = &quot;/userInfo&quot;,method = RequestMethod.GET)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getUserInfo</span><span class=\"params\">(HttpServletResponse httpServletResponse)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">\t\tuser.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tuser.setName(<span class=\"string\">&quot;java&quot;</span>);</span><br><span class=\"line\">\t\tuser.setPassword(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">\t\tuser.setLoginDate(<span class=\"string\">&quot;2018-08-14&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(JSON.toJSONString(user));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> JSON.toJSONString(user);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>浏览器中访问（将html部署到nginx）结果:<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141515_419.png\"\n                     \n                ><br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141516_535.png\"\n                     \n                ></p>\n<p>虽然请求成功并且返回了状态码200，但是并没有返回内容，并且控制台还打印了报错信息</p>\n<h2 id=\"常见几种解决方案\"><a href=\"#常见几种解决方案\" class=\"headerlink\" title=\"常见几种解决方案\"></a>常见几种解决方案</h2><h3 id=\"jsonp方式处理（基本被淘汰了）\"><a href=\"#jsonp方式处理（基本被淘汰了）\" class=\"headerlink\" title=\"jsonp方式处理（基本被淘汰了）\"></a>jsonp方式处理（基本被淘汰了）</h3><p>先看看json和jsonp数据格式的区别：</p>\n<h4 id=\"json格式\"><a href=\"#json格式\" class=\"headerlink\" title=\"json格式\"></a>json格式</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;java&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;password&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;123456&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;loginDate&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;2018-08-14&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"jsonp格式\"><a href=\"#jsonp格式\" class=\"headerlink\" title=\"jsonp格式\"></a>jsonp格式</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">callback(&#123;</span><br><span class=\"line\">  &quot;id&quot;:&quot;1&quot;,</span><br><span class=\"line\">  &quot;name&quot;:&quot;java&quot;,</span><br><span class=\"line\">  &quot;password&quot;:&quot;123456&quot;,</span><br><span class=\"line\">  &quot;loginDate&quot;:&quot;2018-08-14&quot;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>jsonp比json外面有多了一层，callback()。</p>\n<p>我们在请求的url后面拼接一个callback参数，用于返回jsonp格式数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo?callback=&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;jsonp&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">error</span>:<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>服务器端处理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value = &quot;/userInfo&quot;,method = RequestMethod.GET)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getUserInfo</span><span class=\"params\">(HttpServletRequest request)</span>&#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">callback</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;callback&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">\t\tuser.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tuser.setName(<span class=\"string\">&quot;java&quot;</span>);</span><br><span class=\"line\">\t\tuser.setPassword(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">\t\tuser.setLoginDate(<span class=\"string\">&quot;2018-08-14&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(JSON.toJSONString(user));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> callback+<span class=\"string\">&quot;(&quot;</span> + JSONObject.toJSONString(user) + <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们看一下后台获取的callback的值<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141602_241.png\"\n                     \n                ></p>\n<p>修改请求代码再看一下后台获取的callback的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;jsonp&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">jsonpCallback</span>:<span class=\"string\">&#x27;testCallback&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">error</span>:<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>正是我们自定义的callback的值<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141605_213.png\"\n                     \n                ></p>\n<p>最后查看请求结果，控制台成功打印获取获取的数据<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141607_11.png\"\n                     \n                ></p>\n<h4 id=\"需要注意的是jsonp是不支持post方式跨域请求，就算指定成POST方式，会自动转为GET方式；而后端如果设置成POST方式了，那就请求不了了。\"><a href=\"#需要注意的是jsonp是不支持post方式跨域请求，就算指定成POST方式，会自动转为GET方式；而后端如果设置成POST方式了，那就请求不了了。\" class=\"headerlink\" title=\"需要注意的是jsonp是不支持post方式跨域请求，就算指定成POST方式，会自动转为GET方式；而后端如果设置成POST方式了，那就请求不了了。\"></a><font color=\"red\">需要注意的是jsonp是不支持post方式跨域请求，就算指定成POST方式，会自动转为GET方式；而后端如果设置成POST方式了，那就请求不了了。</font></h4><h4 id=\"另外可以使用jquer-jsonp插件实现跨域请求，服务器端无需做任何处理。\"><a href=\"#另外可以使用jquer-jsonp插件实现跨域请求，服务器端无需做任何处理。\" class=\"headerlink\" title=\"另外可以使用jquer-jsonp插件实现跨域请求，服务器端无需做任何处理。\"></a><font color=\"red\">另外可以使用jquer-jsonp插件实现跨域请求，服务器端无需做任何处理。</font></h4><h3 id=\"java服务器端添加允许跨域请求的响应头\"><a href=\"#java服务器端添加允许跨域请求的响应头\" class=\"headerlink\" title=\"java服务器端添加允许跨域请求的响应头\"></a>java服务器端添加允许跨域请求的响应头</h3><p>ajax请求不用改，只需要添加响应头部Access-Control-Allow-Origin允许所有请求来源就可以了（所有服务器端处理都类似，对java不是很熟练，所以简单略过）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value = &quot;/userInfo&quot;,method = RequestMethod.GET)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getUserInfo</span><span class=\"params\">(HttpServletResponse httpServletResponse)</span>&#123;</span><br><span class=\"line\">                httpServletResponse.addHeader(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">\t\tuser.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tuser.setName(<span class=\"string\">&quot;java&quot;</span>);</span><br><span class=\"line\">\t\tuser.setPassword(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">\t\tuser.setLoginDate(<span class=\"string\">&quot;2018-08-14&quot;</span>);</span><br><span class=\"line\">\t\tSystem.out.println(JSON.toJSONString(user));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> JSON.toJSONString(user);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141525_79.png\"\n                     \n                ><br>成功请求！</p>\n<h3 id=\"比jsonp更强大的CORS方式解决跨域\"><a href=\"#比jsonp更强大的CORS方式解决跨域\" class=\"headerlink\" title=\"比jsonp更强大的CORS方式解决跨域\"></a>比jsonp更强大的CORS方式解决跨域</h3><p>基于JSONP的实现原理,所以JSONP只能是“GET”请求,不能进行较为复杂的POST和其它请求,所以遇到那种情况,就得参考下面的CORS解决跨域了。</p>\n<p>这里介绍的是java后端应该如何配置以解决问题</p>\n<p>第一步：<br>1.非maven项目：获取依赖jar包下载 cors-filter-1.7.jar, java-property-utils-1.9.jar 这两个库文件放到lib目录下<br>2.mavne项目：添加如下依赖到pom.xml中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.thetransactioncompany<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cors-filter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>第二步:添加CORS配置到项目的Web.xml中(&#x2F;WEB-INF&#x2F;web.xml)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 跨域配置 --&gt;</span><br><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">  &lt;!-- The CORS filter with parameters --&gt;</span><br><span class=\"line\">  &lt;filter-name&gt;CORS&lt;/filter-name&gt;</span><br><span class=\"line\">  &lt;filter-class&gt;com.thetransactioncompany.cors.CORSFilter&lt;/filter-class&gt;</span><br><span class=\"line\">  &lt;!-- Note: All parameters are options, if omitted the CORS Filter will </span><br><span class=\"line\">    fall back to the respective default values. --&gt;</span><br><span class=\"line\">  &lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;cors.allowGenericHttpRequests&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class=\"line\">  &lt;/init-param&gt;</span><br><span class=\"line\">  &lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;cors.allowOrigin&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;*&lt;/param-value&gt;</span><br><span class=\"line\">  &lt;/init-param&gt;</span><br><span class=\"line\">  &lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;cors.allowSubdomains&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;false&lt;/param-value&gt;</span><br><span class=\"line\">  &lt;/init-param&gt;</span><br><span class=\"line\">  &lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;cors.supportedMethods&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;GET, HEAD, POST,PUT,DELETE OPTIONS&lt;/param-value&gt;</span><br><span class=\"line\">  &lt;/init-param&gt;</span><br><span class=\"line\">  &lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;cors.supportedHeaders&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;Accept, Origin, X-Requested-With, Content-Type, Last-Modified&lt;/param-value&gt;</span><br><span class=\"line\">  &lt;/init-param&gt;</span><br><span class=\"line\">  &lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;cors.exposedHeaders&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;!--这里可以添加一些自己的暴露Headers --&gt;</span><br><span class=\"line\">    &lt;param-value&gt;X-Test-1, X-Test-2&lt;/param-value&gt;</span><br><span class=\"line\">  &lt;/init-param&gt;</span><br><span class=\"line\">  &lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;cors.supportsCredentials&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class=\"line\">  &lt;/init-param&gt;</span><br><span class=\"line\">  &lt;init-param&gt;</span><br><span class=\"line\">    &lt;param-name&gt;cors.maxAge&lt;/param-name&gt;</span><br><span class=\"line\">    &lt;param-value&gt;3600&lt;/param-value&gt;</span><br><span class=\"line\">  &lt;/init-param&gt;</span><br><span class=\"line\">&lt;/filter&gt;</span><br><span class=\"line\">&lt;filter-mapping&gt;</span><br><span class=\"line\">  &lt;!-- CORS Filter mapping --&gt;</span><br><span class=\"line\">  &lt;filter-name&gt;CORS&lt;/filter-name&gt;</span><br><span class=\"line\">  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class=\"line\">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure>\n<p>请注意,以上配置文件请放到web.xml的前面,作为第一个filter存在(可以有多个filter的)</p>\n<p>除了上述配置，我们无需添加其他任何代码就可以尽情的使用GET,POST,PUT,DELETE等等这个方法了，是不是比jsonp强大多了</p>\n<p>现在我们再来正常请求和处理请求试一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&#x27;delete&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">error</span>:<span class=\"keyword\">function</span>(<span class=\"params\">err,textStatus</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;err&quot;</span>,err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping(value = &quot;/userInfo&quot;,method = RequestMethod.DELETE)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">getUserInfo</span><span class=\"params\">(HttpServletRequest request,HttpServletResponse response)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">\t\tuser.setId(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tuser.setName(<span class=\"string\">&quot;java&quot;</span>);</span><br><span class=\"line\">\t\tuser.setPassword(<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\">\t\tuser.setLoginDate(<span class=\"string\">&quot;2018-08-14&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> JSONObject.toJSONString(user); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请求结果：可以看到有OPTIONS请求了<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141716_132.png\"\n                     \n                ><br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141716_238.png\"\n                     \n                ><br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808141607_11.png\"\n                     \n                ></p>"},{"title":"JavaScript封装XMLHttpRequest请求","author":"熊 超","date":"2018-08-16T05:48:00.000Z","_content":"<!-- more -->\n\n### 什么是 XMLHttpRequest 对象\nXMLHttpRequest 对象用于在后台与服务器交换数据。\nXMLHttpRequest 对象是开发者的梦想，因为您能够：\n* 在不重新加载页面的情况下更新网页\n* 在页面已加载后从服务器请求数据\n* 在页面已加载后从服务器接收数据\n* 在后台向服务器发送数据\n\n所有现代的浏览器都支持 XMLHttpRequest 对象，XMLHttpRequest在 Ajax 编程中被大量使用。\n\n### 原生javascript（ES5）封装XMLHttpRequest对象\n\n\n1.创建ajax.js\n\n``` js\nfunction Ajax(){}\n\nAjax.prototype.ajax = function(obj){\n    //创建xmlhttprequest对象\n    var xhr;\n    try{\n        xhr = new XMLHttpRequest();\n    }catch(e){\n        xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n\n    xhr.timeout = 5000;\n    xhr.ontimeout = function (event) {\n        console.log(\"请求超时\");\n    }\n\n    xhr.responseType = obj.dataType;\n\n    xhr.open(obj.type,obj.url,obj.async||true);\n    \n    if(obj.headers&&obj.headers[\"Content-Type\"]){\n        xhr.setRequestHeader(\"Content-Type\",obj.headers[\"Content-Type\"]);\n    }else{\n        xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n    }\n\n    xhr.onreadystatechange = function() {\n        //xhr.readyState 4:完成，XMLHttpRequest对象读取服务器响应结束\n        if(xhr.readyState == 4){ \n            //xhr.status HTTP状态码 2XX表示有效响应 304意味着是从缓存读取\n            if(xhr.status >= 200 && (xhr.status < 300 || xhr.status == 304)){  \n                obj.success(xhr.response)\n            }else{\n                obj.error(xhr.status)\n            }\n        }\n    }\n    if(obj.data){\n        var params = [];\n        for (const key in obj.data) {\n            if (obj.data.hasOwnProperty(key)) {\n                params.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(obj.data[key]))            \n            }\n        }\n        var postData = params.join('&');\n        xhr.send(postData);\n    }else{\n        xhr.send();\n    }\n}\n```\n\n2.引用ajax.js\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <script src=\"./ajax.js\"></script>\n</head>\n<body>\n</body>\n</html>\n<script>\n  var $$ = new Ajax();\n  var requestApi = \"http://localhost:8080/springmvc_hibernate_maven/\";\n  window.onload = function(){\n    $$.ajax({\n        type:'get',\n        url:requestApi + \"test/userInfo\",\n        dataType:'json',\n        success:function(data){\n            console.log(data,\"get\");\n        },\n        error:function(err){\n            console.log(err);\n        }\n    })\n\n    $$.ajax({\n        type:'post',\n        url:requestApi + \"test/userInfo\",\n        data:{\n            name:\"xiongchao\",\n            password:'xiongchao',\n            status:1\n        },\n        dataType:'json',\n        success:function(data){\n            console.log(data,\"post\");\n        },\n        error:function(err){\n            console.log(err);\n        }\n    })\n\n    $$.ajax({\n        type:'put',\n        url:requestApi + \"test/userInfo/4/1\",\n        dataType:'json',\n        success:function(data){\n            console.log(data,'put');\n        },\n        error:function(err){\n            console.log(err);\n        }\n    })\n\n    $$.ajax({\n        type:'delete',\n        url:requestApi + \"test/userInfo/4\",\n        dataType:'json',\n        success:function(data){\n            console.log(data,'delete');\n        },\n        error:function(err){\n            console.log(err);\n        }\n    })\n}\n\n</script>\n```\n\n3.顺带看下后端写法（哈哈,虽然不需要前端开发人员操心）\n![](http://xiongcao.github.io/blogImage/201808161403_227.png)\n\n4.最后看下四种请求的结果 \n![](http://xiongcao.github.io/blogImage/201808161408_351.png)\n\n### ES6 封装XMLHttpRequest对象\n\n同样ajax.js 文件\n``` js\nconst ajax = function(obj){\n  return new Promise((resolve,reject)=>{\n      //创建xmlhttprequest对象\n      var xhr;\n      try{\n          xhr = new XMLHttpRequest();\n      }catch(e){\n          xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n      }\n\n      xhr.timeout = 5000;\n      xhr.ontimeout = function (event) {\n          console.log(\"请求超时\");\n      }\n\n      xhr.responseType = obj.dataType;\n\n      xhr.open(obj.type,obj.url,obj.async||true);\n      \n      if(obj.headers&&obj.headers[\"Content-Type\"]){\n          xhr.setRequestHeader(\"Content-Type\",obj.headers[\"Content-Type\"]);\n      }else{\n          xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n      }\n\n      xhr.onreadystatechange = function() {\n          //xhr.readyState 4:完成，XMLHttpRequest对象读取服务器响应结束\n          if(xhr.readyState == 4){ \n              //xhr.status HTTP状态码 2XX表示有效响应 304意味着是从缓存读取\n              if(xhr.status >= 200 && (xhr.status < 300 || xhr.status == 304)){  \n                  resolve(xhr.response);\n              }else{\n                  reject(xhr.response);\n              }\n          }\n      }\n      if(obj.data){\n          var params = [];\n          for (const key in obj.data) {\n              if (obj.data.hasOwnProperty(key)) {\n                  params.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(obj.data[key]))            \n              }\n          }\n          var postData = params.join('&');\n          xhr.send(postData);\n      }else{\n          xhr.send();\n      }\n  })\n}\nexport default ajax;\n```\n\n引用ajax.js\n``` js\n<script type=\"module\">\n  import ajax from './ajax.js'\n  var requestApi = \"http://localhost:8080/springmvc_hibernate_maven/\";\n  window.onload = function(){\n      ajax({\n          type:'get',\n          url:requestApi + \"test/userInfo\",\n          dataType:'json'\n      }).then((data)=>{\n          console.log(data,\"get\");\n      }).catch((err)=>{\n          console.log(err);\n      })\n\n      ajax({\n          type:'post',\n          data:{\n              name:\"xiongchao\",\n              password:'xiongchao',\n              status:1\n          },\n          url:requestApi + \"test/userInfo\",\n          dataType:'json'\n      }).then((data)=>{\n          console.log(data,\"post\");\n      }).catch((err)=>{\n          console.log(err);\n      })\n\n      ajax({\n          type:'put',\n          url:requestApi + \"test/userInfo/4/1\",\n          dataType:'json'\n      }).then((data)=>{\n          console.log(data,\"put\");\n      }).catch((err)=>{\n          console.log(err);\n      })\n\n      ajax({\n          type:'delete',\n          url:requestApi + \"test/userInfo/4\",\n          dataType:'json'\n      }).then((data)=>{\n          console.log(data,\"delete\");\n      }).catch((err)=>{\n          console.log(err);\n      })\n  }\n</script>\n```\n","source":"_posts/JavaScript封装XMLHttpRequest请求.md","raw":"title: JavaScript封装XMLHttpRequest请求\nauthor: 熊 超\ntags:\n  - ajax\ncategories:\n  - Ajax\ndate: 2018-08-16 13:48:00\n---\n<!-- more -->\n\n### 什么是 XMLHttpRequest 对象\nXMLHttpRequest 对象用于在后台与服务器交换数据。\nXMLHttpRequest 对象是开发者的梦想，因为您能够：\n* 在不重新加载页面的情况下更新网页\n* 在页面已加载后从服务器请求数据\n* 在页面已加载后从服务器接收数据\n* 在后台向服务器发送数据\n\n所有现代的浏览器都支持 XMLHttpRequest 对象，XMLHttpRequest在 Ajax 编程中被大量使用。\n\n### 原生javascript（ES5）封装XMLHttpRequest对象\n\n\n1.创建ajax.js\n\n``` js\nfunction Ajax(){}\n\nAjax.prototype.ajax = function(obj){\n    //创建xmlhttprequest对象\n    var xhr;\n    try{\n        xhr = new XMLHttpRequest();\n    }catch(e){\n        xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n\n    xhr.timeout = 5000;\n    xhr.ontimeout = function (event) {\n        console.log(\"请求超时\");\n    }\n\n    xhr.responseType = obj.dataType;\n\n    xhr.open(obj.type,obj.url,obj.async||true);\n    \n    if(obj.headers&&obj.headers[\"Content-Type\"]){\n        xhr.setRequestHeader(\"Content-Type\",obj.headers[\"Content-Type\"]);\n    }else{\n        xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n    }\n\n    xhr.onreadystatechange = function() {\n        //xhr.readyState 4:完成，XMLHttpRequest对象读取服务器响应结束\n        if(xhr.readyState == 4){ \n            //xhr.status HTTP状态码 2XX表示有效响应 304意味着是从缓存读取\n            if(xhr.status >= 200 && (xhr.status < 300 || xhr.status == 304)){  \n                obj.success(xhr.response)\n            }else{\n                obj.error(xhr.status)\n            }\n        }\n    }\n    if(obj.data){\n        var params = [];\n        for (const key in obj.data) {\n            if (obj.data.hasOwnProperty(key)) {\n                params.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(obj.data[key]))            \n            }\n        }\n        var postData = params.join('&');\n        xhr.send(postData);\n    }else{\n        xhr.send();\n    }\n}\n```\n\n2.引用ajax.js\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <script src=\"./ajax.js\"></script>\n</head>\n<body>\n</body>\n</html>\n<script>\n  var $$ = new Ajax();\n  var requestApi = \"http://localhost:8080/springmvc_hibernate_maven/\";\n  window.onload = function(){\n    $$.ajax({\n        type:'get',\n        url:requestApi + \"test/userInfo\",\n        dataType:'json',\n        success:function(data){\n            console.log(data,\"get\");\n        },\n        error:function(err){\n            console.log(err);\n        }\n    })\n\n    $$.ajax({\n        type:'post',\n        url:requestApi + \"test/userInfo\",\n        data:{\n            name:\"xiongchao\",\n            password:'xiongchao',\n            status:1\n        },\n        dataType:'json',\n        success:function(data){\n            console.log(data,\"post\");\n        },\n        error:function(err){\n            console.log(err);\n        }\n    })\n\n    $$.ajax({\n        type:'put',\n        url:requestApi + \"test/userInfo/4/1\",\n        dataType:'json',\n        success:function(data){\n            console.log(data,'put');\n        },\n        error:function(err){\n            console.log(err);\n        }\n    })\n\n    $$.ajax({\n        type:'delete',\n        url:requestApi + \"test/userInfo/4\",\n        dataType:'json',\n        success:function(data){\n            console.log(data,'delete');\n        },\n        error:function(err){\n            console.log(err);\n        }\n    })\n}\n\n</script>\n```\n\n3.顺带看下后端写法（哈哈,虽然不需要前端开发人员操心）\n![](http://xiongcao.github.io/blogImage/201808161403_227.png)\n\n4.最后看下四种请求的结果 \n![](http://xiongcao.github.io/blogImage/201808161408_351.png)\n\n### ES6 封装XMLHttpRequest对象\n\n同样ajax.js 文件\n``` js\nconst ajax = function(obj){\n  return new Promise((resolve,reject)=>{\n      //创建xmlhttprequest对象\n      var xhr;\n      try{\n          xhr = new XMLHttpRequest();\n      }catch(e){\n          xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n      }\n\n      xhr.timeout = 5000;\n      xhr.ontimeout = function (event) {\n          console.log(\"请求超时\");\n      }\n\n      xhr.responseType = obj.dataType;\n\n      xhr.open(obj.type,obj.url,obj.async||true);\n      \n      if(obj.headers&&obj.headers[\"Content-Type\"]){\n          xhr.setRequestHeader(\"Content-Type\",obj.headers[\"Content-Type\"]);\n      }else{\n          xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\");\n      }\n\n      xhr.onreadystatechange = function() {\n          //xhr.readyState 4:完成，XMLHttpRequest对象读取服务器响应结束\n          if(xhr.readyState == 4){ \n              //xhr.status HTTP状态码 2XX表示有效响应 304意味着是从缓存读取\n              if(xhr.status >= 200 && (xhr.status < 300 || xhr.status == 304)){  \n                  resolve(xhr.response);\n              }else{\n                  reject(xhr.response);\n              }\n          }\n      }\n      if(obj.data){\n          var params = [];\n          for (const key in obj.data) {\n              if (obj.data.hasOwnProperty(key)) {\n                  params.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(obj.data[key]))            \n              }\n          }\n          var postData = params.join('&');\n          xhr.send(postData);\n      }else{\n          xhr.send();\n      }\n  })\n}\nexport default ajax;\n```\n\n引用ajax.js\n``` js\n<script type=\"module\">\n  import ajax from './ajax.js'\n  var requestApi = \"http://localhost:8080/springmvc_hibernate_maven/\";\n  window.onload = function(){\n      ajax({\n          type:'get',\n          url:requestApi + \"test/userInfo\",\n          dataType:'json'\n      }).then((data)=>{\n          console.log(data,\"get\");\n      }).catch((err)=>{\n          console.log(err);\n      })\n\n      ajax({\n          type:'post',\n          data:{\n              name:\"xiongchao\",\n              password:'xiongchao',\n              status:1\n          },\n          url:requestApi + \"test/userInfo\",\n          dataType:'json'\n      }).then((data)=>{\n          console.log(data,\"post\");\n      }).catch((err)=>{\n          console.log(err);\n      })\n\n      ajax({\n          type:'put',\n          url:requestApi + \"test/userInfo/4/1\",\n          dataType:'json'\n      }).then((data)=>{\n          console.log(data,\"put\");\n      }).catch((err)=>{\n          console.log(err);\n      })\n\n      ajax({\n          type:'delete',\n          url:requestApi + \"test/userInfo/4\",\n          dataType:'json'\n      }).then((data)=>{\n          console.log(data,\"delete\");\n      }).catch((err)=>{\n          console.log(err);\n      })\n  }\n</script>\n```\n","slug":"JavaScript封装XMLHttpRequest请求","published":1,"updated":"2023-07-19T03:04:54.645Z","_id":"clk82gyja00033164g678cgl1","comments":1,"layout":"post","photos":[],"link":"","content":"<span id=\"more\"></span>\n\n<h3 id=\"什么是-XMLHttpRequest-对象\"><a href=\"#什么是-XMLHttpRequest-对象\" class=\"headerlink\" title=\"什么是 XMLHttpRequest 对象\"></a>什么是 XMLHttpRequest 对象</h3><p>XMLHttpRequest 对象用于在后台与服务器交换数据。<br>XMLHttpRequest 对象是开发者的梦想，因为您能够：</p>\n<ul>\n<li>在不重新加载页面的情况下更新网页</li>\n<li>在页面已加载后从服务器请求数据</li>\n<li>在页面已加载后从服务器接收数据</li>\n<li>在后台向服务器发送数据</li>\n</ul>\n<p>所有现代的浏览器都支持 XMLHttpRequest 对象，XMLHttpRequest在 Ajax 编程中被大量使用。</p>\n<h3 id=\"原生javascript（ES5）封装XMLHttpRequest对象\"><a href=\"#原生javascript（ES5）封装XMLHttpRequest对象\" class=\"headerlink\" title=\"原生javascript（ES5）封装XMLHttpRequest对象\"></a>原生javascript（ES5）封装XMLHttpRequest对象</h3><p>1.创建ajax.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Ajax</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Ajax</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">ajax</span> = <span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建xmlhttprequest对象</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">        xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">ActiveXObject</span>(<span class=\"string\">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.<span class=\"property\">timeout</span> = <span class=\"number\">5000</span>;</span><br><span class=\"line\">    xhr.<span class=\"property\">ontimeout</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;请求超时&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.<span class=\"property\">responseType</span> = obj.<span class=\"property\">dataType</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(obj.<span class=\"property\">type</span>,obj.<span class=\"property\">url</span>,obj.<span class=\"property\">async</span>||<span class=\"literal\">true</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.<span class=\"property\">headers</span>&amp;&amp;obj.<span class=\"property\">headers</span>[<span class=\"string\">&quot;Content-Type&quot;</span>])&#123;</span><br><span class=\"line\">        xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Content-Type&quot;</span>,obj.<span class=\"property\">headers</span>[<span class=\"string\">&quot;Content-Type&quot;</span>]);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Content-Type&quot;</span>,<span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//xhr.readyState 4:完成，XMLHttpRequest对象读取服务器响应结束</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> == <span class=\"number\">4</span>)&#123; </span><br><span class=\"line\">            <span class=\"comment\">//xhr.status HTTP状态码 2XX表示有效响应 304意味着是从缓存读取</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.<span class=\"property\">status</span> &gt;= <span class=\"number\">200</span> &amp;&amp; (xhr.<span class=\"property\">status</span> &lt; <span class=\"number\">300</span> || xhr.<span class=\"property\">status</span> == <span class=\"number\">304</span>))&#123;  </span><br><span class=\"line\">                obj.<span class=\"title function_\">success</span>(xhr.<span class=\"property\">response</span>)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                obj.<span class=\"title function_\">error</span>(xhr.<span class=\"property\">status</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.<span class=\"property\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> params = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> obj.<span class=\"property\">data</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj.<span class=\"property\">data</span>.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">                params.<span class=\"title function_\">push</span>(<span class=\"built_in\">encodeURIComponent</span>(key) + <span class=\"string\">&quot;=&quot;</span> + <span class=\"built_in\">encodeURIComponent</span>(obj.<span class=\"property\">data</span>[key]))            </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> postData = params.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&amp;&#x27;</span>);</span><br><span class=\"line\">        xhr.<span class=\"title function_\">send</span>(postData);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        xhr.<span class=\"title function_\">send</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.引用ajax.js</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./ajax.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">var</span> $$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Ajax</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">var</span> requestApi = <span class=\"string\">&quot;http://localhost:8080/springmvc_hibernate_maven/&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">window</span>.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    $$.<span class=\"title function_\">ajax</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">type</span>:<span class=\"string\">&#x27;get&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&quot;get&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">error</span>:<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    $$.<span class=\"title function_\">ajax</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">type</span>:<span class=\"string\">&#x27;post&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>:<span class=\"string\">&quot;xiongchao&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">password</span>:<span class=\"string\">&#x27;xiongchao&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">status</span>:<span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&quot;post&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">error</span>:<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    $$.<span class=\"title function_\">ajax</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">type</span>:<span class=\"string\">&#x27;put&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo/4/1&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&#x27;put&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">error</span>:<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    $$.<span class=\"title function_\">ajax</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">type</span>:<span class=\"string\">&#x27;delete&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo/4&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&#x27;delete&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">error</span>:<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3.顺带看下后端写法（哈哈,虽然不需要前端开发人员操心）<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808161403_227.png\"\n                     \n                ></p>\n<p>4.最后看下四种请求的结果<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808161408_351.png\"\n                     \n                ></p>\n<h3 id=\"ES6-封装XMLHttpRequest对象\"><a href=\"#ES6-封装XMLHttpRequest对象\" class=\"headerlink\" title=\"ES6 封装XMLHttpRequest对象\"></a>ES6 封装XMLHttpRequest对象</h3><p>同样ajax.js 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ajax = <span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//创建xmlhttprequest对象</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> xhr;</span><br><span class=\"line\">      <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">          xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">      &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">          xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">ActiveXObject</span>(<span class=\"string\">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      xhr.<span class=\"property\">timeout</span> = <span class=\"number\">5000</span>;</span><br><span class=\"line\">      xhr.<span class=\"property\">ontimeout</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;请求超时&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      xhr.<span class=\"property\">responseType</span> = obj.<span class=\"property\">dataType</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      xhr.<span class=\"title function_\">open</span>(obj.<span class=\"property\">type</span>,obj.<span class=\"property\">url</span>,obj.<span class=\"property\">async</span>||<span class=\"literal\">true</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(obj.<span class=\"property\">headers</span>&amp;&amp;obj.<span class=\"property\">headers</span>[<span class=\"string\">&quot;Content-Type&quot;</span>])&#123;</span><br><span class=\"line\">          xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Content-Type&quot;</span>,obj.<span class=\"property\">headers</span>[<span class=\"string\">&quot;Content-Type&quot;</span>]);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Content-Type&quot;</span>,<span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//xhr.readyState 4:完成，XMLHttpRequest对象读取服务器响应结束</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> == <span class=\"number\">4</span>)&#123; </span><br><span class=\"line\">              <span class=\"comment\">//xhr.status HTTP状态码 2XX表示有效响应 304意味着是从缓存读取</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span>(xhr.<span class=\"property\">status</span> &gt;= <span class=\"number\">200</span> &amp;&amp; (xhr.<span class=\"property\">status</span> &lt; <span class=\"number\">300</span> || xhr.<span class=\"property\">status</span> == <span class=\"number\">304</span>))&#123;  </span><br><span class=\"line\">                  <span class=\"title function_\">resolve</span>(xhr.<span class=\"property\">response</span>);</span><br><span class=\"line\">              &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                  <span class=\"title function_\">reject</span>(xhr.<span class=\"property\">response</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(obj.<span class=\"property\">data</span>)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> params = [];</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> obj.<span class=\"property\">data</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (obj.<span class=\"property\">data</span>.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">                  params.<span class=\"title function_\">push</span>(<span class=\"built_in\">encodeURIComponent</span>(key) + <span class=\"string\">&quot;=&quot;</span> + <span class=\"built_in\">encodeURIComponent</span>(obj.<span class=\"property\">data</span>[key]))            </span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> postData = params.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&amp;&#x27;</span>);</span><br><span class=\"line\">          xhr.<span class=\"title function_\">send</span>(postData);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          xhr.<span class=\"title function_\">send</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ajax;</span><br></pre></td></tr></table></figure>\n\n<p>引用ajax.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;module&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> ajax <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ajax.js&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> requestApi = <span class=\"string\">&quot;http://localhost:8080/springmvc_hibernate_maven/&quot;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">type</span>:<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span></span><br><span class=\"line\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&quot;get&quot;</span>);</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">type</span>:<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">              <span class=\"attr\">name</span>:<span class=\"string\">&quot;xiongchao&quot;</span>,</span><br><span class=\"line\">              <span class=\"attr\">password</span>:<span class=\"string\">&#x27;xiongchao&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">status</span>:<span class=\"number\">1</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span></span><br><span class=\"line\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&quot;post&quot;</span>);</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">type</span>:<span class=\"string\">&#x27;put&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo/4/1&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span></span><br><span class=\"line\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&quot;put&quot;</span>);</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">type</span>:<span class=\"string\">&#x27;delete&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo/4&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span></span><br><span class=\"line\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&quot;delete&quot;</span>);</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是-XMLHttpRequest-对象\"><a href=\"#什么是-XMLHttpRequest-对象\" class=\"headerlink\" title=\"什么是 XMLHttpRequest 对象\"></a>什么是 XMLHttpRequest 对象</h3><p>XMLHttpRequest 对象用于在后台与服务器交换数据。<br>XMLHttpRequest 对象是开发者的梦想，因为您能够：</p>\n<ul>\n<li>在不重新加载页面的情况下更新网页</li>\n<li>在页面已加载后从服务器请求数据</li>\n<li>在页面已加载后从服务器接收数据</li>\n<li>在后台向服务器发送数据</li>\n</ul>\n<p>所有现代的浏览器都支持 XMLHttpRequest 对象，XMLHttpRequest在 Ajax 编程中被大量使用。</p>\n<h3 id=\"原生javascript（ES5）封装XMLHttpRequest对象\"><a href=\"#原生javascript（ES5）封装XMLHttpRequest对象\" class=\"headerlink\" title=\"原生javascript（ES5）封装XMLHttpRequest对象\"></a>原生javascript（ES5）封装XMLHttpRequest对象</h3><p>1.创建ajax.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Ajax</span>(<span class=\"params\"></span>)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Ajax</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">ajax</span> = <span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建xmlhttprequest对象</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">        xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">ActiveXObject</span>(<span class=\"string\">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.<span class=\"property\">timeout</span> = <span class=\"number\">5000</span>;</span><br><span class=\"line\">    xhr.<span class=\"property\">ontimeout</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;请求超时&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.<span class=\"property\">responseType</span> = obj.<span class=\"property\">dataType</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.<span class=\"title function_\">open</span>(obj.<span class=\"property\">type</span>,obj.<span class=\"property\">url</span>,obj.<span class=\"property\">async</span>||<span class=\"literal\">true</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.<span class=\"property\">headers</span>&amp;&amp;obj.<span class=\"property\">headers</span>[<span class=\"string\">&quot;Content-Type&quot;</span>])&#123;</span><br><span class=\"line\">        xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Content-Type&quot;</span>,obj.<span class=\"property\">headers</span>[<span class=\"string\">&quot;Content-Type&quot;</span>]);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Content-Type&quot;</span>,<span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//xhr.readyState 4:完成，XMLHttpRequest对象读取服务器响应结束</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> == <span class=\"number\">4</span>)&#123; </span><br><span class=\"line\">            <span class=\"comment\">//xhr.status HTTP状态码 2XX表示有效响应 304意味着是从缓存读取</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.<span class=\"property\">status</span> &gt;= <span class=\"number\">200</span> &amp;&amp; (xhr.<span class=\"property\">status</span> &lt; <span class=\"number\">300</span> || xhr.<span class=\"property\">status</span> == <span class=\"number\">304</span>))&#123;  </span><br><span class=\"line\">                obj.<span class=\"title function_\">success</span>(xhr.<span class=\"property\">response</span>)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                obj.<span class=\"title function_\">error</span>(xhr.<span class=\"property\">status</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.<span class=\"property\">data</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> params = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> obj.<span class=\"property\">data</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (obj.<span class=\"property\">data</span>.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">                params.<span class=\"title function_\">push</span>(<span class=\"built_in\">encodeURIComponent</span>(key) + <span class=\"string\">&quot;=&quot;</span> + <span class=\"built_in\">encodeURIComponent</span>(obj.<span class=\"property\">data</span>[key]))            </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> postData = params.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&amp;&#x27;</span>);</span><br><span class=\"line\">        xhr.<span class=\"title function_\">send</span>(postData);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        xhr.<span class=\"title function_\">send</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.引用ajax.js</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./ajax.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">var</span> $$ = <span class=\"keyword\">new</span> <span class=\"title class_\">Ajax</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">var</span> requestApi = <span class=\"string\">&quot;http://localhost:8080/springmvc_hibernate_maven/&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">window</span>.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    $$.<span class=\"title function_\">ajax</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">type</span>:<span class=\"string\">&#x27;get&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&quot;get&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">error</span>:<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    $$.<span class=\"title function_\">ajax</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">type</span>:<span class=\"string\">&#x27;post&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">name</span>:<span class=\"string\">&quot;xiongchao&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">password</span>:<span class=\"string\">&#x27;xiongchao&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">status</span>:<span class=\"number\">1</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&quot;post&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">error</span>:<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    $$.<span class=\"title function_\">ajax</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">type</span>:<span class=\"string\">&#x27;put&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo/4/1&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&#x27;put&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">error</span>:<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    $$.<span class=\"title function_\">ajax</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">type</span>:<span class=\"string\">&#x27;delete&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo/4&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">success</span>:<span class=\"keyword\">function</span>(<span class=\"params\">data</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&#x27;delete&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">error</span>:<span class=\"keyword\">function</span>(<span class=\"params\">err</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>3.顺带看下后端写法（哈哈,虽然不需要前端开发人员操心）<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808161403_227.png\"\n                     \n                ></p>\n<p>4.最后看下四种请求的结果<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808161408_351.png\"\n                     \n                ></p>\n<h3 id=\"ES6-封装XMLHttpRequest对象\"><a href=\"#ES6-封装XMLHttpRequest对象\" class=\"headerlink\" title=\"ES6 封装XMLHttpRequest对象\"></a>ES6 封装XMLHttpRequest对象</h3><p>同样ajax.js 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ajax = <span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//创建xmlhttprequest对象</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> xhr;</span><br><span class=\"line\">      <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">          xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">      &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">          xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">ActiveXObject</span>(<span class=\"string\">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      xhr.<span class=\"property\">timeout</span> = <span class=\"number\">5000</span>;</span><br><span class=\"line\">      xhr.<span class=\"property\">ontimeout</span> = <span class=\"keyword\">function</span> (<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;请求超时&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      xhr.<span class=\"property\">responseType</span> = obj.<span class=\"property\">dataType</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      xhr.<span class=\"title function_\">open</span>(obj.<span class=\"property\">type</span>,obj.<span class=\"property\">url</span>,obj.<span class=\"property\">async</span>||<span class=\"literal\">true</span>);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">if</span>(obj.<span class=\"property\">headers</span>&amp;&amp;obj.<span class=\"property\">headers</span>[<span class=\"string\">&quot;Content-Type&quot;</span>])&#123;</span><br><span class=\"line\">          xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Content-Type&quot;</span>,obj.<span class=\"property\">headers</span>[<span class=\"string\">&quot;Content-Type&quot;</span>]);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&quot;Content-Type&quot;</span>,<span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//xhr.readyState 4:完成，XMLHttpRequest对象读取服务器响应结束</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> == <span class=\"number\">4</span>)&#123; </span><br><span class=\"line\">              <span class=\"comment\">//xhr.status HTTP状态码 2XX表示有效响应 304意味着是从缓存读取</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span>(xhr.<span class=\"property\">status</span> &gt;= <span class=\"number\">200</span> &amp;&amp; (xhr.<span class=\"property\">status</span> &lt; <span class=\"number\">300</span> || xhr.<span class=\"property\">status</span> == <span class=\"number\">304</span>))&#123;  </span><br><span class=\"line\">                  <span class=\"title function_\">resolve</span>(xhr.<span class=\"property\">response</span>);</span><br><span class=\"line\">              &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                  <span class=\"title function_\">reject</span>(xhr.<span class=\"property\">response</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(obj.<span class=\"property\">data</span>)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> params = [];</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> obj.<span class=\"property\">data</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (obj.<span class=\"property\">data</span>.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">                  params.<span class=\"title function_\">push</span>(<span class=\"built_in\">encodeURIComponent</span>(key) + <span class=\"string\">&quot;=&quot;</span> + <span class=\"built_in\">encodeURIComponent</span>(obj.<span class=\"property\">data</span>[key]))            </span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> postData = params.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&amp;&#x27;</span>);</span><br><span class=\"line\">          xhr.<span class=\"title function_\">send</span>(postData);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          xhr.<span class=\"title function_\">send</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ajax;</span><br></pre></td></tr></table></figure>\n\n<p>引用ajax.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;module&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> ajax <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./ajax.js&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> requestApi = <span class=\"string\">&quot;http://localhost:8080/springmvc_hibernate_maven/&quot;</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">window</span>.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">type</span>:<span class=\"string\">&#x27;get&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span></span><br><span class=\"line\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&quot;get&quot;</span>);</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">type</span>:<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">              <span class=\"attr\">name</span>:<span class=\"string\">&quot;xiongchao&quot;</span>,</span><br><span class=\"line\">              <span class=\"attr\">password</span>:<span class=\"string\">&#x27;xiongchao&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">status</span>:<span class=\"number\">1</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span></span><br><span class=\"line\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&quot;post&quot;</span>);</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">type</span>:<span class=\"string\">&#x27;put&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo/4/1&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span></span><br><span class=\"line\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&quot;put&quot;</span>);</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">type</span>:<span class=\"string\">&#x27;delete&#x27;</span>,</span><br><span class=\"line\">          <span class=\"attr\">url</span>:requestApi + <span class=\"string\">&quot;test/userInfo/4&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">dataType</span>:<span class=\"string\">&#x27;json&#x27;</span></span><br><span class=\"line\">      &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data,<span class=\"string\">&quot;delete&quot;</span>);</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"Jquery Dom元素Index()方法的使用","author":"熊 超","keywords":"index jquery","date":"2017-06-10T04:30:00.000Z","_content":"------\n<!--more-->\n\n### 前言\n作为一个做后端java开发的被强行拉到前端组的菜鸟，前端知识略懂皮毛的我对于jquery很多常用方法都有误区，比如我现在要说的jquery DOM元素的index()方法。\n\n### jquery获取元素索引值index()方法使用误区\n\n\n\n由于对index()方法理解不是很深，所以在做项目时就遇到了有的页面获取的索引是正常的有的页面获取的索引总是大了2个，然后为了让最后的结果正常我就直接减2，并在后面注释\"//这里不知道为什么总是多了2，但其他页面又是正常的\"，结果组长偶然一次机会看到了我这个注释就批评我说“哪有人这么写代码的”。唉，糗事就不多说了，以后写代码再也不敢这样了。\n\n### jquery获取元素索引值index()方法作用\n\n\n\n#### 用法一：$(select).index();\n> * 示例一：\n\n```HTML\n# html代码:\n<div class=\"main\">\n  <div class=\"box\">Milk</div>\n  <div class=\"box\">Tea</div>\n  <div class=\"box\">Coffee</div>\n </div>\n```\n```js\n# js代码：\n$(\".box\").on(\"click\",function(){\n  $(this).index();//结果：如果点击的Milk则返回 0\n});\n\n```\n\n\n\n这个示例看起来是获取的自己在与自己相同元素中的位置，那么看实例二\n\n> * 示例二：\n\n```HTML\n# html代码:\n<div class=\"main\">\n  <p>Soda</p>\n  <div class=\"box\">Milk</div>\n  <div class=\"box\">Tea</div>\n  <div class=\"box\">Coffee</div>\n </div>\n \n```\n```JavaScript\n# js代码：\n$(\".box\").on(\"click\",function(){\n  $(this).index();//结果：如果点击的Milk则返回 1\n});\n\n```\n从以上两个示例可以看出$(select).index()即使在没有参数的情况下也是相对用法，这个相对用法是相对其父元素中的位置，而不是获取自己在相同元素中的位置\n\n#### 用法二：$(select1).index(select2);\n> * 示例：\n\n```HTML\n# html代码:\n<p class=\"box\">Tea</p>\n<div class=\"main\">\n  <p>Soda</p>\n  <div class=\"box\">Milk</div>\n  <div class=\"box\" id=\"box2\">Tea</div>\n  <div class=\"box\">Coffee</div>\n</div>\n\n```\n```js\n# js代码:\n$(\".box\").index($(\"#box2\"));//结果: 2\n\n```\n\n通过这个示例可以看出**$(select1).index(select2)**的用法是选择器**select2**相对于选择器**select1**的位置索引，跟同辈元素和其父辈元素都无关。\n\n### 总结\n\n虽然index()的用法比较简单，但是理解不深的话在项目中运用出了问题还是麻烦的，特别是对于我这个前端菜鸟出现果过这种尴尬的事情还是记录下来比较好，以免以后再跳进同一个坑。","source":"_posts/Jquery-Dom元素Index-方法的使用.md","raw":"title: Jquery Dom元素Index()方法的使用\nauthor: 熊 超\ntags:\n  - jquery\ncategories:\n  - javascript\nkeywords: index jquery\ndate: 2017-06-10 12:30:00\n---\n------\n<!--more-->\n\n### 前言\n作为一个做后端java开发的被强行拉到前端组的菜鸟，前端知识略懂皮毛的我对于jquery很多常用方法都有误区，比如我现在要说的jquery DOM元素的index()方法。\n\n### jquery获取元素索引值index()方法使用误区\n\n\n\n由于对index()方法理解不是很深，所以在做项目时就遇到了有的页面获取的索引是正常的有的页面获取的索引总是大了2个，然后为了让最后的结果正常我就直接减2，并在后面注释\"//这里不知道为什么总是多了2，但其他页面又是正常的\"，结果组长偶然一次机会看到了我这个注释就批评我说“哪有人这么写代码的”。唉，糗事就不多说了，以后写代码再也不敢这样了。\n\n### jquery获取元素索引值index()方法作用\n\n\n\n#### 用法一：$(select).index();\n> * 示例一：\n\n```HTML\n# html代码:\n<div class=\"main\">\n  <div class=\"box\">Milk</div>\n  <div class=\"box\">Tea</div>\n  <div class=\"box\">Coffee</div>\n </div>\n```\n```js\n# js代码：\n$(\".box\").on(\"click\",function(){\n  $(this).index();//结果：如果点击的Milk则返回 0\n});\n\n```\n\n\n\n这个示例看起来是获取的自己在与自己相同元素中的位置，那么看实例二\n\n> * 示例二：\n\n```HTML\n# html代码:\n<div class=\"main\">\n  <p>Soda</p>\n  <div class=\"box\">Milk</div>\n  <div class=\"box\">Tea</div>\n  <div class=\"box\">Coffee</div>\n </div>\n \n```\n```JavaScript\n# js代码：\n$(\".box\").on(\"click\",function(){\n  $(this).index();//结果：如果点击的Milk则返回 1\n});\n\n```\n从以上两个示例可以看出$(select).index()即使在没有参数的情况下也是相对用法，这个相对用法是相对其父元素中的位置，而不是获取自己在相同元素中的位置\n\n#### 用法二：$(select1).index(select2);\n> * 示例：\n\n```HTML\n# html代码:\n<p class=\"box\">Tea</p>\n<div class=\"main\">\n  <p>Soda</p>\n  <div class=\"box\">Milk</div>\n  <div class=\"box\" id=\"box2\">Tea</div>\n  <div class=\"box\">Coffee</div>\n</div>\n\n```\n```js\n# js代码:\n$(\".box\").index($(\"#box2\"));//结果: 2\n\n```\n\n通过这个示例可以看出**$(select1).index(select2)**的用法是选择器**select2**相对于选择器**select1**的位置索引，跟同辈元素和其父辈元素都无关。\n\n### 总结\n\n虽然index()的用法比较简单，但是理解不深的话在项目中运用出了问题还是麻烦的，特别是对于我这个前端菜鸟出现果过这种尴尬的事情还是记录下来比较好，以免以后再跳进同一个坑。","slug":"Jquery-Dom元素Index-方法的使用","published":1,"updated":"2023-07-19T03:06:02.420Z","_id":"clk82gyje000631648ogka8s0","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<span id=\"more\"></span>\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>作为一个做后端java开发的被强行拉到前端组的菜鸟，前端知识略懂皮毛的我对于jquery很多常用方法都有误区，比如我现在要说的jquery DOM元素的index()方法。</p>\n<h3 id=\"jquery获取元素索引值index-方法使用误区\"><a href=\"#jquery获取元素索引值index-方法使用误区\" class=\"headerlink\" title=\"jquery获取元素索引值index()方法使用误区\"></a>jquery获取元素索引值index()方法使用误区</h3><p>由于对index()方法理解不是很深，所以在做项目时就遇到了有的页面获取的索引是正常的有的页面获取的索引总是大了2个，然后为了让最后的结果正常我就直接减2，并在后面注释”&#x2F;&#x2F;这里不知道为什么总是多了2，但其他页面又是正常的”，结果组长偶然一次机会看到了我这个注释就批评我说“哪有人这么写代码的”。唉，糗事就不多说了，以后写代码再也不敢这样了。</p>\n<h3 id=\"jquery获取元素索引值index-方法作用\"><a href=\"#jquery获取元素索引值index-方法作用\" class=\"headerlink\" title=\"jquery获取元素索引值index()方法作用\"></a>jquery获取元素索引值index()方法作用</h3><h4 id=\"用法一：-select-index\"><a href=\"#用法一：-select-index\" class=\"headerlink\" title=\"用法一：$(select).index();\"></a>用法一：$(select).index();</h4><blockquote>\n<ul>\n<li>示例一：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># html代码:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Milk<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># js代码：</span><br><span class=\"line\">$(<span class=\"string\">&quot;.box&quot;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&quot;click&quot;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">index</span>();<span class=\"comment\">//结果：如果点击的Milk则返回 0</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个示例看起来是获取的自己在与自己相同元素中的位置，那么看实例二</p>\n<blockquote>\n<ul>\n<li>示例二：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># html代码:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Soda<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Milk<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># js代码：</span><br><span class=\"line\">$(<span class=\"string\">&quot;.box&quot;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&quot;click&quot;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">index</span>();<span class=\"comment\">//结果：如果点击的Milk则返回 1</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>从以上两个示例可以看出$(select).index()即使在没有参数的情况下也是相对用法，这个相对用法是相对其父元素中的位置，而不是获取自己在相同元素中的位置</p>\n<h4 id=\"用法二：-select1-index-select2\"><a href=\"#用法二：-select1-index-select2\" class=\"headerlink\" title=\"用法二：$(select1).index(select2);\"></a>用法二：$(select1).index(select2);</h4><blockquote>\n<ul>\n<li>示例：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># html代码:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Soda<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Milk<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;box2&quot;</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># js代码:</span><br><span class=\"line\">$(<span class=\"string\">&quot;.box&quot;</span>).<span class=\"title function_\">index</span>($(<span class=\"string\">&quot;#box2&quot;</span>));<span class=\"comment\">//结果: 2</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过这个示例可以看出**$(select1).index(select2)<strong>的用法是选择器</strong>select2<strong>相对于选择器</strong>select1**的位置索引，跟同辈元素和其父辈元素都无关。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>虽然index()的用法比较简单，但是理解不深的话在项目中运用出了问题还是麻烦的，特别是对于我这个前端菜鸟出现果过这种尴尬的事情还是记录下来比较好，以免以后再跳进同一个坑。</p>\n","site":{"data":{}},"excerpt":"<hr>","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>作为一个做后端java开发的被强行拉到前端组的菜鸟，前端知识略懂皮毛的我对于jquery很多常用方法都有误区，比如我现在要说的jquery DOM元素的index()方法。</p>\n<h3 id=\"jquery获取元素索引值index-方法使用误区\"><a href=\"#jquery获取元素索引值index-方法使用误区\" class=\"headerlink\" title=\"jquery获取元素索引值index()方法使用误区\"></a>jquery获取元素索引值index()方法使用误区</h3><p>由于对index()方法理解不是很深，所以在做项目时就遇到了有的页面获取的索引是正常的有的页面获取的索引总是大了2个，然后为了让最后的结果正常我就直接减2，并在后面注释”&#x2F;&#x2F;这里不知道为什么总是多了2，但其他页面又是正常的”，结果组长偶然一次机会看到了我这个注释就批评我说“哪有人这么写代码的”。唉，糗事就不多说了，以后写代码再也不敢这样了。</p>\n<h3 id=\"jquery获取元素索引值index-方法作用\"><a href=\"#jquery获取元素索引值index-方法作用\" class=\"headerlink\" title=\"jquery获取元素索引值index()方法作用\"></a>jquery获取元素索引值index()方法作用</h3><h4 id=\"用法一：-select-index\"><a href=\"#用法一：-select-index\" class=\"headerlink\" title=\"用法一：$(select).index();\"></a>用法一：$(select).index();</h4><blockquote>\n<ul>\n<li>示例一：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># html代码:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Milk<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># js代码：</span><br><span class=\"line\">$(<span class=\"string\">&quot;.box&quot;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&quot;click&quot;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">index</span>();<span class=\"comment\">//结果：如果点击的Milk则返回 0</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个示例看起来是获取的自己在与自己相同元素中的位置，那么看实例二</p>\n<blockquote>\n<ul>\n<li>示例二：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># html代码:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Soda<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Milk<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># js代码：</span><br><span class=\"line\">$(<span class=\"string\">&quot;.box&quot;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&quot;click&quot;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">index</span>();<span class=\"comment\">//结果：如果点击的Milk则返回 1</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>从以上两个示例可以看出$(select).index()即使在没有参数的情况下也是相对用法，这个相对用法是相对其父元素中的位置，而不是获取自己在相同元素中的位置</p>\n<h4 id=\"用法二：-select1-index-select2\"><a href=\"#用法二：-select1-index-select2\" class=\"headerlink\" title=\"用法二：$(select1).index(select2);\"></a>用法二：$(select1).index(select2);</h4><blockquote>\n<ul>\n<li>示例：</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># html代码:</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Soda<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Milk<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;box2&quot;</span>&gt;</span>Tea<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span>Coffee<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># js代码:</span><br><span class=\"line\">$(<span class=\"string\">&quot;.box&quot;</span>).<span class=\"title function_\">index</span>($(<span class=\"string\">&quot;#box2&quot;</span>));<span class=\"comment\">//结果: 2</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过这个示例可以看出**$(select1).index(select2)<strong>的用法是选择器</strong>select2<strong>相对于选择器</strong>select1**的位置索引，跟同辈元素和其父辈元素都无关。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>虽然index()的用法比较简单，但是理解不深的话在项目中运用出了问题还是麻烦的，特别是对于我这个前端菜鸟出现果过这种尴尬的事情还是记录下来比较好，以免以后再跳进同一个坑。</p>"},{"title":"Markdown","author":"熊 超","date":"2017-06-08T16:15:00.000Z","_content":"<!-- more -->\n\n我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，**Cmd Markdown** 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：\n\n> * 整理知识，学习笔记\n> * 发布日记，杂文，所见所想\n> * 撰写发布技术文稿（代码支持）\n> * 撰写发布学术论文（LaTeX 公式支持）\n\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)\n\n\n除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：\n\n### [Windows/Mac/Linux 全平台客户端](https://www.zybuluo.com/cmd/)\n\n> 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> **新文稿** 或者使用快捷键 `Ctrl+Alt+N`。\n\n------\n\n## 什么是 Markdown\n\nMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，**粗体** 或者 *斜体* 某些文字，更棒的是，它还可以\n\n### 1. 制作一份待办事宜 [Todo 列表](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表)\n\n- [ ] 支持以 PDF 格式导出文稿\n- [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n- [x] 新增 Todo 列表功能\n- [x] 修复 LaTex 公式渲染问题\n- [x] 新增 LaTex 公式编号功能\n\n### 2. 书写一个质能守恒公式[^LaTeX]\n\n$$E=mc^2$$\n\n### 3. 高亮一段代码[^code]\n\n```python\n@requires_authorization\nclass SomeClass:\n    pass\n\nif __name__ == '__main__':\n    # A comment\n    print 'hello world'\n```\n\n### 4. 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)\n\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n### 5. 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n### 6. 高效绘制 [甘特图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图)\n\n```gantt\n    title 项目开发流程\n    section 项目确定\n        需求分析       :a1, 2016-06-22, 3d\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n```\n\n### 7. 绘制表格\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n### 8. 更详细语法说明\n\n想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。\n\n总而言之，不同于其它 *所见即所得* 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。**Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。** 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。\n\n---\n\n## 什么是 Cmd Markdown\n\n您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 **编辑/发布/阅读** Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。\n\n### 1. 实时同步预览\n\n我们将 Cmd Markdown 的主界面一分为二，左边为**编辑区**，右边为**预览区**，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！\n\n### 2. 编辑工具栏\n\n也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 **编辑区** 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。\n\n![tool-editor](https://www.zybuluo.com/static/img/toolbar-editor.png)\n\n### 3. 编辑模式\n\n完全心无旁骛的方式编辑文字：点击 **编辑工具栏** 最右侧的拉伸按钮或者按下 `Ctrl + M`，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！\n\n### 4. 实时的云端文稿\n\n为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 **编辑工具栏** 的最右侧提示 `已保存` 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。\n\n### 5. 离线模式\n\n在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。\n\n### 6. 管理工具栏\n\n为了便于管理您的文稿，在 **预览区** 的顶部放置了如下所示的 **管理工具栏**：\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-manager.jpg)\n\n通过管理工具栏可以：\n\n<i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享\n<i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿\n<i class=\"icon-trash\"></i> 删除：删除当前的文稿\n<i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地\n<i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作\n<i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式\n\n### 7. 阅读工具栏\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-reader.jpg)\n\n通过 **预览区** 右上角的 **阅读工具栏**，可以查看当前文稿的目录并增强阅读体验。\n\n工具栏上的五个图标依次为：\n\n<i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落\n<i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置\n<i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 **黑色主题**，超炫！\n<i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验\n<i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境\n\n### 8. 阅读模式\n\n在 **阅读工具栏** 点击 <i class=\"icon-desktop\"></i> 或者按下 `Ctrl+Alt+M` 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。\n\n### 9. 标签、分类和搜索\n\n在编辑区任意行首位置输入以下格式的文字可以标签当前文档：\n\n标签： 未分类\n\n标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：\n\n![file-list](https://www.zybuluo.com/static/img/file-list.png)\n\n### 10. 文稿发布和分享\n\n在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！\n\n------\n\n再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！\n\n作者 [@ghosert][3]     \n2016 年 07月 07日    \n\n[^LaTeX]: 支持 **LaTeX** 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。\n\n[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，**四十一**种主流编程语言。\n\n[1]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\n[2]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\n[3]: http://weibo.com/ghosert\n[4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference","source":"_posts/Markdown.md","raw":"title: Markdown\nauthor: 熊 超\ntags:\n  - Markdown\ncategories:\n  - Markdown\ndate: 2017-06-09 00:15:00\n---\n<!-- more -->\n\n我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，**Cmd Markdown** 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：\n\n> * 整理知识，学习笔记\n> * 发布日记，杂文，所见所想\n> * 撰写发布技术文稿（代码支持）\n> * 撰写发布学术论文（LaTeX 公式支持）\n\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)\n\n\n除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：\n\n### [Windows/Mac/Linux 全平台客户端](https://www.zybuluo.com/cmd/)\n\n> 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> **新文稿** 或者使用快捷键 `Ctrl+Alt+N`。\n\n------\n\n## 什么是 Markdown\n\nMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，**粗体** 或者 *斜体* 某些文字，更棒的是，它还可以\n\n### 1. 制作一份待办事宜 [Todo 列表](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表)\n\n- [ ] 支持以 PDF 格式导出文稿\n- [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n- [x] 新增 Todo 列表功能\n- [x] 修复 LaTex 公式渲染问题\n- [x] 新增 LaTex 公式编号功能\n\n### 2. 书写一个质能守恒公式[^LaTeX]\n\n$$E=mc^2$$\n\n### 3. 高亮一段代码[^code]\n\n```python\n@requires_authorization\nclass SomeClass:\n    pass\n\nif __name__ == '__main__':\n    # A comment\n    print 'hello world'\n```\n\n### 4. 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)\n\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n### 5. 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n### 6. 高效绘制 [甘特图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图)\n\n```gantt\n    title 项目开发流程\n    section 项目确定\n        需求分析       :a1, 2016-06-22, 3d\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n```\n\n### 7. 绘制表格\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n### 8. 更详细语法说明\n\n想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。\n\n总而言之，不同于其它 *所见即所得* 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。**Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。** 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。\n\n---\n\n## 什么是 Cmd Markdown\n\n您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 **编辑/发布/阅读** Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。\n\n### 1. 实时同步预览\n\n我们将 Cmd Markdown 的主界面一分为二，左边为**编辑区**，右边为**预览区**，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！\n\n### 2. 编辑工具栏\n\n也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 **编辑区** 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。\n\n![tool-editor](https://www.zybuluo.com/static/img/toolbar-editor.png)\n\n### 3. 编辑模式\n\n完全心无旁骛的方式编辑文字：点击 **编辑工具栏** 最右侧的拉伸按钮或者按下 `Ctrl + M`，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！\n\n### 4. 实时的云端文稿\n\n为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 **编辑工具栏** 的最右侧提示 `已保存` 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。\n\n### 5. 离线模式\n\n在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。\n\n### 6. 管理工具栏\n\n为了便于管理您的文稿，在 **预览区** 的顶部放置了如下所示的 **管理工具栏**：\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-manager.jpg)\n\n通过管理工具栏可以：\n\n<i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享\n<i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿\n<i class=\"icon-trash\"></i> 删除：删除当前的文稿\n<i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地\n<i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作\n<i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式\n\n### 7. 阅读工具栏\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-reader.jpg)\n\n通过 **预览区** 右上角的 **阅读工具栏**，可以查看当前文稿的目录并增强阅读体验。\n\n工具栏上的五个图标依次为：\n\n<i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落\n<i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置\n<i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 **黑色主题**，超炫！\n<i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验\n<i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境\n\n### 8. 阅读模式\n\n在 **阅读工具栏** 点击 <i class=\"icon-desktop\"></i> 或者按下 `Ctrl+Alt+M` 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。\n\n### 9. 标签、分类和搜索\n\n在编辑区任意行首位置输入以下格式的文字可以标签当前文档：\n\n标签： 未分类\n\n标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：\n\n![file-list](https://www.zybuluo.com/static/img/file-list.png)\n\n### 10. 文稿发布和分享\n\n在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！\n\n------\n\n再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！\n\n作者 [@ghosert][3]     \n2016 年 07月 07日    \n\n[^LaTeX]: 支持 **LaTeX** 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。\n\n[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，**四十一**种主流编程语言。\n\n[1]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\n[2]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\n[3]: http://weibo.com/ghosert\n[4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference","slug":"Markdown","published":1,"updated":"2023-07-19T03:06:55.806Z","_id":"clk82gyjf00073164dlwpfxli","comments":1,"layout":"post","photos":[],"link":"","content":"<span id=\"more\"></span>\n\n<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>发布日记，杂文，所见所想</li>\n<li>撰写发布技术文稿（代码支持）</li>\n<li>撰写发布学术论文（LaTeX 公式支持）</li>\n</ul>\n</blockquote>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"https://www.zybuluo.com/static/img/logo.png\"\n                      alt=\"cmd-markdown-logo\"\n                ></p>\n<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>\n<h3 id=\"Windows-Mac-Linux-全平台客户端\"><a href=\"#Windows-Mac-Linux-全平台客户端\" class=\"headerlink\" title=\"Windows&#x2F;Mac&#x2F;Linux 全平台客户端\"></a><a class=\"link\"   href=\"https://www.zybuluo.com/cmd/\" >Windows&#x2F;Mac&#x2F;Linux 全平台客户端<i class=\"fas fa-external-link-alt\"></i></a></h3><blockquote>\n<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>\n</blockquote>\n<hr>\n<h2 id=\"什么是-Markdown\"><a href=\"#什么是-Markdown\" class=\"headerlink\" title=\"什么是 Markdown\"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>\n<h3 id=\"1-制作一份待办事宜-Todo-列表\"><a href=\"#1-制作一份待办事宜-Todo-列表\" class=\"headerlink\" title=\"1. 制作一份待办事宜 Todo 列表\"></a>1. 制作一份待办事宜 <a class=\"link\"   href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-%E5%BE%85%E5%8A%9E%E4%BA%8B%E5%AE%9C-todo-%E5%88%97%E8%A1%A8\" >Todo 列表<i class=\"fas fa-external-link-alt\"></i></a></h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 支持以 PDF 格式导出文稿</li>\n<li><input disabled=\"\" type=\"checkbox\"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 新增 Todo 列表功能</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 修复 LaTex 公式渲染问题</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 新增 LaTex 公式编号功能</li>\n</ul>\n<h3 id=\"2-书写一个质能守恒公式-LaTeX\"><a href=\"#2-书写一个质能守恒公式-LaTeX\" class=\"headerlink\" title=\"2. 书写一个质能守恒公式[^LaTeX]\"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E&#x3D;mc^2$$</p>\n<h3 id=\"3-高亮一段代码-code\"><a href=\"#3-高亮一段代码-code\" class=\"headerlink\" title=\"3. 高亮一段代码[^code]\"></a>3. 高亮一段代码[^code]</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@requires_authorization</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SomeClass</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># A comment</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-高效绘制-流程图\"><a href=\"#4-高效绘制-流程图\" class=\"headerlink\" title=\"4. 高效绘制 流程图\"></a>4. 高效绘制 <a class=\"link\"   href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-%E6%B5%81%E7%A8%8B%E5%9B%BE\" >流程图<i class=\"fas fa-external-link-alt\"></i></a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: Start</span><br><span class=\"line\">op=&gt;operation: Your Operation</span><br><span class=\"line\">cond=&gt;condition: Yes or No?</span><br><span class=\"line\">e=&gt;end</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-高效绘制-序列图\"><a href=\"#5-高效绘制-序列图\" class=\"headerlink\" title=\"5. 高效绘制 序列图\"></a>5. 高效绘制 <a class=\"link\"   href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-%E5%BA%8F%E5%88%97%E5%9B%BE\" >序列图<i class=\"fas fa-external-link-alt\"></i></a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class=\"line\">Note right of Bob: Bob thinks</span><br><span class=\"line\">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-高效绘制-甘特图\"><a href=\"#6-高效绘制-甘特图\" class=\"headerlink\" title=\"6. 高效绘制 甘特图\"></a>6. 高效绘制 <a class=\"link\"   href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-%E7%94%98%E7%89%B9%E5%9B%BE\" >甘特图<i class=\"fas fa-external-link-alt\"></i></a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title 项目开发流程</span><br><span class=\"line\">section 项目确定</span><br><span class=\"line\">    需求分析       :a1, 2016-06-22, 3d</span><br><span class=\"line\">    可行性报告     :after a1, 5d</span><br><span class=\"line\">    概念验证       : 5d</span><br><span class=\"line\">section 项目实施</span><br><span class=\"line\">    概要设计      :2016-07-05  , 5d</span><br><span class=\"line\">    详细设计      :2016-07-08, 10d</span><br><span class=\"line\">    编码          :2016-07-15, 10d</span><br><span class=\"line\">    测试          :2016-07-22, 5d</span><br><span class=\"line\">section 发布验收</span><br><span class=\"line\">    发布: 2d</span><br><span class=\"line\">    验收: 3d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-绘制表格\"><a href=\"#7-绘制表格\" class=\"headerlink\" title=\"7. 绘制表格\"></a>7. 绘制表格</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th align=\"right\">价格</th>\n<th align=\"center\">数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>计算机</td>\n<td align=\"right\">$1600</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td align=\"right\">$12</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td align=\"right\">$1</td>\n<td align=\"center\">234</td>\n</tr>\n</tbody></table>\n<h3 id=\"8-更详细语法说明\"><a href=\"#8-更详细语法说明\" class=\"headerlink\" title=\"8. 更详细语法说明\"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a class=\"link\"   href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\" >Cmd Markdown 简明语法手册<i class=\"fas fa-external-link-alt\"></i></a>，进阶用户可以参考 <a class=\"link\"   href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-%E9%AB%98%E9%98%B6%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C\" >Cmd Markdown 高阶语法手册<i class=\"fas fa-external-link-alt\"></i></a> 了解更多高级功能。</p>\n<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>\n<hr>\n<h2 id=\"什么是-Cmd-Markdown\"><a href=\"#什么是-Cmd-Markdown\" class=\"headerlink\" title=\"什么是 Cmd Markdown\"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑&#x2F;发布&#x2F;阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统&#x2F;设备上管理这里的文字。</p>\n<h3 id=\"1-实时同步预览\"><a href=\"#1-实时同步预览\" class=\"headerlink\" title=\"1. 实时同步预览\"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>\n<h3 id=\"2-编辑工具栏\"><a href=\"#2-编辑工具栏\" class=\"headerlink\" title=\"2. 编辑工具栏\"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"https://www.zybuluo.com/static/img/toolbar-editor.png\"\n                      alt=\"tool-editor\"\n                ></p>\n<h3 id=\"3-编辑模式\"><a href=\"#3-编辑模式\" class=\"headerlink\" title=\"3. 编辑模式\"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>\n<h3 id=\"4-实时的云端文稿\"><a href=\"#4-实时的云端文稿\" class=\"headerlink\" title=\"4. 实时的云端文稿\"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>\n<h3 id=\"5-离线模式\"><a href=\"#5-离线模式\" class=\"headerlink\" title=\"5. 离线模式\"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>\n<h3 id=\"6-管理工具栏\"><a href=\"#6-管理工具栏\" class=\"headerlink\" title=\"6. 管理工具栏\"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"https://www.zybuluo.com/static/img/toolbar-manager.jpg\"\n                      alt=\"tool-manager\"\n                ></p>\n<p>通过管理工具栏可以：</p>\n<p><i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿<br><i class=\"icon-trash\"></i> 删除：删除当前的文稿<br><i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class=\"icon-pencil\"></i> 模式：切换 普通&#x2F;Vim&#x2F;Emacs 编辑模式</p>\n<h3 id=\"7-阅读工具栏\"><a href=\"#7-阅读工具栏\" class=\"headerlink\" title=\"7. 阅读工具栏\"></a>7. 阅读工具栏</h3><p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"https://www.zybuluo.com/static/img/toolbar-reader.jpg\"\n                      alt=\"tool-manager\"\n                ></p>\n<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>\n<p>工具栏上的五个图标依次为：</p>\n<p><i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>\n<h3 id=\"8-阅读模式\"><a href=\"#8-阅读模式\" class=\"headerlink\" title=\"8. 阅读模式\"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class=\"icon-desktop\"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>\n<h3 id=\"9-标签、分类和搜索\"><a href=\"#9-标签、分类和搜索\" class=\"headerlink\" title=\"9. 标签、分类和搜索\"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>\n<p>标签： 未分类</p>\n<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"https://www.zybuluo.com/static/img/file-list.png\"\n                      alt=\"file-list\"\n                ></p>\n<h3 id=\"10-文稿发布和分享\"><a href=\"#10-文稿发布和分享\" class=\"headerlink\" title=\"10. 文稿发布和分享\"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>\n<hr>\n<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>\n<p>作者 <a class=\"link\"   href=\"http://weibo.com/ghosert\" >@ghosert<i class=\"fas fa-external-link-alt\"></i></a><br>2016 年 07月 07日    </p>\n<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\\sum_{i&#x3D;1}^n a_i&#x3D;0$， 访问 <a class=\"link\"   href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" >MathJax<i class=\"fas fa-external-link-alt\"></i></a> 参考更多使用方法。</p>\n<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>发布日记，杂文，所见所想</li>\n<li>撰写发布技术文稿（代码支持）</li>\n<li>撰写发布学术论文（LaTeX 公式支持）</li>\n</ul>\n</blockquote>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"https://www.zybuluo.com/static/img/logo.png\"\n                      alt=\"cmd-markdown-logo\"\n                ></p>\n<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>\n<h3 id=\"Windows-Mac-Linux-全平台客户端\"><a href=\"#Windows-Mac-Linux-全平台客户端\" class=\"headerlink\" title=\"Windows&#x2F;Mac&#x2F;Linux 全平台客户端\"></a><a class=\"link\"   href=\"https://www.zybuluo.com/cmd/\" >Windows&#x2F;Mac&#x2F;Linux 全平台客户端<i class=\"fas fa-external-link-alt\"></i></a></h3><blockquote>\n<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>\n</blockquote>\n<hr>\n<h2 id=\"什么是-Markdown\"><a href=\"#什么是-Markdown\" class=\"headerlink\" title=\"什么是 Markdown\"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>\n<h3 id=\"1-制作一份待办事宜-Todo-列表\"><a href=\"#1-制作一份待办事宜-Todo-列表\" class=\"headerlink\" title=\"1. 制作一份待办事宜 Todo 列表\"></a>1. 制作一份待办事宜 <a class=\"link\"   href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-%E5%BE%85%E5%8A%9E%E4%BA%8B%E5%AE%9C-todo-%E5%88%97%E8%A1%A8\" >Todo 列表<i class=\"fas fa-external-link-alt\"></i></a></h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> 支持以 PDF 格式导出文稿</li>\n<li><input disabled=\"\" type=\"checkbox\"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 新增 Todo 列表功能</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 修复 LaTex 公式渲染问题</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 新增 LaTex 公式编号功能</li>\n</ul>\n<h3 id=\"2-书写一个质能守恒公式-LaTeX\"><a href=\"#2-书写一个质能守恒公式-LaTeX\" class=\"headerlink\" title=\"2. 书写一个质能守恒公式[^LaTeX]\"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E&#x3D;mc^2$$</p>\n<h3 id=\"3-高亮一段代码-code\"><a href=\"#3-高亮一段代码-code\" class=\"headerlink\" title=\"3. 高亮一段代码[^code]\"></a>3. 高亮一段代码[^code]</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@requires_authorization</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SomeClass</span>:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># A comment</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-高效绘制-流程图\"><a href=\"#4-高效绘制-流程图\" class=\"headerlink\" title=\"4. 高效绘制 流程图\"></a>4. 高效绘制 <a class=\"link\"   href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-%E6%B5%81%E7%A8%8B%E5%9B%BE\" >流程图<i class=\"fas fa-external-link-alt\"></i></a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: Start</span><br><span class=\"line\">op=&gt;operation: Your Operation</span><br><span class=\"line\">cond=&gt;condition: Yes or No?</span><br><span class=\"line\">e=&gt;end</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-高效绘制-序列图\"><a href=\"#5-高效绘制-序列图\" class=\"headerlink\" title=\"5. 高效绘制 序列图\"></a>5. 高效绘制 <a class=\"link\"   href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-%E5%BA%8F%E5%88%97%E5%9B%BE\" >序列图<i class=\"fas fa-external-link-alt\"></i></a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class=\"line\">Note right of Bob: Bob thinks</span><br><span class=\"line\">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-高效绘制-甘特图\"><a href=\"#6-高效绘制-甘特图\" class=\"headerlink\" title=\"6. 高效绘制 甘特图\"></a>6. 高效绘制 <a class=\"link\"   href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-%E7%94%98%E7%89%B9%E5%9B%BE\" >甘特图<i class=\"fas fa-external-link-alt\"></i></a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title 项目开发流程</span><br><span class=\"line\">section 项目确定</span><br><span class=\"line\">    需求分析       :a1, 2016-06-22, 3d</span><br><span class=\"line\">    可行性报告     :after a1, 5d</span><br><span class=\"line\">    概念验证       : 5d</span><br><span class=\"line\">section 项目实施</span><br><span class=\"line\">    概要设计      :2016-07-05  , 5d</span><br><span class=\"line\">    详细设计      :2016-07-08, 10d</span><br><span class=\"line\">    编码          :2016-07-15, 10d</span><br><span class=\"line\">    测试          :2016-07-22, 5d</span><br><span class=\"line\">section 发布验收</span><br><span class=\"line\">    发布: 2d</span><br><span class=\"line\">    验收: 3d</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-绘制表格\"><a href=\"#7-绘制表格\" class=\"headerlink\" title=\"7. 绘制表格\"></a>7. 绘制表格</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th align=\"right\">价格</th>\n<th align=\"center\">数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>计算机</td>\n<td align=\"right\">$1600</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td align=\"right\">$12</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td align=\"right\">$1</td>\n<td align=\"center\">234</td>\n</tr>\n</tbody></table>\n<h3 id=\"8-更详细语法说明\"><a href=\"#8-更详细语法说明\" class=\"headerlink\" title=\"8. 更详细语法说明\"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a class=\"link\"   href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\" >Cmd Markdown 简明语法手册<i class=\"fas fa-external-link-alt\"></i></a>，进阶用户可以参考 <a class=\"link\"   href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-%E9%AB%98%E9%98%B6%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C\" >Cmd Markdown 高阶语法手册<i class=\"fas fa-external-link-alt\"></i></a> 了解更多高级功能。</p>\n<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>\n<hr>\n<h2 id=\"什么是-Cmd-Markdown\"><a href=\"#什么是-Cmd-Markdown\" class=\"headerlink\" title=\"什么是 Cmd Markdown\"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑&#x2F;发布&#x2F;阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统&#x2F;设备上管理这里的文字。</p>\n<h3 id=\"1-实时同步预览\"><a href=\"#1-实时同步预览\" class=\"headerlink\" title=\"1. 实时同步预览\"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>\n<h3 id=\"2-编辑工具栏\"><a href=\"#2-编辑工具栏\" class=\"headerlink\" title=\"2. 编辑工具栏\"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"https://www.zybuluo.com/static/img/toolbar-editor.png\"\n                      alt=\"tool-editor\"\n                ></p>\n<h3 id=\"3-编辑模式\"><a href=\"#3-编辑模式\" class=\"headerlink\" title=\"3. 编辑模式\"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>\n<h3 id=\"4-实时的云端文稿\"><a href=\"#4-实时的云端文稿\" class=\"headerlink\" title=\"4. 实时的云端文稿\"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>\n<h3 id=\"5-离线模式\"><a href=\"#5-离线模式\" class=\"headerlink\" title=\"5. 离线模式\"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>\n<h3 id=\"6-管理工具栏\"><a href=\"#6-管理工具栏\" class=\"headerlink\" title=\"6. 管理工具栏\"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"https://www.zybuluo.com/static/img/toolbar-manager.jpg\"\n                      alt=\"tool-manager\"\n                ></p>\n<p>通过管理工具栏可以：</p>\n<p><i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿<br><i class=\"icon-trash\"></i> 删除：删除当前的文稿<br><i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class=\"icon-pencil\"></i> 模式：切换 普通&#x2F;Vim&#x2F;Emacs 编辑模式</p>\n<h3 id=\"7-阅读工具栏\"><a href=\"#7-阅读工具栏\" class=\"headerlink\" title=\"7. 阅读工具栏\"></a>7. 阅读工具栏</h3><p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"https://www.zybuluo.com/static/img/toolbar-reader.jpg\"\n                      alt=\"tool-manager\"\n                ></p>\n<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>\n<p>工具栏上的五个图标依次为：</p>\n<p><i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>\n<h3 id=\"8-阅读模式\"><a href=\"#8-阅读模式\" class=\"headerlink\" title=\"8. 阅读模式\"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class=\"icon-desktop\"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>\n<h3 id=\"9-标签、分类和搜索\"><a href=\"#9-标签、分类和搜索\" class=\"headerlink\" title=\"9. 标签、分类和搜索\"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>\n<p>标签： 未分类</p>\n<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"https://www.zybuluo.com/static/img/file-list.png\"\n                      alt=\"file-list\"\n                ></p>\n<h3 id=\"10-文稿发布和分享\"><a href=\"#10-文稿发布和分享\" class=\"headerlink\" title=\"10. 文稿发布和分享\"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>\n<hr>\n<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>\n<p>作者 <a class=\"link\"   href=\"http://weibo.com/ghosert\" >@ghosert<i class=\"fas fa-external-link-alt\"></i></a><br>2016 年 07月 07日    </p>\n<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\\sum_{i&#x3D;1}^n a_i&#x3D;0$， 访问 <a class=\"link\"   href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" >MathJax<i class=\"fas fa-external-link-alt\"></i></a> 参考更多使用方法。</p>\n<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>"},{"title":"Qiniu-image-tool-实现图片一键上传七牛云","author":"熊 超","date":"2018-07-02T06:12:00.000Z","_content":"<!--more-->\n\n&ensp;&ensp;&ensp;&ensp;写博客当然少不了云储存了，那为什么推荐使用七牛云呢，当然是因为七牛云储存提供10G的免费空间,以及每月10G的流量，存放个人博客外链图片最好不过了，七牛云储存还有各种图形处理功能、缩略图、视频存放速度也给力。\n&ensp;&ensp;&ensp;&ensp;qiniu-image-tool是一个提升 markdown 贴图体验的实用小工具，支持windows 及 mac。其中 qiniu-image-tool-win 为windows版本，基于AutoHotkey和qshell实现，一键上传图片或截图至七牛云，获取图片的markdown引用至剪贴板，并自动粘贴到当前编辑器。\n\n\n### 用法\n1. 复制本地图片、视频、js等文件至剪贴板（ctrl+c）or 使用喜欢的截图工具截图 or 直接复制网络图片.\n2. 切换到编辑器，ctrl+alt+v便可以看到图片链接自动粘贴到当前编辑器的光标处（同时链接也会保存在粘贴板里）\n\n### 预览效果图：\n* 本地图片文件上传\n![](http://xiongcao.github.io/blogImage/local.gif)\n\n* 截图上传\n![](http://xiongcao.github.io/blogImage/screenshot.gif)\n\n* 其它文件上传\n![](http://xiongcao.github.io/blogImage/file.gif)\n\n### 安装\n首先从 github 下载release版本（有两个版本：2.0 正式版和1.0 正式版，推荐使用2.0 正式版）并解压到任意目录\n\n目录结构应如下：\n![](http://xiongcao.github.io/blogImage/201808021402_157.png)\n\n其中dump-clipboard-png.ps1是保存截图的powershell脚本，qiniu-image-upload.ahk 即完成文件上传的AutoHotkey脚本。\n\n### 配置脚本\n\n打开settings.ini文件，右键选择编辑脚本使脚本在编辑器中打开，找到下面这段代码:\n\n![](http://xiongcao.github.io/blogImage/201808021405_405.png)\n\n修改这里的五个配置项的值，其中前四个配置项都与七牛账号相关：\n\nACCESS_KEY & SECRET_KEY\n这是qshell操作个人账号的账号凭证，登陆七牛账号后在个人面板->密钥管理中查看，或者直接访问查看。\n\nBUCKET_NAME & BUCKET_DOMAIN\n在对象存储->存储空间列表中选择或新建一个存储空间即bucket，点击该bucket在右边看到一个测试域名，该域名即bucketDomain是图片上传后的访问域名。这里要特别注意域名不要少了前面的 ***http头 *** 和最后的那个 斜杠。\n\n\n### 运行脚本\n配置完成以后以管理员身份运行qImage.exe，这时便可以使用ctrl+alt+v尝试上传图片了。\n\n### 调试\n如果以上操作完成后没有按照预期达到图片上传的效果，感兴趣的筒子可以先自己调试找一下原因，一般报错信息会打印在cmd命令行中，但是cmd窗口一闪而过可能看不清楚，这时候将可选参数DEBUG_MODE = false 改为DEBUG_MODE = true打开调试模式，再次尝试，这时候cmd窗口不会自动关闭，便可以看到具体的报错信息从而对症下药解决问题。\n","source":"_posts/Qiniu-image-tool-实现图片一键上传七牛云.md","raw":"title: Qiniu-image-tool-实现图片一键上传七牛云\nauthor: 熊 超\ntags:\n  - upload\ncategories:\n  - 云储存\ndate: 2018-07-02 14:12:00\n---\n<!--more-->\n\n&ensp;&ensp;&ensp;&ensp;写博客当然少不了云储存了，那为什么推荐使用七牛云呢，当然是因为七牛云储存提供10G的免费空间,以及每月10G的流量，存放个人博客外链图片最好不过了，七牛云储存还有各种图形处理功能、缩略图、视频存放速度也给力。\n&ensp;&ensp;&ensp;&ensp;qiniu-image-tool是一个提升 markdown 贴图体验的实用小工具，支持windows 及 mac。其中 qiniu-image-tool-win 为windows版本，基于AutoHotkey和qshell实现，一键上传图片或截图至七牛云，获取图片的markdown引用至剪贴板，并自动粘贴到当前编辑器。\n\n\n### 用法\n1. 复制本地图片、视频、js等文件至剪贴板（ctrl+c）or 使用喜欢的截图工具截图 or 直接复制网络图片.\n2. 切换到编辑器，ctrl+alt+v便可以看到图片链接自动粘贴到当前编辑器的光标处（同时链接也会保存在粘贴板里）\n\n### 预览效果图：\n* 本地图片文件上传\n![](http://xiongcao.github.io/blogImage/local.gif)\n\n* 截图上传\n![](http://xiongcao.github.io/blogImage/screenshot.gif)\n\n* 其它文件上传\n![](http://xiongcao.github.io/blogImage/file.gif)\n\n### 安装\n首先从 github 下载release版本（有两个版本：2.0 正式版和1.0 正式版，推荐使用2.0 正式版）并解压到任意目录\n\n目录结构应如下：\n![](http://xiongcao.github.io/blogImage/201808021402_157.png)\n\n其中dump-clipboard-png.ps1是保存截图的powershell脚本，qiniu-image-upload.ahk 即完成文件上传的AutoHotkey脚本。\n\n### 配置脚本\n\n打开settings.ini文件，右键选择编辑脚本使脚本在编辑器中打开，找到下面这段代码:\n\n![](http://xiongcao.github.io/blogImage/201808021405_405.png)\n\n修改这里的五个配置项的值，其中前四个配置项都与七牛账号相关：\n\nACCESS_KEY & SECRET_KEY\n这是qshell操作个人账号的账号凭证，登陆七牛账号后在个人面板->密钥管理中查看，或者直接访问查看。\n\nBUCKET_NAME & BUCKET_DOMAIN\n在对象存储->存储空间列表中选择或新建一个存储空间即bucket，点击该bucket在右边看到一个测试域名，该域名即bucketDomain是图片上传后的访问域名。这里要特别注意域名不要少了前面的 ***http头 *** 和最后的那个 斜杠。\n\n\n### 运行脚本\n配置完成以后以管理员身份运行qImage.exe，这时便可以使用ctrl+alt+v尝试上传图片了。\n\n### 调试\n如果以上操作完成后没有按照预期达到图片上传的效果，感兴趣的筒子可以先自己调试找一下原因，一般报错信息会打印在cmd命令行中，但是cmd窗口一闪而过可能看不清楚，这时候将可选参数DEBUG_MODE = false 改为DEBUG_MODE = true打开调试模式，再次尝试，这时候cmd窗口不会自动关闭，便可以看到具体的报错信息从而对症下药解决问题。\n","slug":"Qiniu-image-tool-实现图片一键上传七牛云","published":1,"updated":"2023-07-19T03:07:00.226Z","_id":"clk82gyjg000831644mwk0xeo","comments":1,"layout":"post","photos":[],"link":"","content":"<span id=\"more\"></span>\n\n<p>&ensp;&ensp;&ensp;&ensp;写博客当然少不了云储存了，那为什么推荐使用七牛云呢，当然是因为七牛云储存提供10G的免费空间,以及每月10G的流量，存放个人博客外链图片最好不过了，七牛云储存还有各种图形处理功能、缩略图、视频存放速度也给力。<br>&ensp;&ensp;&ensp;&ensp;qiniu-image-tool是一个提升 markdown 贴图体验的实用小工具，支持windows 及 mac。其中 qiniu-image-tool-win 为windows版本，基于AutoHotkey和qshell实现，一键上传图片或截图至七牛云，获取图片的markdown引用至剪贴板，并自动粘贴到当前编辑器。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><ol>\n<li>复制本地图片、视频、js等文件至剪贴板（ctrl+c）or 使用喜欢的截图工具截图 or 直接复制网络图片.</li>\n<li>切换到编辑器，ctrl+alt+v便可以看到图片链接自动粘贴到当前编辑器的光标处（同时链接也会保存在粘贴板里）</li>\n</ol>\n<h3 id=\"预览效果图：\"><a href=\"#预览效果图：\" class=\"headerlink\" title=\"预览效果图：\"></a>预览效果图：</h3><ul>\n<li><p>本地图片文件上传<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/local.gif\"\n                     \n                ></p>\n</li>\n<li><p>截图上传<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/screenshot.gif\"\n                     \n                ></p>\n</li>\n<li><p>其它文件上传<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/file.gif\"\n                     \n                ></p>\n</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>首先从 github 下载release版本（有两个版本：2.0 正式版和1.0 正式版，推荐使用2.0 正式版）并解压到任意目录</p>\n<p>目录结构应如下：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808021402_157.png\"\n                     \n                ></p>\n<p>其中dump-clipboard-png.ps1是保存截图的powershell脚本，qiniu-image-upload.ahk 即完成文件上传的AutoHotkey脚本。</p>\n<h3 id=\"配置脚本\"><a href=\"#配置脚本\" class=\"headerlink\" title=\"配置脚本\"></a>配置脚本</h3><p>打开settings.ini文件，右键选择编辑脚本使脚本在编辑器中打开，找到下面这段代码:</p>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808021405_405.png\"\n                     \n                ></p>\n<p>修改这里的五个配置项的值，其中前四个配置项都与七牛账号相关：</p>\n<p>ACCESS_KEY &amp; SECRET_KEY<br>这是qshell操作个人账号的账号凭证，登陆七牛账号后在个人面板-&gt;密钥管理中查看，或者直接访问查看。</p>\n<p>BUCKET_NAME &amp; BUCKET_DOMAIN<br>在对象存储-&gt;存储空间列表中选择或新建一个存储空间即bucket，点击该bucket在右边看到一个测试域名，该域名即bucketDomain是图片上传后的访问域名。这里要特别注意域名不要少了前面的 ***http头 *** 和最后的那个 斜杠。</p>\n<h3 id=\"运行脚本\"><a href=\"#运行脚本\" class=\"headerlink\" title=\"运行脚本\"></a>运行脚本</h3><p>配置完成以后以管理员身份运行qImage.exe，这时便可以使用ctrl+alt+v尝试上传图片了。</p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>如果以上操作完成后没有按照预期达到图片上传的效果，感兴趣的筒子可以先自己调试找一下原因，一般报错信息会打印在cmd命令行中，但是cmd窗口一闪而过可能看不清楚，这时候将可选参数DEBUG_MODE &#x3D; false 改为DEBUG_MODE &#x3D; true打开调试模式，再次尝试，这时候cmd窗口不会自动关闭，便可以看到具体的报错信息从而对症下药解决问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>&ensp;&ensp;&ensp;&ensp;写博客当然少不了云储存了，那为什么推荐使用七牛云呢，当然是因为七牛云储存提供10G的免费空间,以及每月10G的流量，存放个人博客外链图片最好不过了，七牛云储存还有各种图形处理功能、缩略图、视频存放速度也给力。<br>&ensp;&ensp;&ensp;&ensp;qiniu-image-tool是一个提升 markdown 贴图体验的实用小工具，支持windows 及 mac。其中 qiniu-image-tool-win 为windows版本，基于AutoHotkey和qshell实现，一键上传图片或截图至七牛云，获取图片的markdown引用至剪贴板，并自动粘贴到当前编辑器。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><ol>\n<li>复制本地图片、视频、js等文件至剪贴板（ctrl+c）or 使用喜欢的截图工具截图 or 直接复制网络图片.</li>\n<li>切换到编辑器，ctrl+alt+v便可以看到图片链接自动粘贴到当前编辑器的光标处（同时链接也会保存在粘贴板里）</li>\n</ol>\n<h3 id=\"预览效果图：\"><a href=\"#预览效果图：\" class=\"headerlink\" title=\"预览效果图：\"></a>预览效果图：</h3><ul>\n<li><p>本地图片文件上传<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/local.gif\"\n                     \n                ></p>\n</li>\n<li><p>截图上传<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/screenshot.gif\"\n                     \n                ></p>\n</li>\n<li><p>其它文件上传<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/file.gif\"\n                     \n                ></p>\n</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>首先从 github 下载release版本（有两个版本：2.0 正式版和1.0 正式版，推荐使用2.0 正式版）并解压到任意目录</p>\n<p>目录结构应如下：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808021402_157.png\"\n                     \n                ></p>\n<p>其中dump-clipboard-png.ps1是保存截图的powershell脚本，qiniu-image-upload.ahk 即完成文件上传的AutoHotkey脚本。</p>\n<h3 id=\"配置脚本\"><a href=\"#配置脚本\" class=\"headerlink\" title=\"配置脚本\"></a>配置脚本</h3><p>打开settings.ini文件，右键选择编辑脚本使脚本在编辑器中打开，找到下面这段代码:</p>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808021405_405.png\"\n                     \n                ></p>\n<p>修改这里的五个配置项的值，其中前四个配置项都与七牛账号相关：</p>\n<p>ACCESS_KEY &amp; SECRET_KEY<br>这是qshell操作个人账号的账号凭证，登陆七牛账号后在个人面板-&gt;密钥管理中查看，或者直接访问查看。</p>\n<p>BUCKET_NAME &amp; BUCKET_DOMAIN<br>在对象存储-&gt;存储空间列表中选择或新建一个存储空间即bucket，点击该bucket在右边看到一个测试域名，该域名即bucketDomain是图片上传后的访问域名。这里要特别注意域名不要少了前面的 ***http头 *** 和最后的那个 斜杠。</p>\n<h3 id=\"运行脚本\"><a href=\"#运行脚本\" class=\"headerlink\" title=\"运行脚本\"></a>运行脚本</h3><p>配置完成以后以管理员身份运行qImage.exe，这时便可以使用ctrl+alt+v尝试上传图片了。</p>\n<h3 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h3><p>如果以上操作完成后没有按照预期达到图片上传的效果，感兴趣的筒子可以先自己调试找一下原因，一般报错信息会打印在cmd命令行中，但是cmd窗口一闪而过可能看不清楚，这时候将可选参数DEBUG_MODE &#x3D; false 改为DEBUG_MODE &#x3D; true打开调试模式，再次尝试，这时候cmd窗口不会自动关闭，便可以看到具体的报错信息从而对症下药解决问题。</p>"},{"title":"css常用奇淫技巧(不定期更新)","author":"熊 超","date":"2018-08-30T01:43:00.000Z","_content":"<!-- more -->\n### 一、常用技巧\n\n#### 清除浮动\n1. 添加新的元素 、应用 clear：both; \n2. 父级定义 overflow: auto;\n3. 父元素也设置浮动;\n4. 使用br标签和其自身的html属性:《br clear=\"all\"/》 clear=\"all | left | right | none\";\n5. 最高大上的方法，强烈推荐 parentDom:after{content: \" \";display: block;clear: both;}\n\n\n\n#### 垂直居中\n\n``` html\n<div class=\"box box1\">\n  <span>垂直居中</span>\n</div>\n```\n``` css\n.box {\n  width: 200px;\n  height: 200px;\n  background: red;\n} \n```\n\n##### 方法1：table-cell\n\n``` css \n.box1 {\n  display: table-cell;\n  vertical-align: middle;\n  text-align: center;\n}\n```\n##### 方法2：display:flex（部分低版本浏览器不兼容）\n\n``` css\n.box2 {\n  display: flex;\n  justify-content:center;\n  align-items:Center;\n}\n```\n\n##### 方法3：绝对定位和负边距(已知元素高度)\n``` css\n.box3 {position:relative;}\n.box3 span {\n    position: absolute;\n    width:100px;\n    height: 50px;\n    top:50%;\n    left:50%;\n    margin-left:-50px;\n    margin-top:-25px;\n    text-align: center;\n}\n```\n\n##### 方法4：绝对定位和0(已知元素高度)\n``` css\n.box {position:relative;}\n\n.box4 span {\n  width: 50%; \n  height: 50%; \n  background: #000;\n  overflow: auto; \n  margin: auto; \n  position: absolute; \n  top: 0; left: 0; bottom: 0; right: 0; \n}\n```\n\n##### 方法5：display:flex和margin:auto\n``` css\n.box5 {\n    display: flex;\n    text-align: center;\n}\n.box5 span {margin: auto;}\n```\n\n#### 文本超出部分隐藏\n\n##### 单行文本超出部分隐藏\n``` css\n#ellipsis {\n  overflow: hidden;   /*超出的文本隐藏*/\n  text-overflow: ellipsis;    /*溢出用省略号显示*/\n  white-space: nowrap;    /*溢出不换行*/\n}\n```\n\n##### 多行文本超出部分隐藏\n``` css\n#ellipsis {\n  overflow: hidden; \n  display: -webkit-box;   /*作为弹性伸缩盒子模型显示*/\n  -webkit-box-orient: vertical;   /*设置伸缩盒子的子元素排列方式--从上到下垂直排列*/\n  -webkit-line-clamp: 2;   /*显示的行*/\n}\n```\n\n### 二、形状技巧\n\n##### 三角形\n\n``` css\n#triangle1 {\n  width: 0;\n  height: 0;\n  border-top: 50px solid red;\n  border-right: 50px solid orange;\n  border-bottom: 50px solid yellow;\n  border-left: 50px solid green;\n}\n\n#triangle2 {\n  width: 0;\n  height: 0;\n  border-top: 50px solid red;\n  border-right: 50px solid transparent;\n  border-bottom: 50px solid transparent;\n  border-left: 50px solid transparent;\n}\n```\n![](http://xiongcao.github.io/blogImage/201810171448_18.png)\n\n##### 未读数量\n``` css\n#superscript {\n    width: 50px;\n    height: 50px;\n    background: red;\n    padding:0 20px;\n    border-radius: 20px;\n}\n```\n![](http://xiongcao.github.io/blogImage/201810171448_144.png)\n\n##### 字体边框同色\n``` css\n#app{\n    width: 100px;\n    height: 100px;\n    color: red;\n    font-size: 30px;\n\n    /*方案一    CSS3 currentColor 表示当前的文字颜色*/\n    /* border: 10px solid currentColor; */\n    \n    /*方案二    border 的默认值 (initial) 就是 currentColor*/\n    border: 10px solid;\n  }\n```\n![](http://xiongcao.github.io/blogImage/201810171448_736.png)\n\n##### 放大镜\n``` css\n#div5{\n    width: 50px;\n    height: 50px;\n    border: 5px solid #000000;\n    border-radius: 50%;\n    position: relative;\n}\n\n#div5::after{\n    content: ' ';\n    display: block;\n    width: 8px;\n    height: 60px;\n    border-radius: 5px;\n    background: #000000;\n    position: absolute;\n    right: -22px;    \n    top: 38px;\n    transform: rotate(-45deg);\n}\n```\n![](http://xiongcao.github.io/blogImage/201810171449_641.png)","source":"_posts/css常用奇淫技巧-不断更新.md","raw":"title: css常用奇淫技巧(不定期更新)\nauthor: 熊 超\ntags:\n  - CSS\ncategories:\n  - 前端\ndate: 2018-08-30 09:43:00\n---\n<!-- more -->\n### 一、常用技巧\n\n#### 清除浮动\n1. 添加新的元素 、应用 clear：both; \n2. 父级定义 overflow: auto;\n3. 父元素也设置浮动;\n4. 使用br标签和其自身的html属性:《br clear=\"all\"/》 clear=\"all | left | right | none\";\n5. 最高大上的方法，强烈推荐 parentDom:after{content: \" \";display: block;clear: both;}\n\n\n\n#### 垂直居中\n\n``` html\n<div class=\"box box1\">\n  <span>垂直居中</span>\n</div>\n```\n``` css\n.box {\n  width: 200px;\n  height: 200px;\n  background: red;\n} \n```\n\n##### 方法1：table-cell\n\n``` css \n.box1 {\n  display: table-cell;\n  vertical-align: middle;\n  text-align: center;\n}\n```\n##### 方法2：display:flex（部分低版本浏览器不兼容）\n\n``` css\n.box2 {\n  display: flex;\n  justify-content:center;\n  align-items:Center;\n}\n```\n\n##### 方法3：绝对定位和负边距(已知元素高度)\n``` css\n.box3 {position:relative;}\n.box3 span {\n    position: absolute;\n    width:100px;\n    height: 50px;\n    top:50%;\n    left:50%;\n    margin-left:-50px;\n    margin-top:-25px;\n    text-align: center;\n}\n```\n\n##### 方法4：绝对定位和0(已知元素高度)\n``` css\n.box {position:relative;}\n\n.box4 span {\n  width: 50%; \n  height: 50%; \n  background: #000;\n  overflow: auto; \n  margin: auto; \n  position: absolute; \n  top: 0; left: 0; bottom: 0; right: 0; \n}\n```\n\n##### 方法5：display:flex和margin:auto\n``` css\n.box5 {\n    display: flex;\n    text-align: center;\n}\n.box5 span {margin: auto;}\n```\n\n#### 文本超出部分隐藏\n\n##### 单行文本超出部分隐藏\n``` css\n#ellipsis {\n  overflow: hidden;   /*超出的文本隐藏*/\n  text-overflow: ellipsis;    /*溢出用省略号显示*/\n  white-space: nowrap;    /*溢出不换行*/\n}\n```\n\n##### 多行文本超出部分隐藏\n``` css\n#ellipsis {\n  overflow: hidden; \n  display: -webkit-box;   /*作为弹性伸缩盒子模型显示*/\n  -webkit-box-orient: vertical;   /*设置伸缩盒子的子元素排列方式--从上到下垂直排列*/\n  -webkit-line-clamp: 2;   /*显示的行*/\n}\n```\n\n### 二、形状技巧\n\n##### 三角形\n\n``` css\n#triangle1 {\n  width: 0;\n  height: 0;\n  border-top: 50px solid red;\n  border-right: 50px solid orange;\n  border-bottom: 50px solid yellow;\n  border-left: 50px solid green;\n}\n\n#triangle2 {\n  width: 0;\n  height: 0;\n  border-top: 50px solid red;\n  border-right: 50px solid transparent;\n  border-bottom: 50px solid transparent;\n  border-left: 50px solid transparent;\n}\n```\n![](http://xiongcao.github.io/blogImage/201810171448_18.png)\n\n##### 未读数量\n``` css\n#superscript {\n    width: 50px;\n    height: 50px;\n    background: red;\n    padding:0 20px;\n    border-radius: 20px;\n}\n```\n![](http://xiongcao.github.io/blogImage/201810171448_144.png)\n\n##### 字体边框同色\n``` css\n#app{\n    width: 100px;\n    height: 100px;\n    color: red;\n    font-size: 30px;\n\n    /*方案一    CSS3 currentColor 表示当前的文字颜色*/\n    /* border: 10px solid currentColor; */\n    \n    /*方案二    border 的默认值 (initial) 就是 currentColor*/\n    border: 10px solid;\n  }\n```\n![](http://xiongcao.github.io/blogImage/201810171448_736.png)\n\n##### 放大镜\n``` css\n#div5{\n    width: 50px;\n    height: 50px;\n    border: 5px solid #000000;\n    border-radius: 50%;\n    position: relative;\n}\n\n#div5::after{\n    content: ' ';\n    display: block;\n    width: 8px;\n    height: 60px;\n    border-radius: 5px;\n    background: #000000;\n    position: absolute;\n    right: -22px;    \n    top: 38px;\n    transform: rotate(-45deg);\n}\n```\n![](http://xiongcao.github.io/blogImage/201810171449_641.png)","slug":"css常用奇淫技巧-不断更新","published":1,"updated":"2023-07-19T03:04:27.574Z","_id":"clk82gyjj000b316480s21akn","comments":1,"layout":"post","photos":[],"link":"","content":"<span id=\"more\"></span>\n<h3 id=\"一、常用技巧\"><a href=\"#一、常用技巧\" class=\"headerlink\" title=\"一、常用技巧\"></a>一、常用技巧</h3><h4 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h4><ol>\n<li>添加新的元素 、应用 clear：both; </li>\n<li>父级定义 overflow: auto;</li>\n<li>父元素也设置浮动;</li>\n<li>使用br标签和其自身的html属性:《br clear&#x3D;”all”&#x2F;》 clear&#x3D;”all | left | right | none”;</li>\n<li>最高大上的方法，强烈推荐 parentDom:after{content: “ “;display: block;clear: both;}</li>\n</ol>\n<h4 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box box1&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>垂直居中<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"方法1：table-cell\"><a href=\"#方法1：table-cell\" class=\"headerlink\" title=\"方法1：table-cell\"></a>方法1：table-cell</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"方法2：display-flex（部分低版本浏览器不兼容）\"><a href=\"#方法2：display-flex（部分低版本浏览器不兼容）\" class=\"headerlink\" title=\"方法2：display:flex（部分低版本浏览器不兼容）\"></a>方法2：display:flex（部分低版本浏览器不兼容）</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>:center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>:Center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"方法3：绝对定位和负边距-已知元素高度\"><a href=\"#方法3：绝对定位和负边距-已知元素高度\" class=\"headerlink\" title=\"方法3：绝对定位和负边距(已知元素高度)\"></a>方法3：绝对定位和负边距(已知元素高度)</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box3</span> &#123;<span class=\"attribute\">position</span>:relative;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box3</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>:-<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>:-<span class=\"number\">25px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"方法4：绝对定位和0-已知元素高度\"><a href=\"#方法4：绝对定位和0-已知元素高度\" class=\"headerlink\" title=\"方法4：绝对定位和0(已知元素高度)\"></a>方法4：绝对定位和0(已知元素高度)</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;<span class=\"attribute\">position</span>:relative;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box4</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50%</span>; </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: auto; </span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto; </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute; </span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; <span class=\"attribute\">left</span>: <span class=\"number\">0</span>; <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>; <span class=\"attribute\">right</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"方法5：display-flex和margin-auto\"><a href=\"#方法5：display-flex和margin-auto\" class=\"headerlink\" title=\"方法5：display:flex和margin:auto\"></a>方法5：display:flex和margin:auto</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box5</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box5</span> <span class=\"selector-tag\">span</span> &#123;<span class=\"attribute\">margin</span>: auto;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文本超出部分隐藏\"><a href=\"#文本超出部分隐藏\" class=\"headerlink\" title=\"文本超出部分隐藏\"></a>文本超出部分隐藏</h4><h5 id=\"单行文本超出部分隐藏\"><a href=\"#单行文本超出部分隐藏\" class=\"headerlink\" title=\"单行文本超出部分隐藏\"></a>单行文本超出部分隐藏</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#ellipsis</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;   <span class=\"comment\">/*超出的文本隐藏*/</span></span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis;    <span class=\"comment\">/*溢出用省略号显示*/</span></span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>: nowrap;    <span class=\"comment\">/*溢出不换行*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多行文本超出部分隐藏\"><a href=\"#多行文本超出部分隐藏\" class=\"headerlink\" title=\"多行文本超出部分隐藏\"></a>多行文本超出部分隐藏</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#ellipsis</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; </span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-box;   <span class=\"comment\">/*作为弹性伸缩盒子模型显示*/</span></span><br><span class=\"line\">  -webkit-box-orient: vertical;   <span class=\"comment\">/*设置伸缩盒子的子元素排列方式--从上到下垂直排列*/</span></span><br><span class=\"line\">  -webkit-line-clamp: <span class=\"number\">2</span>;   <span class=\"comment\">/*显示的行*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、形状技巧\"><a href=\"#二、形状技巧\" class=\"headerlink\" title=\"二、形状技巧\"></a>二、形状技巧</h3><h5 id=\"三角形\"><a href=\"#三角形\" class=\"headerlink\" title=\"三角形\"></a>三角形</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#triangle1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid red;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid orange;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid yellow;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#triangle2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid red;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201810171448_18.png\"\n                     \n                ></p>\n<h5 id=\"未读数量\"><a href=\"#未读数量\" class=\"headerlink\" title=\"未读数量\"></a>未读数量</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#superscript</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201810171448_144.png\"\n                     \n                ></p>\n<h5 id=\"字体边框同色\"><a href=\"#字体边框同色\" class=\"headerlink\" title=\"字体边框同色\"></a>字体边框同色</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#app</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*方案一    CSS3 currentColor 表示当前的文字颜色*/</span></span><br><span class=\"line\">    <span class=\"comment\">/* border: 10px solid currentColor; */</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*方案二    border 的默认值 (initial) 就是 currentColor*/</span></span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">10px</span> solid;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201810171448_736.png\"\n                     \n                ></p>\n<h5 id=\"放大镜\"><a href=\"#放大镜\" class=\"headerlink\" title=\"放大镜\"></a>放大镜</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#div5</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid <span class=\"number\">#000000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#div5</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: -<span class=\"number\">22px</span>;    </span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">38px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(-<span class=\"number\">45deg</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201810171449_641.png\"\n                     \n                ></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、常用技巧\"><a href=\"#一、常用技巧\" class=\"headerlink\" title=\"一、常用技巧\"></a>一、常用技巧</h3><h4 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h4><ol>\n<li>添加新的元素 、应用 clear：both; </li>\n<li>父级定义 overflow: auto;</li>\n<li>父元素也设置浮动;</li>\n<li>使用br标签和其自身的html属性:《br clear&#x3D;”all”&#x2F;》 clear&#x3D;”all | left | right | none”;</li>\n<li>最高大上的方法，强烈推荐 parentDom:after{content: “ “;display: block;clear: both;}</li>\n</ol>\n<h4 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box box1&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>垂直居中<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"方法1：table-cell\"><a href=\"#方法1：table-cell\" class=\"headerlink\" title=\"方法1：table-cell\"></a>方法1：table-cell</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"方法2：display-flex（部分低版本浏览器不兼容）\"><a href=\"#方法2：display-flex（部分低版本浏览器不兼容）\" class=\"headerlink\" title=\"方法2：display:flex（部分低版本浏览器不兼容）\"></a>方法2：display:flex（部分低版本浏览器不兼容）</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>:center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>:Center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"方法3：绝对定位和负边距-已知元素高度\"><a href=\"#方法3：绝对定位和负边距-已知元素高度\" class=\"headerlink\" title=\"方法3：绝对定位和负边距(已知元素高度)\"></a>方法3：绝对定位和负边距(已知元素高度)</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box3</span> &#123;<span class=\"attribute\">position</span>:relative;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box3</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>:-<span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>:-<span class=\"number\">25px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"方法4：绝对定位和0-已知元素高度\"><a href=\"#方法4：绝对定位和0-已知元素高度\" class=\"headerlink\" title=\"方法4：绝对定位和0(已知元素高度)\"></a>方法4：绝对定位和0(已知元素高度)</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;<span class=\"attribute\">position</span>:relative;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box4</span> <span class=\"selector-tag\">span</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>; </span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50%</span>; </span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: auto; </span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto; </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute; </span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>; <span class=\"attribute\">left</span>: <span class=\"number\">0</span>; <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>; <span class=\"attribute\">right</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"方法5：display-flex和margin-auto\"><a href=\"#方法5：display-flex和margin-auto\" class=\"headerlink\" title=\"方法5：display:flex和margin:auto\"></a>方法5：display:flex和margin:auto</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box5</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box5</span> <span class=\"selector-tag\">span</span> &#123;<span class=\"attribute\">margin</span>: auto;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文本超出部分隐藏\"><a href=\"#文本超出部分隐藏\" class=\"headerlink\" title=\"文本超出部分隐藏\"></a>文本超出部分隐藏</h4><h5 id=\"单行文本超出部分隐藏\"><a href=\"#单行文本超出部分隐藏\" class=\"headerlink\" title=\"单行文本超出部分隐藏\"></a>单行文本超出部分隐藏</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#ellipsis</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;   <span class=\"comment\">/*超出的文本隐藏*/</span></span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis;    <span class=\"comment\">/*溢出用省略号显示*/</span></span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>: nowrap;    <span class=\"comment\">/*溢出不换行*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多行文本超出部分隐藏\"><a href=\"#多行文本超出部分隐藏\" class=\"headerlink\" title=\"多行文本超出部分隐藏\"></a>多行文本超出部分隐藏</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#ellipsis</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden; </span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-box;   <span class=\"comment\">/*作为弹性伸缩盒子模型显示*/</span></span><br><span class=\"line\">  -webkit-box-orient: vertical;   <span class=\"comment\">/*设置伸缩盒子的子元素排列方式--从上到下垂直排列*/</span></span><br><span class=\"line\">  -webkit-line-clamp: <span class=\"number\">2</span>;   <span class=\"comment\">/*显示的行*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、形状技巧\"><a href=\"#二、形状技巧\" class=\"headerlink\" title=\"二、形状技巧\"></a>二、形状技巧</h3><h5 id=\"三角形\"><a href=\"#三角形\" class=\"headerlink\" title=\"三角形\"></a>三角形</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#triangle1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid red;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid orange;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid yellow;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#triangle2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid red;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201810171448_18.png\"\n                     \n                ></p>\n<h5 id=\"未读数量\"><a href=\"#未读数量\" class=\"headerlink\" title=\"未读数量\"></a>未读数量</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#superscript</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>:<span class=\"number\">0</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201810171448_144.png\"\n                     \n                ></p>\n<h5 id=\"字体边框同色\"><a href=\"#字体边框同色\" class=\"headerlink\" title=\"字体边框同色\"></a>字体边框同色</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#app</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*方案一    CSS3 currentColor 表示当前的文字颜色*/</span></span><br><span class=\"line\">    <span class=\"comment\">/* border: 10px solid currentColor; */</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/*方案二    border 的默认值 (initial) 就是 currentColor*/</span></span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">10px</span> solid;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201810171448_736.png\"\n                     \n                ></p>\n<h5 id=\"放大镜\"><a href=\"#放大镜\" class=\"headerlink\" title=\"放大镜\"></a>放大镜</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#div5</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid <span class=\"number\">#000000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#div5</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">right</span>: -<span class=\"number\">22px</span>;    </span><br><span class=\"line\">    <span class=\"attribute\">top</span>: <span class=\"number\">38px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(-<span class=\"number\">45deg</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201810171449_641.png\"\n                     \n                ></p>"},{"title":"sessionStorage和localStorage解释及区别","author":"熊 超","date":"2018-08-07T06:33:00.000Z","_content":"<!--more-->\n\n###  HTML5的本地存储\n\nHTML5中与本地存储相关的两个重要内容：Web Storage与本地数据库。其中，Web Storage存储机制是对HTML4中cookie存储机制的一个改善。由于cookie存储机制有很多缺点，HTML5不再使用它，转而使用改良后的Web Storage存储机制。本地数据库是HTML5中新增的一个功能，使用它可以在客户端本地建立一个数据库，原本必须保存在服务器端数据库中的内容现在可以直接保存在客户端本地了，这大大减轻了服务器端的负担，同时也加快了访问数据的速度。\n\n#### 本文主要来讲解Web Storage\n\n我们知道，在HTML4中可以使用cookie在客户端保存诸如用户名等简单的用户信息，但是，通过长期的使用，你会发现，用cookie存储永久数据存在以下几个问题：\n\n\n1.大小：cookie的大小被限制在4KB。\n\n2.带宽：cookie是随HTTP事务一起被发送的，因此会浪费一部分发送cookie时使用的带宽。\n\n3.复杂性：要正确的操纵cookie是很困难的。\n\n针对这些问题，在HTML5中，重新提供了一种在客户端本地保存数据的功能，它就是Web Storage。\n\n#### 具体来说，Web Storage又分为两种：\n\n1.sessionStorage：将数据保存在session对象中。所谓session，是指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个网站所花费的时间。session对象可以用来保存在这段时间内所要求保存的任何数据。\n\n2.localStorage：将数据保存在客户端本地的硬件设备(通常指硬盘，也可以是其他硬件设备)中，即使浏览器被关闭了，该数据仍然存在，下次打开浏览器访问网站时仍然可以继续使用。\n\n这两者的区别在于，sessionStorage为临时保存，而localStorage为永久保存。\n\n#### 到目前为止，Firefox3.6以上、Chrome6以上、Safari 5以上、Pera10.50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。\n\n\nWebStorage的目的是克服由cookie所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。\n\n#### WebStorage两个主要目标： \n（1）提供一种在cookie之外存储会话数据的路径。\n（2）提供一种存储大量可以跨会话存在的数据的机制。\n\n#### HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。\n\n1、生命周期：localStorage:localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。localStorage除非主动删除数据，否则数据永远不会消失。\n　　sessionStorage的生命周期是在仅在当前会话下有效。sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。\n\n2、存储大小：localStorage和sessionStorage的存储数据大小一般都是：5MB\n\n3、存储位置：localStorage和sessionStorage都保存在客户端，不与服务器进行交互通信。\n\n4、存储内容类型：localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理\n\n5、获取方式：localStorage：window.localStorage;；sessionStorage：window.sessionStorage;\n\n6、应用场景：localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。sessionStorage：敏感账号一次性登录；\n\n#### WebStorage的优点：\n\n（1）存储空间更大：cookie为4KB，而WebStorage是5MB；\n\n（2）节省网络流量：WebStorage不会传送到服务器，存储在本地的数据可以直接获取，也不会像cookie一样每次请求都会传送到服务器，所以减少了客户端和服务器端的交互，节省了网络流量；\n\n（3）对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage会非常方便；\n\n（4）快速显示：有的数据存储在WebStorage上，再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快；\n\n（5）安全性：WebStorage不会随着HTTP header发送到服务器端，所以安全性相对于cookie来说比较高一些，不会担心截获，但是仍然存在伪造问题；\n\n#### WebStorage提供了一些方法，数据操作比cookie方便；\n1. setItem（key, value） ——  保存数据，以键值对的方式储存信息。\n\n2. getItem（key） ——  获取数据，将键值传入，即可获取到对应的value值。\n\n3. removeItem（key） ——  删除单个数据，根据键值移除对应的信息。\n\n4. clear（） ——  删除所有的数据\n\n5. key（index） —— 获取某个索引的key\n\n#### cookie 、sessionStorage与localStorage的区别\n<table><col width=\"100\"/><tr><th>特性</th><th>cookie</th><th>sessionStorage</th><th>localStorage</th></tr><tr><td>数据生命期</td><td>生成时就会被指定一个maxAge值，这就是cookie的生存周期，在这个周期内cookie有效，默认关闭浏览器失效</td><td>页面会话期间可用</td><td>除非数据被清除，否则一直存在</td></tr><tr><td>存放数据大小</td><td>4K左右（因为每次http请求都会携带cookie）</td><td colspan=\"2\">一般5M或更大<a href=\"https://www.html5rocks.com/en/tutorials/offline/quota-research/#toc-introduction\" target=\"_blank\">详细看这(需科学上网)</a></td></tr><tr><td>与服务器通信</td><td>由对服务器的请求来传递，每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td><td colspan=\"2\">数据不是由每个服务器请求传递的，而是只有在请求时使用数据，不参与和服务器的通信</td></tr><tr><td>易用性</td><td>cookie需要自己封装setCookie，getCookie</td><td colspan=\"2\">可以用源生接口，也可再次封装来对Object和Array有更好的支持</td></tr><tr><td>共同点</td><td colspan=\"3\">都是保存在浏览器端，和服务器端的session机制不同<a href=\"http://blog.csdn.net/fangaoxin/article/details/6952954/\" target=\"_blank\">（这里有一篇很好的介绍cookie和session的文章）<a/></td></tr></table>\n\n#### 示例：\n（1） 新建两个文件：\n![](http://xiongcao.github.io/blogImage/201808081728_587.png)\n\n\n``` html\n<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <a href=\"./test.html\" target=\"_blank\">跳到test.html</a>\n</body>\n</html>\n<script>\n    localStorage.setItem(\"xiongchao\",123);\n    sessionStorage.setItem(\"xiongchao\",456);\n</script>\n```\n\n（2） 部署服务（推荐使用nignx做反向代理,比tomcat简单粗暴，也可以不用这一步，只是为了模拟真实网站会话）\n\n（3） 打开index.html,并使用链接打开test.html\n![](http://xiongcao.github.io/blogImage/201808081739_652.png)\n![](http://xiongcao.github.io/blogImage/201808081739_523.png)\n\n两个页面的结果是一样的，这是一次会话，sessionStorage储存的内容被保存下来。\n\n（4） 单独打开test.html,会发现sessionStorage是空的。\n![](http://xiongcao.github.io/blogImage/201808081739_652.png)\n![](http://xiongcao.github.io/blogImage/201808081742_158.png)\n\n\n","source":"_posts/essionStorage和localStorage解释及区别.md","raw":"title: sessionStorage和localStorage解释及区别\nauthor: 熊 超\ntags:\n  - sessionStorage\n  - localStorage\ncategories:\n  - javascript\ndate: 2018-08-07 14:33:00\n---\n<!--more-->\n\n###  HTML5的本地存储\n\nHTML5中与本地存储相关的两个重要内容：Web Storage与本地数据库。其中，Web Storage存储机制是对HTML4中cookie存储机制的一个改善。由于cookie存储机制有很多缺点，HTML5不再使用它，转而使用改良后的Web Storage存储机制。本地数据库是HTML5中新增的一个功能，使用它可以在客户端本地建立一个数据库，原本必须保存在服务器端数据库中的内容现在可以直接保存在客户端本地了，这大大减轻了服务器端的负担，同时也加快了访问数据的速度。\n\n#### 本文主要来讲解Web Storage\n\n我们知道，在HTML4中可以使用cookie在客户端保存诸如用户名等简单的用户信息，但是，通过长期的使用，你会发现，用cookie存储永久数据存在以下几个问题：\n\n\n1.大小：cookie的大小被限制在4KB。\n\n2.带宽：cookie是随HTTP事务一起被发送的，因此会浪费一部分发送cookie时使用的带宽。\n\n3.复杂性：要正确的操纵cookie是很困难的。\n\n针对这些问题，在HTML5中，重新提供了一种在客户端本地保存数据的功能，它就是Web Storage。\n\n#### 具体来说，Web Storage又分为两种：\n\n1.sessionStorage：将数据保存在session对象中。所谓session，是指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个网站所花费的时间。session对象可以用来保存在这段时间内所要求保存的任何数据。\n\n2.localStorage：将数据保存在客户端本地的硬件设备(通常指硬盘，也可以是其他硬件设备)中，即使浏览器被关闭了，该数据仍然存在，下次打开浏览器访问网站时仍然可以继续使用。\n\n这两者的区别在于，sessionStorage为临时保存，而localStorage为永久保存。\n\n#### 到目前为止，Firefox3.6以上、Chrome6以上、Safari 5以上、Pera10.50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。\n\n\nWebStorage的目的是克服由cookie所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。\n\n#### WebStorage两个主要目标： \n（1）提供一种在cookie之外存储会话数据的路径。\n（2）提供一种存储大量可以跨会话存在的数据的机制。\n\n#### HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。\n\n1、生命周期：localStorage:localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。localStorage除非主动删除数据，否则数据永远不会消失。\n　　sessionStorage的生命周期是在仅在当前会话下有效。sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。\n\n2、存储大小：localStorage和sessionStorage的存储数据大小一般都是：5MB\n\n3、存储位置：localStorage和sessionStorage都保存在客户端，不与服务器进行交互通信。\n\n4、存储内容类型：localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理\n\n5、获取方式：localStorage：window.localStorage;；sessionStorage：window.sessionStorage;\n\n6、应用场景：localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。sessionStorage：敏感账号一次性登录；\n\n#### WebStorage的优点：\n\n（1）存储空间更大：cookie为4KB，而WebStorage是5MB；\n\n（2）节省网络流量：WebStorage不会传送到服务器，存储在本地的数据可以直接获取，也不会像cookie一样每次请求都会传送到服务器，所以减少了客户端和服务器端的交互，节省了网络流量；\n\n（3）对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage会非常方便；\n\n（4）快速显示：有的数据存储在WebStorage上，再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快；\n\n（5）安全性：WebStorage不会随着HTTP header发送到服务器端，所以安全性相对于cookie来说比较高一些，不会担心截获，但是仍然存在伪造问题；\n\n#### WebStorage提供了一些方法，数据操作比cookie方便；\n1. setItem（key, value） ——  保存数据，以键值对的方式储存信息。\n\n2. getItem（key） ——  获取数据，将键值传入，即可获取到对应的value值。\n\n3. removeItem（key） ——  删除单个数据，根据键值移除对应的信息。\n\n4. clear（） ——  删除所有的数据\n\n5. key（index） —— 获取某个索引的key\n\n#### cookie 、sessionStorage与localStorage的区别\n<table><col width=\"100\"/><tr><th>特性</th><th>cookie</th><th>sessionStorage</th><th>localStorage</th></tr><tr><td>数据生命期</td><td>生成时就会被指定一个maxAge值，这就是cookie的生存周期，在这个周期内cookie有效，默认关闭浏览器失效</td><td>页面会话期间可用</td><td>除非数据被清除，否则一直存在</td></tr><tr><td>存放数据大小</td><td>4K左右（因为每次http请求都会携带cookie）</td><td colspan=\"2\">一般5M或更大<a href=\"https://www.html5rocks.com/en/tutorials/offline/quota-research/#toc-introduction\" target=\"_blank\">详细看这(需科学上网)</a></td></tr><tr><td>与服务器通信</td><td>由对服务器的请求来传递，每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td><td colspan=\"2\">数据不是由每个服务器请求传递的，而是只有在请求时使用数据，不参与和服务器的通信</td></tr><tr><td>易用性</td><td>cookie需要自己封装setCookie，getCookie</td><td colspan=\"2\">可以用源生接口，也可再次封装来对Object和Array有更好的支持</td></tr><tr><td>共同点</td><td colspan=\"3\">都是保存在浏览器端，和服务器端的session机制不同<a href=\"http://blog.csdn.net/fangaoxin/article/details/6952954/\" target=\"_blank\">（这里有一篇很好的介绍cookie和session的文章）<a/></td></tr></table>\n\n#### 示例：\n（1） 新建两个文件：\n![](http://xiongcao.github.io/blogImage/201808081728_587.png)\n\n\n``` html\n<!-- index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <a href=\"./test.html\" target=\"_blank\">跳到test.html</a>\n</body>\n</html>\n<script>\n    localStorage.setItem(\"xiongchao\",123);\n    sessionStorage.setItem(\"xiongchao\",456);\n</script>\n```\n\n（2） 部署服务（推荐使用nignx做反向代理,比tomcat简单粗暴，也可以不用这一步，只是为了模拟真实网站会话）\n\n（3） 打开index.html,并使用链接打开test.html\n![](http://xiongcao.github.io/blogImage/201808081739_652.png)\n![](http://xiongcao.github.io/blogImage/201808081739_523.png)\n\n两个页面的结果是一样的，这是一次会话，sessionStorage储存的内容被保存下来。\n\n（4） 单独打开test.html,会发现sessionStorage是空的。\n![](http://xiongcao.github.io/blogImage/201808081739_652.png)\n![](http://xiongcao.github.io/blogImage/201808081742_158.png)\n\n\n","slug":"essionStorage和localStorage解释及区别","published":1,"updated":"2023-07-19T03:05:47.811Z","_id":"clk82gyjk000c3164c7cc00s1","comments":1,"layout":"post","photos":[],"link":"","content":"<span id=\"more\"></span>\n\n<h3 id=\"HTML5的本地存储\"><a href=\"#HTML5的本地存储\" class=\"headerlink\" title=\"HTML5的本地存储\"></a>HTML5的本地存储</h3><p>HTML5中与本地存储相关的两个重要内容：Web Storage与本地数据库。其中，Web Storage存储机制是对HTML4中cookie存储机制的一个改善。由于cookie存储机制有很多缺点，HTML5不再使用它，转而使用改良后的Web Storage存储机制。本地数据库是HTML5中新增的一个功能，使用它可以在客户端本地建立一个数据库，原本必须保存在服务器端数据库中的内容现在可以直接保存在客户端本地了，这大大减轻了服务器端的负担，同时也加快了访问数据的速度。</p>\n<h4 id=\"本文主要来讲解Web-Storage\"><a href=\"#本文主要来讲解Web-Storage\" class=\"headerlink\" title=\"本文主要来讲解Web Storage\"></a>本文主要来讲解Web Storage</h4><p>我们知道，在HTML4中可以使用cookie在客户端保存诸如用户名等简单的用户信息，但是，通过长期的使用，你会发现，用cookie存储永久数据存在以下几个问题：</p>\n<p>1.大小：cookie的大小被限制在4KB。</p>\n<p>2.带宽：cookie是随HTTP事务一起被发送的，因此会浪费一部分发送cookie时使用的带宽。</p>\n<p>3.复杂性：要正确的操纵cookie是很困难的。</p>\n<p>针对这些问题，在HTML5中，重新提供了一种在客户端本地保存数据的功能，它就是Web Storage。</p>\n<h4 id=\"具体来说，Web-Storage又分为两种：\"><a href=\"#具体来说，Web-Storage又分为两种：\" class=\"headerlink\" title=\"具体来说，Web Storage又分为两种：\"></a>具体来说，Web Storage又分为两种：</h4><p>1.sessionStorage：将数据保存在session对象中。所谓session，是指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个网站所花费的时间。session对象可以用来保存在这段时间内所要求保存的任何数据。</p>\n<p>2.localStorage：将数据保存在客户端本地的硬件设备(通常指硬盘，也可以是其他硬件设备)中，即使浏览器被关闭了，该数据仍然存在，下次打开浏览器访问网站时仍然可以继续使用。</p>\n<p>这两者的区别在于，sessionStorage为临时保存，而localStorage为永久保存。</p>\n<h4 id=\"到目前为止，Firefox3-6以上、Chrome6以上、Safari-5以上、Pera10-50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。\"><a href=\"#到目前为止，Firefox3-6以上、Chrome6以上、Safari-5以上、Pera10-50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。\" class=\"headerlink\" title=\"到目前为止，Firefox3.6以上、Chrome6以上、Safari 5以上、Pera10.50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。\"></a>到目前为止，Firefox3.6以上、Chrome6以上、Safari 5以上、Pera10.50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。</h4><p>WebStorage的目的是克服由cookie所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。</p>\n<h4 id=\"WebStorage两个主要目标：\"><a href=\"#WebStorage两个主要目标：\" class=\"headerlink\" title=\"WebStorage两个主要目标：\"></a>WebStorage两个主要目标：</h4><p>（1）提供一种在cookie之外存储会话数据的路径。<br>（2）提供一种存储大量可以跨会话存在的数据的机制。</p>\n<h4 id=\"HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。\"><a href=\"#HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。\" class=\"headerlink\" title=\"HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。\"></a>HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。</h4><p>1、生命周期：localStorage:localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。localStorage除非主动删除数据，否则数据永远不会消失。<br>　　sessionStorage的生命周期是在仅在当前会话下有效。sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。</p>\n<p>2、存储大小：localStorage和sessionStorage的存储数据大小一般都是：5MB</p>\n<p>3、存储位置：localStorage和sessionStorage都保存在客户端，不与服务器进行交互通信。</p>\n<p>4、存储内容类型：localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理</p>\n<p>5、获取方式：localStorage：window.localStorage;；sessionStorage：window.sessionStorage;</p>\n<p>6、应用场景：localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。sessionStorage：敏感账号一次性登录；</p>\n<h4 id=\"WebStorage的优点：\"><a href=\"#WebStorage的优点：\" class=\"headerlink\" title=\"WebStorage的优点：\"></a>WebStorage的优点：</h4><p>（1）存储空间更大：cookie为4KB，而WebStorage是5MB；</p>\n<p>（2）节省网络流量：WebStorage不会传送到服务器，存储在本地的数据可以直接获取，也不会像cookie一样每次请求都会传送到服务器，所以减少了客户端和服务器端的交互，节省了网络流量；</p>\n<p>（3）对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage会非常方便；</p>\n<p>（4）快速显示：有的数据存储在WebStorage上，再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快；</p>\n<p>（5）安全性：WebStorage不会随着HTTP header发送到服务器端，所以安全性相对于cookie来说比较高一些，不会担心截获，但是仍然存在伪造问题；</p>\n<h4 id=\"WebStorage提供了一些方法，数据操作比cookie方便；\"><a href=\"#WebStorage提供了一些方法，数据操作比cookie方便；\" class=\"headerlink\" title=\"WebStorage提供了一些方法，数据操作比cookie方便；\"></a>WebStorage提供了一些方法，数据操作比cookie方便；</h4><ol>\n<li><p>setItem（key, value） ——  保存数据，以键值对的方式储存信息。</p>\n</li>\n<li><p>getItem（key） ——  获取数据，将键值传入，即可获取到对应的value值。</p>\n</li>\n<li><p>removeItem（key） ——  删除单个数据，根据键值移除对应的信息。</p>\n</li>\n<li><p>clear（） ——  删除所有的数据</p>\n</li>\n<li><p>key（index） —— 获取某个索引的key</p>\n</li>\n</ol>\n<h4 id=\"cookie-、sessionStorage与localStorage的区别\"><a href=\"#cookie-、sessionStorage与localStorage的区别\" class=\"headerlink\" title=\"cookie 、sessionStorage与localStorage的区别\"></a>cookie 、sessionStorage与localStorage的区别</h4><table><col width=\"100\"/><tr><th>特性</th><th>cookie</th><th>sessionStorage</th><th>localStorage</th></tr><tr><td>数据生命期</td><td>生成时就会被指定一个maxAge值，这就是cookie的生存周期，在这个周期内cookie有效，默认关闭浏览器失效</td><td>页面会话期间可用</td><td>除非数据被清除，否则一直存在</td></tr><tr><td>存放数据大小</td><td>4K左右（因为每次http请求都会携带cookie）</td><td colspan=\"2\">一般5M或更大<a class=\"link\"   href=\"https://www.html5rocks.com/en/tutorials/offline/quota-research/#toc-introduction\"  target=\"_blank\">详细看这(需科学上网)<i class=\"fas fa-external-link-alt\"></i></a></td></tr><tr><td>与服务器通信</td><td>由对服务器的请求来传递，每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td><td colspan=\"2\">数据不是由每个服务器请求传递的，而是只有在请求时使用数据，不参与和服务器的通信</td></tr><tr><td>易用性</td><td>cookie需要自己封装setCookie，getCookie</td><td colspan=\"2\">可以用源生接口，也可再次封装来对Object和Array有更好的支持</td></tr><tr><td>共同点</td><td colspan=\"3\">都是保存在浏览器端，和服务器端的session机制不同<a href=\"http://blog.csdn.net/fangaoxin/article/details/6952954/\" target=\"_blank\">（这里有一篇很好的介绍cookie和session的文章）<a/></td></tr></table>\n\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p>（1） 新建两个文件：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808081728_587.png\"\n                     \n                ></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./test.html&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span>跳到test.html<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;xiongchao&quot;</span>,<span class=\"number\">123</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;xiongchao&quot;</span>,<span class=\"number\">456</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>（2） 部署服务（推荐使用nignx做反向代理,比tomcat简单粗暴，也可以不用这一步，只是为了模拟真实网站会话）</p>\n<p>（3） 打开index.html,并使用链接打开test.html<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808081739_652.png\"\n                     \n                ><br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808081739_523.png\"\n                     \n                ></p>\n<p>两个页面的结果是一样的，这是一次会话，sessionStorage储存的内容被保存下来。</p>\n<p>（4） 单独打开test.html,会发现sessionStorage是空的。<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808081739_652.png\"\n                     \n                ><br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808081742_158.png\"\n                     \n                ></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"HTML5的本地存储\"><a href=\"#HTML5的本地存储\" class=\"headerlink\" title=\"HTML5的本地存储\"></a>HTML5的本地存储</h3><p>HTML5中与本地存储相关的两个重要内容：Web Storage与本地数据库。其中，Web Storage存储机制是对HTML4中cookie存储机制的一个改善。由于cookie存储机制有很多缺点，HTML5不再使用它，转而使用改良后的Web Storage存储机制。本地数据库是HTML5中新增的一个功能，使用它可以在客户端本地建立一个数据库，原本必须保存在服务器端数据库中的内容现在可以直接保存在客户端本地了，这大大减轻了服务器端的负担，同时也加快了访问数据的速度。</p>\n<h4 id=\"本文主要来讲解Web-Storage\"><a href=\"#本文主要来讲解Web-Storage\" class=\"headerlink\" title=\"本文主要来讲解Web Storage\"></a>本文主要来讲解Web Storage</h4><p>我们知道，在HTML4中可以使用cookie在客户端保存诸如用户名等简单的用户信息，但是，通过长期的使用，你会发现，用cookie存储永久数据存在以下几个问题：</p>\n<p>1.大小：cookie的大小被限制在4KB。</p>\n<p>2.带宽：cookie是随HTTP事务一起被发送的，因此会浪费一部分发送cookie时使用的带宽。</p>\n<p>3.复杂性：要正确的操纵cookie是很困难的。</p>\n<p>针对这些问题，在HTML5中，重新提供了一种在客户端本地保存数据的功能，它就是Web Storage。</p>\n<h4 id=\"具体来说，Web-Storage又分为两种：\"><a href=\"#具体来说，Web-Storage又分为两种：\" class=\"headerlink\" title=\"具体来说，Web Storage又分为两种：\"></a>具体来说，Web Storage又分为两种：</h4><p>1.sessionStorage：将数据保存在session对象中。所谓session，是指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个网站所花费的时间。session对象可以用来保存在这段时间内所要求保存的任何数据。</p>\n<p>2.localStorage：将数据保存在客户端本地的硬件设备(通常指硬盘，也可以是其他硬件设备)中，即使浏览器被关闭了，该数据仍然存在，下次打开浏览器访问网站时仍然可以继续使用。</p>\n<p>这两者的区别在于，sessionStorage为临时保存，而localStorage为永久保存。</p>\n<h4 id=\"到目前为止，Firefox3-6以上、Chrome6以上、Safari-5以上、Pera10-50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。\"><a href=\"#到目前为止，Firefox3-6以上、Chrome6以上、Safari-5以上、Pera10-50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。\" class=\"headerlink\" title=\"到目前为止，Firefox3.6以上、Chrome6以上、Safari 5以上、Pera10.50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。\"></a>到目前为止，Firefox3.6以上、Chrome6以上、Safari 5以上、Pera10.50以上、IE8以上版本的浏览器支持sessionStorage与localStorage的使用。</h4><p>WebStorage的目的是克服由cookie所带来的一些限制，当数据需要被严格控制在客户端时，不需要持续的将数据发回服务器。</p>\n<h4 id=\"WebStorage两个主要目标：\"><a href=\"#WebStorage两个主要目标：\" class=\"headerlink\" title=\"WebStorage两个主要目标：\"></a>WebStorage两个主要目标：</h4><p>（1）提供一种在cookie之外存储会话数据的路径。<br>（2）提供一种存储大量可以跨会话存在的数据的机制。</p>\n<h4 id=\"HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。\"><a href=\"#HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。\" class=\"headerlink\" title=\"HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。\"></a>HTML5的WebStorage提供了两种API：localStorage（本地存储）和sessionStorage（会话存储）。</h4><p>1、生命周期：localStorage:localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。localStorage除非主动删除数据，否则数据永远不会消失。<br>　　sessionStorage的生命周期是在仅在当前会话下有效。sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。</p>\n<p>2、存储大小：localStorage和sessionStorage的存储数据大小一般都是：5MB</p>\n<p>3、存储位置：localStorage和sessionStorage都保存在客户端，不与服务器进行交互通信。</p>\n<p>4、存储内容类型：localStorage和sessionStorage只能存储字符串类型，对于复杂的对象可以使用ECMAScript提供的JSON对象的stringify和parse来处理</p>\n<p>5、获取方式：localStorage：window.localStorage;；sessionStorage：window.sessionStorage;</p>\n<p>6、应用场景：localStoragese：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。sessionStorage：敏感账号一次性登录；</p>\n<h4 id=\"WebStorage的优点：\"><a href=\"#WebStorage的优点：\" class=\"headerlink\" title=\"WebStorage的优点：\"></a>WebStorage的优点：</h4><p>（1）存储空间更大：cookie为4KB，而WebStorage是5MB；</p>\n<p>（2）节省网络流量：WebStorage不会传送到服务器，存储在本地的数据可以直接获取，也不会像cookie一样每次请求都会传送到服务器，所以减少了客户端和服务器端的交互，节省了网络流量；</p>\n<p>（3）对于那种只需要在用户浏览一组页面期间保存而关闭浏览器后就可以丢弃的数据，sessionStorage会非常方便；</p>\n<p>（4）快速显示：有的数据存储在WebStorage上，再加上浏览器本身的缓存。获取数据时可以从本地获取会比从服务器端获取快得多，所以速度更快；</p>\n<p>（5）安全性：WebStorage不会随着HTTP header发送到服务器端，所以安全性相对于cookie来说比较高一些，不会担心截获，但是仍然存在伪造问题；</p>\n<h4 id=\"WebStorage提供了一些方法，数据操作比cookie方便；\"><a href=\"#WebStorage提供了一些方法，数据操作比cookie方便；\" class=\"headerlink\" title=\"WebStorage提供了一些方法，数据操作比cookie方便；\"></a>WebStorage提供了一些方法，数据操作比cookie方便；</h4><ol>\n<li><p>setItem（key, value） ——  保存数据，以键值对的方式储存信息。</p>\n</li>\n<li><p>getItem（key） ——  获取数据，将键值传入，即可获取到对应的value值。</p>\n</li>\n<li><p>removeItem（key） ——  删除单个数据，根据键值移除对应的信息。</p>\n</li>\n<li><p>clear（） ——  删除所有的数据</p>\n</li>\n<li><p>key（index） —— 获取某个索引的key</p>\n</li>\n</ol>\n<h4 id=\"cookie-、sessionStorage与localStorage的区别\"><a href=\"#cookie-、sessionStorage与localStorage的区别\" class=\"headerlink\" title=\"cookie 、sessionStorage与localStorage的区别\"></a>cookie 、sessionStorage与localStorage的区别</h4><table><col width=\"100\"/><tr><th>特性</th><th>cookie</th><th>sessionStorage</th><th>localStorage</th></tr><tr><td>数据生命期</td><td>生成时就会被指定一个maxAge值，这就是cookie的生存周期，在这个周期内cookie有效，默认关闭浏览器失效</td><td>页面会话期间可用</td><td>除非数据被清除，否则一直存在</td></tr><tr><td>存放数据大小</td><td>4K左右（因为每次http请求都会携带cookie）</td><td colspan=\"2\">一般5M或更大<a class=\"link\"   href=\"https://www.html5rocks.com/en/tutorials/offline/quota-research/#toc-introduction\"  target=\"_blank\">详细看这(需科学上网)<i class=\"fas fa-external-link-alt\"></i></a></td></tr><tr><td>与服务器通信</td><td>由对服务器的请求来传递，每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td><td colspan=\"2\">数据不是由每个服务器请求传递的，而是只有在请求时使用数据，不参与和服务器的通信</td></tr><tr><td>易用性</td><td>cookie需要自己封装setCookie，getCookie</td><td colspan=\"2\">可以用源生接口，也可再次封装来对Object和Array有更好的支持</td></tr><tr><td>共同点</td><td colspan=\"3\">都是保存在浏览器端，和服务器端的session机制不同<a href=\"http://blog.csdn.net/fangaoxin/article/details/6952954/\" target=\"_blank\">（这里有一篇很好的介绍cookie和session的文章）<a/></td></tr></table>\n\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p>（1） 新建两个文件：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808081728_587.png\"\n                     \n                ></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./test.html&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span>跳到test.html<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;xiongchao&quot;</span>,<span class=\"number\">123</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;xiongchao&quot;</span>,<span class=\"number\">456</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>（2） 部署服务（推荐使用nignx做反向代理,比tomcat简单粗暴，也可以不用这一步，只是为了模拟真实网站会话）</p>\n<p>（3） 打开index.html,并使用链接打开test.html<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808081739_652.png\"\n                     \n                ><br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808081739_523.png\"\n                     \n                ></p>\n<p>两个页面的结果是一样的，这是一次会话，sessionStorage储存的内容被保存下来。</p>\n<p>（4） 单独打开test.html,会发现sessionStorage是空的。<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808081739_652.png\"\n                     \n                ><br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808081742_158.png\"\n                     \n                ></p>"},{"title":"git常用命令","author":"熊 超","date":"2018-07-08T06:12:00.000Z","_content":"<!--more-->\n### git的工作原理图解：\n+ 将指定文件添加到暂存区(stage)\n![](http://xiongcao.github.io/blogImage/201808030937_27.png)\n\n\n+ 将暂存区的所有内容提交到当前分支\n![](http://xiongcao.github.io/blogImage/201808030941_860.png)\n\n\n\n+ 分支的创建与合并\n![](http://xiongcao.github.io/blogImage/201808031105_462.png)\n![](http://xiongcao.github.io/blogImage/201808031106_416.png)\n\n\n### git的使用步骤：\n\n##### 基本使用\n``` js\ngit add . //如果有删除的文件则：git add -A\n\ngit commit -m\"first commit\"\n\n//这一步可能会进入一个奇怪的窗口，需执行 ESC :wq\ngit pull --rebase origin master\n\n//如果有冲突则解决冲突，然后执行第一步，最后执行以下命令\ngit rebase --continue\n\ngit push origin master\n\n//push时有可能会提示没有change-id\n//复制提示中的\"gitdir=$(git rev-parse --git-dir); scp -p -P 29418 \n//xiongchao@192.168.1.192:hooks/commit-msg ${gitdir}/hooks/\"\ngit commit -amend\n```\n\n##### 如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令\n``` js\ngit stash\n\ngit pull\n\ngit stash pop //可能有冲突，改冲突，可直接运行项目\n```\n\n#####  cherry-pick用法（A分支的内容添加到B分支,此操作是在B分支上）\n``` js\ngit reflog\n\n//复制要cherry-pick的commit id（有说明的那一行）\ngit cherry-pick commitid\n\ngit push origin master\n```\n\n### git的常用命令解释：\n\n##### $ git status\n查看工作区状态；\n\n##### $ git add readme.txt \n将指定文件添加到暂存区(stage);反复多次使用，添加多个文件；\n\n##### $ git add . \n将所有文件添加到Git仓库暂存区；\n\n##### $ git commit -m \"wrote a readme file\" \n将暂存区的所有内容提交到当前分支；\n\n##### $ git checkout -- readme.txt\" \n把** readme.txt **文件在工作区的修改全部撤销，这里有两种情况：<br/><!--\n--><font size=2>一种是**readme.txt**自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</font><br/><!--\n--><font size=2>一种是**readme.txt**已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</font>\n总之，就是让这个文件回到最近一次git commit或git add时的状态。\n\n##### $ rm test.txt\" \n从版本库暂存区中删除该文件；\n\n##### $ git push origin master \n把当前分支**master**的内容推送到远程库；\n\n##### $ git pull --rebase origin master \n拉取远程库**master**分支的内容到本地仓库；\n\n##### $ git reset HEAD~ \n将前版本回退到上一个版本；上上一个版本就是HEAD~~，上100个版本写成HEAD~100；\n\n##### $ git reset --hard 1094a \n将前版本回退到指定版本；\n\n##### $ git stash \n将你当前未提交（包括暂存的和非暂存的）到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的,需要说明一点，stash是本地的，不会通过git push命令上传到git server上；\n\n##### $ git stash pop\n将缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下；\n\n##### $ git stash list\n查看现有stash；\n\n##### $ git stash drop\n移除stash；或者使用git stash clear命令，删除所有缓存的stash；\n\n##### $ git branch dev\n创建dev分支；\n\n##### $ git checkout dev\n切换到dev分支；\n\n##### $ git branch\n查看当前分支；\n\n##### $ git merge dev\n把dev分支的工作成果合并到master分支上；\n\n##### $ git branch -d dev\n删除dev分支；\n\n##### $ git clone\n将远程仓库克隆到本地；\n\n##### $ git log\n查看提交日志；\n\n##### $ git reflog\n记录你的每一次命令；\n\n","source":"_posts/git常用命令.md","raw":"title: git常用命令\nauthor: 熊 超\ntags:\n  - git\ncategories:\n  - 工具\ndate: 2018-07-08 14:12:00\n---\n<!--more-->\n### git的工作原理图解：\n+ 将指定文件添加到暂存区(stage)\n![](http://xiongcao.github.io/blogImage/201808030937_27.png)\n\n\n+ 将暂存区的所有内容提交到当前分支\n![](http://xiongcao.github.io/blogImage/201808030941_860.png)\n\n\n\n+ 分支的创建与合并\n![](http://xiongcao.github.io/blogImage/201808031105_462.png)\n![](http://xiongcao.github.io/blogImage/201808031106_416.png)\n\n\n### git的使用步骤：\n\n##### 基本使用\n``` js\ngit add . //如果有删除的文件则：git add -A\n\ngit commit -m\"first commit\"\n\n//这一步可能会进入一个奇怪的窗口，需执行 ESC :wq\ngit pull --rebase origin master\n\n//如果有冲突则解决冲突，然后执行第一步，最后执行以下命令\ngit rebase --continue\n\ngit push origin master\n\n//push时有可能会提示没有change-id\n//复制提示中的\"gitdir=$(git rev-parse --git-dir); scp -p -P 29418 \n//xiongchao@192.168.1.192:hooks/commit-msg ${gitdir}/hooks/\"\ngit commit -amend\n```\n\n##### 如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令\n``` js\ngit stash\n\ngit pull\n\ngit stash pop //可能有冲突，改冲突，可直接运行项目\n```\n\n#####  cherry-pick用法（A分支的内容添加到B分支,此操作是在B分支上）\n``` js\ngit reflog\n\n//复制要cherry-pick的commit id（有说明的那一行）\ngit cherry-pick commitid\n\ngit push origin master\n```\n\n### git的常用命令解释：\n\n##### $ git status\n查看工作区状态；\n\n##### $ git add readme.txt \n将指定文件添加到暂存区(stage);反复多次使用，添加多个文件；\n\n##### $ git add . \n将所有文件添加到Git仓库暂存区；\n\n##### $ git commit -m \"wrote a readme file\" \n将暂存区的所有内容提交到当前分支；\n\n##### $ git checkout -- readme.txt\" \n把** readme.txt **文件在工作区的修改全部撤销，这里有两种情况：<br/><!--\n--><font size=2>一种是**readme.txt**自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</font><br/><!--\n--><font size=2>一种是**readme.txt**已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</font>\n总之，就是让这个文件回到最近一次git commit或git add时的状态。\n\n##### $ rm test.txt\" \n从版本库暂存区中删除该文件；\n\n##### $ git push origin master \n把当前分支**master**的内容推送到远程库；\n\n##### $ git pull --rebase origin master \n拉取远程库**master**分支的内容到本地仓库；\n\n##### $ git reset HEAD~ \n将前版本回退到上一个版本；上上一个版本就是HEAD~~，上100个版本写成HEAD~100；\n\n##### $ git reset --hard 1094a \n将前版本回退到指定版本；\n\n##### $ git stash \n将你当前未提交（包括暂存的和非暂存的）到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的,需要说明一点，stash是本地的，不会通过git push命令上传到git server上；\n\n##### $ git stash pop\n将缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下；\n\n##### $ git stash list\n查看现有stash；\n\n##### $ git stash drop\n移除stash；或者使用git stash clear命令，删除所有缓存的stash；\n\n##### $ git branch dev\n创建dev分支；\n\n##### $ git checkout dev\n切换到dev分支；\n\n##### $ git branch\n查看当前分支；\n\n##### $ git merge dev\n把dev分支的工作成果合并到master分支上；\n\n##### $ git branch -d dev\n删除dev分支；\n\n##### $ git clone\n将远程仓库克隆到本地；\n\n##### $ git log\n查看提交日志；\n\n##### $ git reflog\n记录你的每一次命令；\n\n","slug":"git常用命令","published":1,"updated":"2023-07-19T03:05:52.404Z","_id":"clk82gyjm000g3164ggy20iva","comments":1,"layout":"post","photos":[],"link":"","content":"<span id=\"more\"></span>\n<h3 id=\"git的工作原理图解：\"><a href=\"#git的工作原理图解：\" class=\"headerlink\" title=\"git的工作原理图解：\"></a>git的工作原理图解：</h3><ul>\n<li><p>将指定文件添加到暂存区(stage)<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808030937_27.png\"\n                     \n                ></p>\n</li>\n<li><p>将暂存区的所有内容提交到当前分支<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808030941_860.png\"\n                     \n                ></p>\n</li>\n<li><p>分支的创建与合并<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808031105_462.png\"\n                     \n                ><br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808031106_416.png\"\n                     \n                ></p>\n</li>\n</ul>\n<h3 id=\"git的使用步骤：\"><a href=\"#git的使用步骤：\" class=\"headerlink\" title=\"git的使用步骤：\"></a>git的使用步骤：</h3><h5 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . <span class=\"comment\">//如果有删除的文件则：git add -A</span></span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m<span class=\"string\">&quot;first commit&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这一步可能会进入一个奇怪的窗口，需执行 ESC :wq</span></span><br><span class=\"line\">git pull --rebase origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果有冲突则解决冲突，然后执行第一步，最后执行以下命令</span></span><br><span class=\"line\">git rebase --<span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">git push origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//push时有可能会提示没有change-id</span></span><br><span class=\"line\"><span class=\"comment\">//复制提示中的&quot;gitdir=$(git rev-parse --git-dir); scp -p -P 29418 </span></span><br><span class=\"line\"><span class=\"comment\">//xiongchao@192.168.1.192:hooks/commit-msg $&#123;gitdir&#125;/hooks/&quot;</span></span><br><span class=\"line\">git commit -amend</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令\"><a href=\"#如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令\" class=\"headerlink\" title=\"如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令\"></a>如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br><span class=\"line\"></span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\">git stash pop <span class=\"comment\">//可能有冲突，改冲突，可直接运行项目</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"cherry-pick用法（A分支的内容添加到B分支-此操作是在B分支上）\"><a href=\"#cherry-pick用法（A分支的内容添加到B分支-此操作是在B分支上）\" class=\"headerlink\" title=\"cherry-pick用法（A分支的内容添加到B分支,此操作是在B分支上）\"></a>cherry-pick用法（A分支的内容添加到B分支,此操作是在B分支上）</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//复制要cherry-pick的commit id（有说明的那一行）</span></span><br><span class=\"line\">git cherry-pick commitid</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git的常用命令解释：\"><a href=\"#git的常用命令解释：\" class=\"headerlink\" title=\"git的常用命令解释：\"></a>git的常用命令解释：</h3><h5 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"$ git status\"></a>$ git status</h5><p>查看工作区状态；</p>\n<h5 id=\"git-add-readme-txt\"><a href=\"#git-add-readme-txt\" class=\"headerlink\" title=\"$ git add readme.txt\"></a>$ git add readme.txt</h5><p>将指定文件添加到暂存区(stage);反复多次使用，添加多个文件；</p>\n<h5 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"$ git add .\"></a>$ git add .</h5><p>将所有文件添加到Git仓库暂存区；</p>\n<h5 id=\"git-commit-m-“wrote-a-readme-file”\"><a href=\"#git-commit-m-“wrote-a-readme-file”\" class=\"headerlink\" title=\"$ git commit -m “wrote a readme file”\"></a>$ git commit -m “wrote a readme file”</h5><p>将暂存区的所有内容提交到当前分支；</p>\n<h5 id=\"git-checkout-–-readme-txt”\"><a href=\"#git-checkout-–-readme-txt”\" class=\"headerlink\" title=\"$ git checkout – readme.txt”\"></a>$ git checkout – readme.txt”</h5><p>把** readme.txt <strong>文件在工作区的修改全部撤销，这里有两种情况：<br/><!--\n--><font size=2>一种是</strong>readme.txt<strong>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</font><br/><!--\n--><font size=2>一种是</strong>readme.txt**已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</font><br>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>\n<h5 id=\"rm-test-txt”\"><a href=\"#rm-test-txt”\" class=\"headerlink\" title=\"$ rm test.txt”\"></a>$ rm test.txt”</h5><p>从版本库暂存区中删除该文件；</p>\n<h5 id=\"git-push-origin-master\"><a href=\"#git-push-origin-master\" class=\"headerlink\" title=\"$ git push origin master\"></a>$ git push origin master</h5><p>把当前分支<strong>master</strong>的内容推送到远程库；</p>\n<h5 id=\"git-pull-–rebase-origin-master\"><a href=\"#git-pull-–rebase-origin-master\" class=\"headerlink\" title=\"$ git pull –rebase origin master\"></a>$ git pull –rebase origin master</h5><p>拉取远程库<strong>master</strong>分支的内容到本地仓库；</p>\n<h5 id=\"git-reset-HEAD\"><a href=\"#git-reset-HEAD\" class=\"headerlink\" title=\"$ git reset HEAD~\"></a>$ git reset HEAD~</h5><p>将前版本回退到上一个版本；上上一个版本就是HEAD~~，上100个版本写成HEAD~100；</p>\n<h5 id=\"git-reset-–hard-1094a\"><a href=\"#git-reset-–hard-1094a\" class=\"headerlink\" title=\"$ git reset –hard 1094a\"></a>$ git reset –hard 1094a</h5><p>将前版本回退到指定版本；</p>\n<h5 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"$ git stash\"></a>$ git stash</h5><p>将你当前未提交（包括暂存的和非暂存的）到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的,需要说明一点，stash是本地的，不会通过git push命令上传到git server上；</p>\n<h5 id=\"git-stash-pop\"><a href=\"#git-stash-pop\" class=\"headerlink\" title=\"$ git stash pop\"></a>$ git stash pop</h5><p>将缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下；</p>\n<h5 id=\"git-stash-list\"><a href=\"#git-stash-list\" class=\"headerlink\" title=\"$ git stash list\"></a>$ git stash list</h5><p>查看现有stash；</p>\n<h5 id=\"git-stash-drop\"><a href=\"#git-stash-drop\" class=\"headerlink\" title=\"$ git stash drop\"></a>$ git stash drop</h5><p>移除stash；或者使用git stash clear命令，删除所有缓存的stash；</p>\n<h5 id=\"git-branch-dev\"><a href=\"#git-branch-dev\" class=\"headerlink\" title=\"$ git branch dev\"></a>$ git branch dev</h5><p>创建dev分支；</p>\n<h5 id=\"git-checkout-dev\"><a href=\"#git-checkout-dev\" class=\"headerlink\" title=\"$ git checkout dev\"></a>$ git checkout dev</h5><p>切换到dev分支；</p>\n<h5 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"$ git branch\"></a>$ git branch</h5><p>查看当前分支；</p>\n<h5 id=\"git-merge-dev\"><a href=\"#git-merge-dev\" class=\"headerlink\" title=\"$ git merge dev\"></a>$ git merge dev</h5><p>把dev分支的工作成果合并到master分支上；</p>\n<h5 id=\"git-branch-d-dev\"><a href=\"#git-branch-d-dev\" class=\"headerlink\" title=\"$ git branch -d dev\"></a>$ git branch -d dev</h5><p>删除dev分支；</p>\n<h5 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"$ git clone\"></a>$ git clone</h5><p>将远程仓库克隆到本地；</p>\n<h5 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"$ git log\"></a>$ git log</h5><p>查看提交日志；</p>\n<h5 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"$ git reflog\"></a>$ git reflog</h5><p>记录你的每一次命令；</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"git的工作原理图解：\"><a href=\"#git的工作原理图解：\" class=\"headerlink\" title=\"git的工作原理图解：\"></a>git的工作原理图解：</h3><ul>\n<li><p>将指定文件添加到暂存区(stage)<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808030937_27.png\"\n                     \n                ></p>\n</li>\n<li><p>将暂存区的所有内容提交到当前分支<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808030941_860.png\"\n                     \n                ></p>\n</li>\n<li><p>分支的创建与合并<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808031105_462.png\"\n                     \n                ><br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808031106_416.png\"\n                     \n                ></p>\n</li>\n</ul>\n<h3 id=\"git的使用步骤：\"><a href=\"#git的使用步骤：\" class=\"headerlink\" title=\"git的使用步骤：\"></a>git的使用步骤：</h3><h5 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . <span class=\"comment\">//如果有删除的文件则：git add -A</span></span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m<span class=\"string\">&quot;first commit&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这一步可能会进入一个奇怪的窗口，需执行 ESC :wq</span></span><br><span class=\"line\">git pull --rebase origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果有冲突则解决冲突，然后执行第一步，最后执行以下命令</span></span><br><span class=\"line\">git rebase --<span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">git push origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//push时有可能会提示没有change-id</span></span><br><span class=\"line\"><span class=\"comment\">//复制提示中的&quot;gitdir=$(git rev-parse --git-dir); scp -p -P 29418 </span></span><br><span class=\"line\"><span class=\"comment\">//xiongchao@192.168.1.192:hooks/commit-msg $&#123;gitdir&#125;/hooks/&quot;</span></span><br><span class=\"line\">git commit -amend</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令\"><a href=\"#如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令\" class=\"headerlink\" title=\"如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令\"></a>如果你正在完成某一个功能不能提交代码，然后又需要用到远程仓库中同事刚提交的代码，则只需要执行以下命令</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br><span class=\"line\"></span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\">git stash pop <span class=\"comment\">//可能有冲突，改冲突，可直接运行项目</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"cherry-pick用法（A分支的内容添加到B分支-此操作是在B分支上）\"><a href=\"#cherry-pick用法（A分支的内容添加到B分支-此操作是在B分支上）\" class=\"headerlink\" title=\"cherry-pick用法（A分支的内容添加到B分支,此操作是在B分支上）\"></a>cherry-pick用法（A分支的内容添加到B分支,此操作是在B分支上）</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//复制要cherry-pick的commit id（有说明的那一行）</span></span><br><span class=\"line\">git cherry-pick commitid</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"git的常用命令解释：\"><a href=\"#git的常用命令解释：\" class=\"headerlink\" title=\"git的常用命令解释：\"></a>git的常用命令解释：</h3><h5 id=\"git-status\"><a href=\"#git-status\" class=\"headerlink\" title=\"$ git status\"></a>$ git status</h5><p>查看工作区状态；</p>\n<h5 id=\"git-add-readme-txt\"><a href=\"#git-add-readme-txt\" class=\"headerlink\" title=\"$ git add readme.txt\"></a>$ git add readme.txt</h5><p>将指定文件添加到暂存区(stage);反复多次使用，添加多个文件；</p>\n<h5 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"$ git add .\"></a>$ git add .</h5><p>将所有文件添加到Git仓库暂存区；</p>\n<h5 id=\"git-commit-m-“wrote-a-readme-file”\"><a href=\"#git-commit-m-“wrote-a-readme-file”\" class=\"headerlink\" title=\"$ git commit -m “wrote a readme file”\"></a>$ git commit -m “wrote a readme file”</h5><p>将暂存区的所有内容提交到当前分支；</p>\n<h5 id=\"git-checkout-–-readme-txt”\"><a href=\"#git-checkout-–-readme-txt”\" class=\"headerlink\" title=\"$ git checkout – readme.txt”\"></a>$ git checkout – readme.txt”</h5><p>把** readme.txt <strong>文件在工作区的修改全部撤销，这里有两种情况：<br/><!--\n--><font size=2>一种是</strong>readme.txt<strong>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</font><br/><!--\n--><font size=2>一种是</strong>readme.txt**已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</font><br>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>\n<h5 id=\"rm-test-txt”\"><a href=\"#rm-test-txt”\" class=\"headerlink\" title=\"$ rm test.txt”\"></a>$ rm test.txt”</h5><p>从版本库暂存区中删除该文件；</p>\n<h5 id=\"git-push-origin-master\"><a href=\"#git-push-origin-master\" class=\"headerlink\" title=\"$ git push origin master\"></a>$ git push origin master</h5><p>把当前分支<strong>master</strong>的内容推送到远程库；</p>\n<h5 id=\"git-pull-–rebase-origin-master\"><a href=\"#git-pull-–rebase-origin-master\" class=\"headerlink\" title=\"$ git pull –rebase origin master\"></a>$ git pull –rebase origin master</h5><p>拉取远程库<strong>master</strong>分支的内容到本地仓库；</p>\n<h5 id=\"git-reset-HEAD\"><a href=\"#git-reset-HEAD\" class=\"headerlink\" title=\"$ git reset HEAD~\"></a>$ git reset HEAD~</h5><p>将前版本回退到上一个版本；上上一个版本就是HEAD~~，上100个版本写成HEAD~100；</p>\n<h5 id=\"git-reset-–hard-1094a\"><a href=\"#git-reset-–hard-1094a\" class=\"headerlink\" title=\"$ git reset –hard 1094a\"></a>$ git reset –hard 1094a</h5><p>将前版本回退到指定版本；</p>\n<h5 id=\"git-stash\"><a href=\"#git-stash\" class=\"headerlink\" title=\"$ git stash\"></a>$ git stash</h5><p>将你当前未提交（包括暂存的和非暂存的）到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的,需要说明一点，stash是本地的，不会通过git push命令上传到git server上；</p>\n<h5 id=\"git-stash-pop\"><a href=\"#git-stash-pop\" class=\"headerlink\" title=\"$ git stash pop\"></a>$ git stash pop</h5><p>将缓存堆栈中的第一个stash删除，并将对应修改应用到当前的工作目录下；</p>\n<h5 id=\"git-stash-list\"><a href=\"#git-stash-list\" class=\"headerlink\" title=\"$ git stash list\"></a>$ git stash list</h5><p>查看现有stash；</p>\n<h5 id=\"git-stash-drop\"><a href=\"#git-stash-drop\" class=\"headerlink\" title=\"$ git stash drop\"></a>$ git stash drop</h5><p>移除stash；或者使用git stash clear命令，删除所有缓存的stash；</p>\n<h5 id=\"git-branch-dev\"><a href=\"#git-branch-dev\" class=\"headerlink\" title=\"$ git branch dev\"></a>$ git branch dev</h5><p>创建dev分支；</p>\n<h5 id=\"git-checkout-dev\"><a href=\"#git-checkout-dev\" class=\"headerlink\" title=\"$ git checkout dev\"></a>$ git checkout dev</h5><p>切换到dev分支；</p>\n<h5 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"$ git branch\"></a>$ git branch</h5><p>查看当前分支；</p>\n<h5 id=\"git-merge-dev\"><a href=\"#git-merge-dev\" class=\"headerlink\" title=\"$ git merge dev\"></a>$ git merge dev</h5><p>把dev分支的工作成果合并到master分支上；</p>\n<h5 id=\"git-branch-d-dev\"><a href=\"#git-branch-d-dev\" class=\"headerlink\" title=\"$ git branch -d dev\"></a>$ git branch -d dev</h5><p>删除dev分支；</p>\n<h5 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"$ git clone\"></a>$ git clone</h5><p>将远程仓库克隆到本地；</p>\n<h5 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"$ git log\"></a>$ git log</h5><p>查看提交日志；</p>\n<h5 id=\"git-reflog\"><a href=\"#git-reflog\" class=\"headerlink\" title=\"$ git reflog\"></a>$ git reflog</h5><p>记录你的每一次命令；</p>"},{"title":"js Date对象的详细使用","author":"熊 超","date":"2018-07-19T03:44:00.000Z","_content":"<!--more-->\n\n## 前言：\n&ensp;&ensp;&ensp;&ensp;最近发现Date对象在项目中真的是无处不在，几乎做过的所有项目中都有Date的各种用法，然而每次要使用的时候都是各种百度，自己既没有掌握Date的详细用法，也使得每次做项目都浪费很多时间，所以特此研究一下记录下来。\n\n\n\n\n## 一：Date()对象基本方法示例：\n\n```js\n//Date()：返回当日的日期和时间。\nvar date = new Date();//Thu Jul 19 2018 10:46:06 GMT+0800\n\n// getDay()：从 Date 对象返回一周中的某一天 (0 ~ 6)。\ndate.getDay();\t\t//4 今天是星期四\n\n// getFullYear()：从 Date 对象以四位数字返回年份。\ndate.getFullYear();\t\t//2018\n\n// getMonth()：从 Date 对象返回月份 (0 ~ 11)。\ndate.getMonth();\t\t//6\n\n// getDate()：从 Date 对象返回一个月中的某一天 (1 ~ 31)。\ndate.getDate();\t\t//19\n\n// getHours()：返回 Date 对象的小时 (0 ~ 23)。\ndate.getHours();\t\t//10\n\n// getMinutes()：返回 Date 对象的分钟 (0 ~ 59)。\ndate.getMinutes();\t\t//53\n\n// getSeconds()：返回 Date 对象的秒数 (0 ~ 59)。\ndate.getSeconds();\t\t//5\n\n// getMilliseconds()：返回 Date 对象的毫秒(0 ~ 999)。\ndate.getMilliseconds();\t\t//522\n\n// getTime()：返回 1970 年 1 月 1 日至今的毫秒数。\ndate.getTime();\t\t//1531968785522\n\n// setFullYear()：设置 Date 对象中的年份（四位数字）。\ndate.setFullYear(1995); //1531968785522\n\n// setMonth()：设置 Date 对象中月份 (0 ~ 11)。\ndate.setMonth(8); //Wed Sep 19 2018 11:51:48 GMT+0800 (中国标准时间)\n\n// setDate()：设置 Date 对象中月的某一天 (1 ~ 31)。\ndate.setDate(25); //Wed Jul 25 2018 11:52:15 GMT+0800 (中国标准时间)\n\n// setTime()：以毫秒设置 Date 对象。\ndate.setTime(77771564221); \nconsole.log(date) //Mon Jun 19 1972 11:12:44 GMT+0800 (中国标准时间)\n\n// toTimeString()：把 Date 对象的时间部分转换为字符串。\nconsole.log(date.toTimeString()); => 11:58:45 GMT+0800 (中国标准时间)\n\n// toDateString()：把 Date 对象的日期部分转换为字符串。\nconsole.log(date.toDateString()); => Thu Jul 19 2018\n\n```\n\n\n## 二：Date()对象组合高级用法：\n\n```js\n//将毫秒转换为yyyy-MM-dd HH:mm:ss日期格式\nfunction dateFormat(seconds) {\n    let date = new Date(seconds),\n        year = date.getFullYear(),\n        month = date.getMonth() + 1,\n        day = date.getDate(),\n        hour = date.getHours(),\n        min = date.getMinutes(),\n        s = date.getSeconds();\n    return `${year}-${formatNum(month)}-${formatNum(day)} ${formatNum(hour)}:${formatNum(min)}:${formatNum(s)}`;\n}\n\n//转换为yyyy-MM-dd日期格式\nfunction dateFormatShort(date) {\n    let year = date.getFullYear(),\n    month = date.getMonth() + 1,\n    day = date.getDate();\n    return `${year}-${formatNum(month)}-${formatNum(day)}`;\n}\n\n//将yyyy-MM-dd HH:mm:ss转化为毫秒数\nfunction formatMilliseconds(str){\n    // str = '2018-7-19 15:14:30';\n    str = str.replace(/-/g,'/');//由于部分浏览器以及一些低版本浏览器不兼容new Date(yyyy-MM-dd HH:mm:ss)\n    let date = new Date(str);\n    return date.getTime();\n}\n\n//获取两个时间的秒数差\nfunction SecondsDiff(startDate,endDate){\n    startDate = \"2018-7-18 10:56:23\",endDate = \"2018-7-19 12:00:00\";\n    let startTime = formatMilliseconds(startDate),//获得毫秒数\n        endTime = formatMilliseconds(endDate),\n        milliseconds = endTime - startTime;//毫秒数之差\n    return parseInt(milliseconds/1000);\n}\n\n//根据剩余秒数获取剩余HH:mm:ss（应用在活动倒计时或物品过期还有多久'dd天HH小时'）\nfunction secondsFormat(seconds){\n    seconds = SecondsDiff();\n    let day = Math.floor(seconds / 3600 / 24),\n        hour = Math.floor((seconds % 86400) / 3600),\n        min = Math.floor((seconds % 86400 % 3600) / 60 ),\n        second = Math.floor(seconds % 86400 % 3600 % 60);\n        hour += day * 24;\n    return `${formatNum(hour)}:${formatNum(min)}:${formatNum(second)}`;//为什么只计算天数,因为一般活动只在相邻几天\n}\n    \n//获得某月的天数　　 \nfunction getMonthDays(year, month) {\n    let nowDate = new Date(year,month,0),\n        days = nowDate.getDate();\n    return days;\n}\n\n//补0操作\nfunction formatNum(e) {\n    return e >= 10 ? e : `0${e}`;\n}\n\t\n```\n\n\n## 三：对当前时间的判定：\n\n```js\n//判断时间是否是今天\nfunction isToday(str){\n    str = new Date(str.replace(/-/g,\"/\"));\n    if (str.toDateString() === new Date().toDateString()) {//今天\n        return true;\n    } else if (new Date(str) > new Date()){\n        return false;\n    }\n}\n\n/**\n* 判断某个时间是前天、昨天、今天、明天、后天\n* @now:当前服务器时间\n*/\nfunction daysText(str,now){\n    let date = str.substring(0,str.indexOf(\"-\")+6);\n    now = new Date(now.replace(/-/g,'/'));\n    now = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    str = new Date(str.replace(/-/g,'/'));\n    str = new Date(str.getFullYear(), str.getMonth(), str.getDate());\n    let diff = (str - now) / 1000 / 60 / 60 / 24;\n    if (diff < -1) {\n        return \"前天\";\n    } else if (diff < -0) {\n        return \"昨天\"\n    } else if (diff == 0) {\n        return \"今天\";\n    } else if (diff < 2) {\n        return \"明日\";\n    } else if (diff < 3) {\n        return \"后天\";\n    } else {\n        return date;\n    }\n}\n\n//判断是否超过48小时\nfunction overTime(seconds) {\n    let diffSeconds = Math.floor((new Date().getTime() - seconds)/1000),\n        days = Math.floor(diffSeconds / 86400),\n        hour = Math.floor(diffSeconds % 86400 / 3600),\n        min = Math.floor((diffSeconds % 86400 % 3600) / 60 )\n        second = Math.floor(diffSeconds % 86400 % 3600 % 60);\n\n    if(days>2){//超过两天超时\n        return 0;\n    }else if(days==2){ //刚好两天判断时分秒\n        if(hour==0){ \n            if(min==0){\n                if(second==0){\n                    return 1;\n                }else{ //有多余秒数，超时\n                    return 0;\n                }\n            }else{ //有多余分钟，超时\n                return 0;\n            }\n        }else{ //还有多余小时，超时\n            return 0;\n        }\n    }else { //小于两天则没有超时\n        return 1;\n    }\n}\n\n/**\n * 判断某个时间相对于现在过了多久\n * seconds:毫秒数\n */\nfunction pastTimes(seconds){\n    //得到时间\n    let dateTime;\n\n    //传入时间\n    let starDate = new Date(seconds),\n        starYear = starDate.getFullYear(), //年\n        starMonth = starDate.getMonth() + 1, //月\n        starDay = starDate.getDate(),     //日\n        starHour = starDate.getHours(),   //时\n        starMin = starDate.getMinutes(),  //分\n        starSen = starDate.getSeconds(); //秒\n\n    //当前时间\n    let nowDate = new Date(),\n        nowYear = nowDate.getFullYear(), //年\n        nowMonth = nowDate.getMonth() + 1, //月\n        nowDay = nowDate.getDate(),     //日\n        nowHour = nowDate.getHours(),   //时\n        nowMin = nowDate.getMinutes(),  //分\n        nowSen = nowDate.getSeconds();  //秒\n    //判断是否在同一年\n    if (starYear == nowYear) {\n        //判断是否是同一个月\n        if (starMonth == nowMonth) {\n             //判断在今天昨天或者前天\n            let diffDay = nowDay - starDay;\n            if (diffDay == 0) {//今天\n                //判断小时数\n                let diffHours = nowHour - starHour;\n                let diffMinutes = nowMin - starMin;\n                if (diffHours == 0) {\n                    if (diffMinutes >= 0 && diffMinutes < 2) {\n                        dateTime = \"刚刚\";\n                    } else if (diffMinutes >= 2) {\n                        dateTime = diffMinutes + \"分钟前\";\n                    }\n                }else if (diffHours == 1) {\n                    if (diffMinutes < 0) {\n                        let minute = (60 - starMin) + (nowMin - 0);\n                        dateTime = minute + \"分钟前\";\n                    } else if (diffMinutes > 0) {\n                        dateTime = \"1个小时前\";\n                    }\n                }else if (diffHours == 2) {\n                     if (diffMinutes < 0) {\n                        dateTime = \"1个小时前\";\n                    } else if (diffMinutes > 0) {\n                        dateTime = \"2个小时前\";\n                    }\n                }else{\n                    dateTime = formatNum(starHour) + ':' + formatNum(starMin);\n                }\n\n            }else if(diffDay == 1) {//昨天\n                dateTime = '昨天' + formatNum(starHour) + ':' + formatNum(starMin);\n            }else if (diffDay == 2) {//前天\n                dateTime = '前天' + formatNum(starHour) + ':' + formatNum(starMin);\n            }else{\n                dateTime = formatNum(starMonth) + '-' + formatNum(starDay) + ' ' + formatNum(starHour) + ':' + formatNum(starMin);\n            }\n        }else{\n            //不在同一个月且在同一年的不显示年份\n            dateTime = formatNum(starMonth) + '-' + formatNum(starDay) + ' ' + formatNum(starHour) + ':' + formatNum(starMin);\n        }\n    }else{\n        //不在同一年的显示年月日时分\n        dateTime = starYear + '-' + formatNum(starMonth) + '-' + formatNum(starDay) + ' ' + formatNum(starHour) + ':' + formatNum(starMin);\n    }\n\n    return dateTime\n    \n}\n\n```","source":"_posts/js Date对象的详细使用.md","raw":"title: js Date对象的详细使用\nauthor: 熊 超\ntags:\n  - js\n  - date\ncategories:\n  - javascript\ndate: 2018-07-19 11:44:00\n---\n<!--more-->\n\n## 前言：\n&ensp;&ensp;&ensp;&ensp;最近发现Date对象在项目中真的是无处不在，几乎做过的所有项目中都有Date的各种用法，然而每次要使用的时候都是各种百度，自己既没有掌握Date的详细用法，也使得每次做项目都浪费很多时间，所以特此研究一下记录下来。\n\n\n\n\n## 一：Date()对象基本方法示例：\n\n```js\n//Date()：返回当日的日期和时间。\nvar date = new Date();//Thu Jul 19 2018 10:46:06 GMT+0800\n\n// getDay()：从 Date 对象返回一周中的某一天 (0 ~ 6)。\ndate.getDay();\t\t//4 今天是星期四\n\n// getFullYear()：从 Date 对象以四位数字返回年份。\ndate.getFullYear();\t\t//2018\n\n// getMonth()：从 Date 对象返回月份 (0 ~ 11)。\ndate.getMonth();\t\t//6\n\n// getDate()：从 Date 对象返回一个月中的某一天 (1 ~ 31)。\ndate.getDate();\t\t//19\n\n// getHours()：返回 Date 对象的小时 (0 ~ 23)。\ndate.getHours();\t\t//10\n\n// getMinutes()：返回 Date 对象的分钟 (0 ~ 59)。\ndate.getMinutes();\t\t//53\n\n// getSeconds()：返回 Date 对象的秒数 (0 ~ 59)。\ndate.getSeconds();\t\t//5\n\n// getMilliseconds()：返回 Date 对象的毫秒(0 ~ 999)。\ndate.getMilliseconds();\t\t//522\n\n// getTime()：返回 1970 年 1 月 1 日至今的毫秒数。\ndate.getTime();\t\t//1531968785522\n\n// setFullYear()：设置 Date 对象中的年份（四位数字）。\ndate.setFullYear(1995); //1531968785522\n\n// setMonth()：设置 Date 对象中月份 (0 ~ 11)。\ndate.setMonth(8); //Wed Sep 19 2018 11:51:48 GMT+0800 (中国标准时间)\n\n// setDate()：设置 Date 对象中月的某一天 (1 ~ 31)。\ndate.setDate(25); //Wed Jul 25 2018 11:52:15 GMT+0800 (中国标准时间)\n\n// setTime()：以毫秒设置 Date 对象。\ndate.setTime(77771564221); \nconsole.log(date) //Mon Jun 19 1972 11:12:44 GMT+0800 (中国标准时间)\n\n// toTimeString()：把 Date 对象的时间部分转换为字符串。\nconsole.log(date.toTimeString()); => 11:58:45 GMT+0800 (中国标准时间)\n\n// toDateString()：把 Date 对象的日期部分转换为字符串。\nconsole.log(date.toDateString()); => Thu Jul 19 2018\n\n```\n\n\n## 二：Date()对象组合高级用法：\n\n```js\n//将毫秒转换为yyyy-MM-dd HH:mm:ss日期格式\nfunction dateFormat(seconds) {\n    let date = new Date(seconds),\n        year = date.getFullYear(),\n        month = date.getMonth() + 1,\n        day = date.getDate(),\n        hour = date.getHours(),\n        min = date.getMinutes(),\n        s = date.getSeconds();\n    return `${year}-${formatNum(month)}-${formatNum(day)} ${formatNum(hour)}:${formatNum(min)}:${formatNum(s)}`;\n}\n\n//转换为yyyy-MM-dd日期格式\nfunction dateFormatShort(date) {\n    let year = date.getFullYear(),\n    month = date.getMonth() + 1,\n    day = date.getDate();\n    return `${year}-${formatNum(month)}-${formatNum(day)}`;\n}\n\n//将yyyy-MM-dd HH:mm:ss转化为毫秒数\nfunction formatMilliseconds(str){\n    // str = '2018-7-19 15:14:30';\n    str = str.replace(/-/g,'/');//由于部分浏览器以及一些低版本浏览器不兼容new Date(yyyy-MM-dd HH:mm:ss)\n    let date = new Date(str);\n    return date.getTime();\n}\n\n//获取两个时间的秒数差\nfunction SecondsDiff(startDate,endDate){\n    startDate = \"2018-7-18 10:56:23\",endDate = \"2018-7-19 12:00:00\";\n    let startTime = formatMilliseconds(startDate),//获得毫秒数\n        endTime = formatMilliseconds(endDate),\n        milliseconds = endTime - startTime;//毫秒数之差\n    return parseInt(milliseconds/1000);\n}\n\n//根据剩余秒数获取剩余HH:mm:ss（应用在活动倒计时或物品过期还有多久'dd天HH小时'）\nfunction secondsFormat(seconds){\n    seconds = SecondsDiff();\n    let day = Math.floor(seconds / 3600 / 24),\n        hour = Math.floor((seconds % 86400) / 3600),\n        min = Math.floor((seconds % 86400 % 3600) / 60 ),\n        second = Math.floor(seconds % 86400 % 3600 % 60);\n        hour += day * 24;\n    return `${formatNum(hour)}:${formatNum(min)}:${formatNum(second)}`;//为什么只计算天数,因为一般活动只在相邻几天\n}\n    \n//获得某月的天数　　 \nfunction getMonthDays(year, month) {\n    let nowDate = new Date(year,month,0),\n        days = nowDate.getDate();\n    return days;\n}\n\n//补0操作\nfunction formatNum(e) {\n    return e >= 10 ? e : `0${e}`;\n}\n\t\n```\n\n\n## 三：对当前时间的判定：\n\n```js\n//判断时间是否是今天\nfunction isToday(str){\n    str = new Date(str.replace(/-/g,\"/\"));\n    if (str.toDateString() === new Date().toDateString()) {//今天\n        return true;\n    } else if (new Date(str) > new Date()){\n        return false;\n    }\n}\n\n/**\n* 判断某个时间是前天、昨天、今天、明天、后天\n* @now:当前服务器时间\n*/\nfunction daysText(str,now){\n    let date = str.substring(0,str.indexOf(\"-\")+6);\n    now = new Date(now.replace(/-/g,'/'));\n    now = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    str = new Date(str.replace(/-/g,'/'));\n    str = new Date(str.getFullYear(), str.getMonth(), str.getDate());\n    let diff = (str - now) / 1000 / 60 / 60 / 24;\n    if (diff < -1) {\n        return \"前天\";\n    } else if (diff < -0) {\n        return \"昨天\"\n    } else if (diff == 0) {\n        return \"今天\";\n    } else if (diff < 2) {\n        return \"明日\";\n    } else if (diff < 3) {\n        return \"后天\";\n    } else {\n        return date;\n    }\n}\n\n//判断是否超过48小时\nfunction overTime(seconds) {\n    let diffSeconds = Math.floor((new Date().getTime() - seconds)/1000),\n        days = Math.floor(diffSeconds / 86400),\n        hour = Math.floor(diffSeconds % 86400 / 3600),\n        min = Math.floor((diffSeconds % 86400 % 3600) / 60 )\n        second = Math.floor(diffSeconds % 86400 % 3600 % 60);\n\n    if(days>2){//超过两天超时\n        return 0;\n    }else if(days==2){ //刚好两天判断时分秒\n        if(hour==0){ \n            if(min==0){\n                if(second==0){\n                    return 1;\n                }else{ //有多余秒数，超时\n                    return 0;\n                }\n            }else{ //有多余分钟，超时\n                return 0;\n            }\n        }else{ //还有多余小时，超时\n            return 0;\n        }\n    }else { //小于两天则没有超时\n        return 1;\n    }\n}\n\n/**\n * 判断某个时间相对于现在过了多久\n * seconds:毫秒数\n */\nfunction pastTimes(seconds){\n    //得到时间\n    let dateTime;\n\n    //传入时间\n    let starDate = new Date(seconds),\n        starYear = starDate.getFullYear(), //年\n        starMonth = starDate.getMonth() + 1, //月\n        starDay = starDate.getDate(),     //日\n        starHour = starDate.getHours(),   //时\n        starMin = starDate.getMinutes(),  //分\n        starSen = starDate.getSeconds(); //秒\n\n    //当前时间\n    let nowDate = new Date(),\n        nowYear = nowDate.getFullYear(), //年\n        nowMonth = nowDate.getMonth() + 1, //月\n        nowDay = nowDate.getDate(),     //日\n        nowHour = nowDate.getHours(),   //时\n        nowMin = nowDate.getMinutes(),  //分\n        nowSen = nowDate.getSeconds();  //秒\n    //判断是否在同一年\n    if (starYear == nowYear) {\n        //判断是否是同一个月\n        if (starMonth == nowMonth) {\n             //判断在今天昨天或者前天\n            let diffDay = nowDay - starDay;\n            if (diffDay == 0) {//今天\n                //判断小时数\n                let diffHours = nowHour - starHour;\n                let diffMinutes = nowMin - starMin;\n                if (diffHours == 0) {\n                    if (diffMinutes >= 0 && diffMinutes < 2) {\n                        dateTime = \"刚刚\";\n                    } else if (diffMinutes >= 2) {\n                        dateTime = diffMinutes + \"分钟前\";\n                    }\n                }else if (diffHours == 1) {\n                    if (diffMinutes < 0) {\n                        let minute = (60 - starMin) + (nowMin - 0);\n                        dateTime = minute + \"分钟前\";\n                    } else if (diffMinutes > 0) {\n                        dateTime = \"1个小时前\";\n                    }\n                }else if (diffHours == 2) {\n                     if (diffMinutes < 0) {\n                        dateTime = \"1个小时前\";\n                    } else if (diffMinutes > 0) {\n                        dateTime = \"2个小时前\";\n                    }\n                }else{\n                    dateTime = formatNum(starHour) + ':' + formatNum(starMin);\n                }\n\n            }else if(diffDay == 1) {//昨天\n                dateTime = '昨天' + formatNum(starHour) + ':' + formatNum(starMin);\n            }else if (diffDay == 2) {//前天\n                dateTime = '前天' + formatNum(starHour) + ':' + formatNum(starMin);\n            }else{\n                dateTime = formatNum(starMonth) + '-' + formatNum(starDay) + ' ' + formatNum(starHour) + ':' + formatNum(starMin);\n            }\n        }else{\n            //不在同一个月且在同一年的不显示年份\n            dateTime = formatNum(starMonth) + '-' + formatNum(starDay) + ' ' + formatNum(starHour) + ':' + formatNum(starMin);\n        }\n    }else{\n        //不在同一年的显示年月日时分\n        dateTime = starYear + '-' + formatNum(starMonth) + '-' + formatNum(starDay) + ' ' + formatNum(starHour) + ':' + formatNum(starMin);\n    }\n\n    return dateTime\n    \n}\n\n```","slug":"js Date对象的详细使用","published":1,"updated":"2023-07-19T03:06:15.024Z","_id":"clk82gyjo000i31640znb7wfb","comments":1,"layout":"post","photos":[],"link":"","content":"<span id=\"more\"></span>\n\n<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>&ensp;&ensp;&ensp;&ensp;最近发现Date对象在项目中真的是无处不在，几乎做过的所有项目中都有Date的各种用法，然而每次要使用的时候都是各种百度，自己既没有掌握Date的详细用法，也使得每次做项目都浪费很多时间，所以特此研究一下记录下来。</p>\n<h2 id=\"一：Date-对象基本方法示例：\"><a href=\"#一：Date-对象基本方法示例：\" class=\"headerlink\" title=\"一：Date()对象基本方法示例：\"></a>一：Date()对象基本方法示例：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Date()：返回当日的日期和时间。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();<span class=\"comment\">//Thu Jul 19 2018 10:46:06 GMT+0800</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getDay()：从 Date 对象返回一周中的某一天 (0 ~ 6)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getDay</span>();\t\t<span class=\"comment\">//4 今天是星期四</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getFullYear()：从 Date 对象以四位数字返回年份。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getFullYear</span>();\t\t<span class=\"comment\">//2018</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getMonth()：从 Date 对象返回月份 (0 ~ 11)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getMonth</span>();\t\t<span class=\"comment\">//6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getDate()：从 Date 对象返回一个月中的某一天 (1 ~ 31)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getDate</span>();\t\t<span class=\"comment\">//19</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getHours()：返回 Date 对象的小时 (0 ~ 23)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getHours</span>();\t\t<span class=\"comment\">//10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getMinutes()：返回 Date 对象的分钟 (0 ~ 59)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getMinutes</span>();\t\t<span class=\"comment\">//53</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getSeconds()：返回 Date 对象的秒数 (0 ~ 59)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getSeconds</span>();\t\t<span class=\"comment\">//5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getMilliseconds()：返回 Date 对象的毫秒(0 ~ 999)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getMilliseconds</span>();\t\t<span class=\"comment\">//522</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getTime()：返回 1970 年 1 月 1 日至今的毫秒数。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getTime</span>();\t\t<span class=\"comment\">//1531968785522</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// setFullYear()：设置 Date 对象中的年份（四位数字）。</span></span><br><span class=\"line\">date.<span class=\"title function_\">setFullYear</span>(<span class=\"number\">1995</span>); <span class=\"comment\">//1531968785522</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// setMonth()：设置 Date 对象中月份 (0 ~ 11)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">setMonth</span>(<span class=\"number\">8</span>); <span class=\"comment\">//Wed Sep 19 2018 11:51:48 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// setDate()：设置 Date 对象中月的某一天 (1 ~ 31)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">setDate</span>(<span class=\"number\">25</span>); <span class=\"comment\">//Wed Jul 25 2018 11:52:15 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// setTime()：以毫秒设置 Date 对象。</span></span><br><span class=\"line\">date.<span class=\"title function_\">setTime</span>(<span class=\"number\">77771564221</span>); </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date) <span class=\"comment\">//Mon Jun 19 1972 11:12:44 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// toTimeString()：把 Date 对象的时间部分转换为字符串。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date.<span class=\"title function_\">toTimeString</span>()); =&gt; <span class=\"number\">11</span>:<span class=\"number\">58</span>:<span class=\"number\">45</span> <span class=\"variable constant_\">GMT</span>+<span class=\"number\">0800</span> (中国标准时间)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// toDateString()：把 Date 对象的日期部分转换为字符串。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date.<span class=\"title function_\">toDateString</span>()); =&gt; <span class=\"title class_\">Thu</span> <span class=\"title class_\">Jul</span> <span class=\"number\">19</span> <span class=\"number\">2018</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"二：Date-对象组合高级用法：\"><a href=\"#二：Date-对象组合高级用法：\" class=\"headerlink\" title=\"二：Date()对象组合高级用法：\"></a>二：Date()对象组合高级用法：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将毫秒转换为yyyy-MM-dd HH:mm:ss日期格式</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dateFormat</span>(<span class=\"params\">seconds</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(seconds),</span><br><span class=\"line\">        year = date.<span class=\"title function_\">getFullYear</span>(),</span><br><span class=\"line\">        month = date.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>,</span><br><span class=\"line\">        day = date.<span class=\"title function_\">getDate</span>(),</span><br><span class=\"line\">        hour = date.<span class=\"title function_\">getHours</span>(),</span><br><span class=\"line\">        min = date.<span class=\"title function_\">getMinutes</span>(),</span><br><span class=\"line\">        s = date.<span class=\"title function_\">getSeconds</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;year&#125;</span>-<span class=\"subst\">$&#123;formatNum(month)&#125;</span>-<span class=\"subst\">$&#123;formatNum(day)&#125;</span> <span class=\"subst\">$&#123;formatNum(hour)&#125;</span>:<span class=\"subst\">$&#123;formatNum(min)&#125;</span>:<span class=\"subst\">$&#123;formatNum(s)&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//转换为yyyy-MM-dd日期格式</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dateFormatShort</span>(<span class=\"params\">date</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> year = date.<span class=\"title function_\">getFullYear</span>(),</span><br><span class=\"line\">    month = date.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>,</span><br><span class=\"line\">    day = date.<span class=\"title function_\">getDate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;year&#125;</span>-<span class=\"subst\">$&#123;formatNum(month)&#125;</span>-<span class=\"subst\">$&#123;formatNum(day)&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将yyyy-MM-dd HH:mm:ss转化为毫秒数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">formatMilliseconds</span>(<span class=\"params\">str</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// str = &#x27;2018-7-19 15:14:30&#x27;;</span></span><br><span class=\"line\">    str = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/-/g</span>,<span class=\"string\">&#x27;/&#x27;</span>);<span class=\"comment\">//由于部分浏览器以及一些低版本浏览器不兼容new Date(yyyy-MM-dd HH:mm:ss)</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(str);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> date.<span class=\"title function_\">getTime</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取两个时间的秒数差</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SecondsDiff</span>(<span class=\"params\">startDate,endDate</span>)&#123;</span><br><span class=\"line\">    startDate = <span class=\"string\">&quot;2018-7-18 10:56:23&quot;</span>,endDate = <span class=\"string\">&quot;2018-7-19 12:00:00&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> startTime = <span class=\"title function_\">formatMilliseconds</span>(startDate),<span class=\"comment\">//获得毫秒数</span></span><br><span class=\"line\">        endTime = <span class=\"title function_\">formatMilliseconds</span>(endDate),</span><br><span class=\"line\">        milliseconds = endTime - startTime;<span class=\"comment\">//毫秒数之差</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(milliseconds/<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据剩余秒数获取剩余HH:mm:ss（应用在活动倒计时或物品过期还有多久&#x27;dd天HH小时&#x27;）</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">secondsFormat</span>(<span class=\"params\">seconds</span>)&#123;</span><br><span class=\"line\">    seconds = <span class=\"title class_\">SecondsDiff</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> day = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(seconds / <span class=\"number\">3600</span> / <span class=\"number\">24</span>),</span><br><span class=\"line\">        hour = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((seconds % <span class=\"number\">86400</span>) / <span class=\"number\">3600</span>),</span><br><span class=\"line\">        min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((seconds % <span class=\"number\">86400</span> % <span class=\"number\">3600</span>) / <span class=\"number\">60</span> ),</span><br><span class=\"line\">        second = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(seconds % <span class=\"number\">86400</span> % <span class=\"number\">3600</span> % <span class=\"number\">60</span>);</span><br><span class=\"line\">        hour += day * <span class=\"number\">24</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;formatNum(hour)&#125;</span>:<span class=\"subst\">$&#123;formatNum(min)&#125;</span>:<span class=\"subst\">$&#123;formatNum(second)&#125;</span>`</span>;<span class=\"comment\">//为什么只计算天数,因为一般活动只在相邻几天</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//获得某月的天数　　 </span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getMonthDays</span>(<span class=\"params\">year, month</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nowDate = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(year,month,<span class=\"number\">0</span>),</span><br><span class=\"line\">        days = nowDate.<span class=\"title function_\">getDate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> days;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//补0操作</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">formatNum</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e &gt;= <span class=\"number\">10</span> ? e : <span class=\"string\">`0<span class=\"subst\">$&#123;e&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"三：对当前时间的判定：\"><a href=\"#三：对当前时间的判定：\" class=\"headerlink\" title=\"三：对当前时间的判定：\"></a>三：对当前时间的判定：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断时间是否是今天</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isToday</span>(<span class=\"params\">str</span>)&#123;</span><br><span class=\"line\">    str = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/-/g</span>,<span class=\"string\">&quot;/&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str.<span class=\"title function_\">toDateString</span>() === <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">toDateString</span>()) &#123;<span class=\"comment\">//今天</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(str) &gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 判断某个时间是前天、昨天、今天、明天、后天</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@now</span>:当前服务器时间</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">daysText</span>(<span class=\"params\">str,now</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> date = str.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>,str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;-&quot;</span>)+<span class=\"number\">6</span>);</span><br><span class=\"line\">    now = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(now.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/-/g</span>,<span class=\"string\">&#x27;/&#x27;</span>));</span><br><span class=\"line\">    now = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(now.<span class=\"title function_\">getFullYear</span>(), now.<span class=\"title function_\">getMonth</span>(), now.<span class=\"title function_\">getDate</span>());</span><br><span class=\"line\">    str = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/-/g</span>,<span class=\"string\">&#x27;/&#x27;</span>));</span><br><span class=\"line\">    str = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(str.<span class=\"title function_\">getFullYear</span>(), str.<span class=\"title function_\">getMonth</span>(), str.<span class=\"title function_\">getDate</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> diff = (str - now) / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span> / <span class=\"number\">24</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (diff &lt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;前天&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff &lt; -<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;昨天&quot;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;今天&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;明日&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;后天&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断是否超过48小时</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">overTime</span>(<span class=\"params\">seconds</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> diffSeconds = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>() - seconds)/<span class=\"number\">1000</span>),</span><br><span class=\"line\">        days = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(diffSeconds / <span class=\"number\">86400</span>),</span><br><span class=\"line\">        hour = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(diffSeconds % <span class=\"number\">86400</span> / <span class=\"number\">3600</span>),</span><br><span class=\"line\">        min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((diffSeconds % <span class=\"number\">86400</span> % <span class=\"number\">3600</span>) / <span class=\"number\">60</span> )</span><br><span class=\"line\">        second = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(diffSeconds % <span class=\"number\">86400</span> % <span class=\"number\">3600</span> % <span class=\"number\">60</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(days&gt;<span class=\"number\">2</span>)&#123;<span class=\"comment\">//超过两天超时</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(days==<span class=\"number\">2</span>)&#123; <span class=\"comment\">//刚好两天判断时分秒</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hour==<span class=\"number\">0</span>)&#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(min==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(second==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//有多余秒数，超时</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//有多余分钟，超时</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//还有多余小时，超时</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123; <span class=\"comment\">//小于两天则没有超时</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断某个时间相对于现在过了多久</span></span><br><span class=\"line\"><span class=\"comment\"> * seconds:毫秒数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pastTimes</span>(<span class=\"params\">seconds</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//得到时间</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> dateTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//传入时间</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> starDate = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(seconds),</span><br><span class=\"line\">        starYear = starDate.<span class=\"title function_\">getFullYear</span>(), <span class=\"comment\">//年</span></span><br><span class=\"line\">        starMonth = starDate.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>, <span class=\"comment\">//月</span></span><br><span class=\"line\">        starDay = starDate.<span class=\"title function_\">getDate</span>(),     <span class=\"comment\">//日</span></span><br><span class=\"line\">        starHour = starDate.<span class=\"title function_\">getHours</span>(),   <span class=\"comment\">//时</span></span><br><span class=\"line\">        starMin = starDate.<span class=\"title function_\">getMinutes</span>(),  <span class=\"comment\">//分</span></span><br><span class=\"line\">        starSen = starDate.<span class=\"title function_\">getSeconds</span>(); <span class=\"comment\">//秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当前时间</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> nowDate = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(),</span><br><span class=\"line\">        nowYear = nowDate.<span class=\"title function_\">getFullYear</span>(), <span class=\"comment\">//年</span></span><br><span class=\"line\">        nowMonth = nowDate.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>, <span class=\"comment\">//月</span></span><br><span class=\"line\">        nowDay = nowDate.<span class=\"title function_\">getDate</span>(),     <span class=\"comment\">//日</span></span><br><span class=\"line\">        nowHour = nowDate.<span class=\"title function_\">getHours</span>(),   <span class=\"comment\">//时</span></span><br><span class=\"line\">        nowMin = nowDate.<span class=\"title function_\">getMinutes</span>(),  <span class=\"comment\">//分</span></span><br><span class=\"line\">        nowSen = nowDate.<span class=\"title function_\">getSeconds</span>();  <span class=\"comment\">//秒</span></span><br><span class=\"line\">    <span class=\"comment\">//判断是否在同一年</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (starYear == nowYear) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否是同一个月</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (starMonth == nowMonth) &#123;</span><br><span class=\"line\">             <span class=\"comment\">//判断在今天昨天或者前天</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> diffDay = nowDay - starDay;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (diffDay == <span class=\"number\">0</span>) &#123;<span class=\"comment\">//今天</span></span><br><span class=\"line\">                <span class=\"comment\">//判断小时数</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> diffHours = nowHour - starHour;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> diffMinutes = nowMin - starMin;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (diffHours == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (diffMinutes &gt;= <span class=\"number\">0</span> &amp;&amp; diffMinutes &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                        dateTime = <span class=\"string\">&quot;刚刚&quot;</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffMinutes &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                        dateTime = diffMinutes + <span class=\"string\">&quot;分钟前&quot;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffHours == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (diffMinutes &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> minute = (<span class=\"number\">60</span> - starMin) + (nowMin - <span class=\"number\">0</span>);</span><br><span class=\"line\">                        dateTime = minute + <span class=\"string\">&quot;分钟前&quot;</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffMinutes &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        dateTime = <span class=\"string\">&quot;1个小时前&quot;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffHours == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                     <span class=\"keyword\">if</span> (diffMinutes &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        dateTime = <span class=\"string\">&quot;1个小时前&quot;</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffMinutes &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        dateTime = <span class=\"string\">&quot;2个小时前&quot;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dateTime = <span class=\"title function_\">formatNum</span>(starHour) + <span class=\"string\">&#x27;:&#x27;</span> + <span class=\"title function_\">formatNum</span>(starMin);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(diffDay == <span class=\"number\">1</span>) &#123;<span class=\"comment\">//昨天</span></span><br><span class=\"line\">                dateTime = <span class=\"string\">&#x27;昨天&#x27;</span> + <span class=\"title function_\">formatNum</span>(starHour) + <span class=\"string\">&#x27;:&#x27;</span> + <span class=\"title function_\">formatNum</span>(starMin);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffDay == <span class=\"number\">2</span>) &#123;<span class=\"comment\">//前天</span></span><br><span class=\"line\">                dateTime = <span class=\"string\">&#x27;前天&#x27;</span> + <span class=\"title function_\">formatNum</span>(starHour) + <span class=\"string\">&#x27;:&#x27;</span> + <span class=\"title function_\">formatNum</span>(starMin);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dateTime = <span class=\"title function_\">formatNum</span>(starMonth) + <span class=\"string\">&#x27;-&#x27;</span> + <span class=\"title function_\">formatNum</span>(starDay) + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"title function_\">formatNum</span>(starHour) + <span class=\"string\">&#x27;:&#x27;</span> + <span class=\"title function_\">formatNum</span>(starMin);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//不在同一个月且在同一年的不显示年份</span></span><br><span class=\"line\">            dateTime = <span class=\"title function_\">formatNum</span>(starMonth) + <span class=\"string\">&#x27;-&#x27;</span> + <span class=\"title function_\">formatNum</span>(starDay) + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"title function_\">formatNum</span>(starHour) + <span class=\"string\">&#x27;:&#x27;</span> + <span class=\"title function_\">formatNum</span>(starMin);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//不在同一年的显示年月日时分</span></span><br><span class=\"line\">        dateTime = starYear + <span class=\"string\">&#x27;-&#x27;</span> + <span class=\"title function_\">formatNum</span>(starMonth) + <span class=\"string\">&#x27;-&#x27;</span> + <span class=\"title function_\">formatNum</span>(starDay) + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"title function_\">formatNum</span>(starHour) + <span class=\"string\">&#x27;:&#x27;</span> + <span class=\"title function_\">formatNum</span>(starMin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dateTime</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>&ensp;&ensp;&ensp;&ensp;最近发现Date对象在项目中真的是无处不在，几乎做过的所有项目中都有Date的各种用法，然而每次要使用的时候都是各种百度，自己既没有掌握Date的详细用法，也使得每次做项目都浪费很多时间，所以特此研究一下记录下来。</p>\n<h2 id=\"一：Date-对象基本方法示例：\"><a href=\"#一：Date-对象基本方法示例：\" class=\"headerlink\" title=\"一：Date()对象基本方法示例：\"></a>一：Date()对象基本方法示例：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Date()：返回当日的日期和时间。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();<span class=\"comment\">//Thu Jul 19 2018 10:46:06 GMT+0800</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getDay()：从 Date 对象返回一周中的某一天 (0 ~ 6)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getDay</span>();\t\t<span class=\"comment\">//4 今天是星期四</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getFullYear()：从 Date 对象以四位数字返回年份。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getFullYear</span>();\t\t<span class=\"comment\">//2018</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getMonth()：从 Date 对象返回月份 (0 ~ 11)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getMonth</span>();\t\t<span class=\"comment\">//6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getDate()：从 Date 对象返回一个月中的某一天 (1 ~ 31)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getDate</span>();\t\t<span class=\"comment\">//19</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getHours()：返回 Date 对象的小时 (0 ~ 23)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getHours</span>();\t\t<span class=\"comment\">//10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getMinutes()：返回 Date 对象的分钟 (0 ~ 59)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getMinutes</span>();\t\t<span class=\"comment\">//53</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getSeconds()：返回 Date 对象的秒数 (0 ~ 59)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getSeconds</span>();\t\t<span class=\"comment\">//5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getMilliseconds()：返回 Date 对象的毫秒(0 ~ 999)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getMilliseconds</span>();\t\t<span class=\"comment\">//522</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// getTime()：返回 1970 年 1 月 1 日至今的毫秒数。</span></span><br><span class=\"line\">date.<span class=\"title function_\">getTime</span>();\t\t<span class=\"comment\">//1531968785522</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// setFullYear()：设置 Date 对象中的年份（四位数字）。</span></span><br><span class=\"line\">date.<span class=\"title function_\">setFullYear</span>(<span class=\"number\">1995</span>); <span class=\"comment\">//1531968785522</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// setMonth()：设置 Date 对象中月份 (0 ~ 11)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">setMonth</span>(<span class=\"number\">8</span>); <span class=\"comment\">//Wed Sep 19 2018 11:51:48 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// setDate()：设置 Date 对象中月的某一天 (1 ~ 31)。</span></span><br><span class=\"line\">date.<span class=\"title function_\">setDate</span>(<span class=\"number\">25</span>); <span class=\"comment\">//Wed Jul 25 2018 11:52:15 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// setTime()：以毫秒设置 Date 对象。</span></span><br><span class=\"line\">date.<span class=\"title function_\">setTime</span>(<span class=\"number\">77771564221</span>); </span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date) <span class=\"comment\">//Mon Jun 19 1972 11:12:44 GMT+0800 (中国标准时间)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// toTimeString()：把 Date 对象的时间部分转换为字符串。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date.<span class=\"title function_\">toTimeString</span>()); =&gt; <span class=\"number\">11</span>:<span class=\"number\">58</span>:<span class=\"number\">45</span> <span class=\"variable constant_\">GMT</span>+<span class=\"number\">0800</span> (中国标准时间)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// toDateString()：把 Date 对象的日期部分转换为字符串。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date.<span class=\"title function_\">toDateString</span>()); =&gt; <span class=\"title class_\">Thu</span> <span class=\"title class_\">Jul</span> <span class=\"number\">19</span> <span class=\"number\">2018</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"二：Date-对象组合高级用法：\"><a href=\"#二：Date-对象组合高级用法：\" class=\"headerlink\" title=\"二：Date()对象组合高级用法：\"></a>二：Date()对象组合高级用法：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将毫秒转换为yyyy-MM-dd HH:mm:ss日期格式</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dateFormat</span>(<span class=\"params\">seconds</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(seconds),</span><br><span class=\"line\">        year = date.<span class=\"title function_\">getFullYear</span>(),</span><br><span class=\"line\">        month = date.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>,</span><br><span class=\"line\">        day = date.<span class=\"title function_\">getDate</span>(),</span><br><span class=\"line\">        hour = date.<span class=\"title function_\">getHours</span>(),</span><br><span class=\"line\">        min = date.<span class=\"title function_\">getMinutes</span>(),</span><br><span class=\"line\">        s = date.<span class=\"title function_\">getSeconds</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;year&#125;</span>-<span class=\"subst\">$&#123;formatNum(month)&#125;</span>-<span class=\"subst\">$&#123;formatNum(day)&#125;</span> <span class=\"subst\">$&#123;formatNum(hour)&#125;</span>:<span class=\"subst\">$&#123;formatNum(min)&#125;</span>:<span class=\"subst\">$&#123;formatNum(s)&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//转换为yyyy-MM-dd日期格式</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dateFormatShort</span>(<span class=\"params\">date</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> year = date.<span class=\"title function_\">getFullYear</span>(),</span><br><span class=\"line\">    month = date.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>,</span><br><span class=\"line\">    day = date.<span class=\"title function_\">getDate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;year&#125;</span>-<span class=\"subst\">$&#123;formatNum(month)&#125;</span>-<span class=\"subst\">$&#123;formatNum(day)&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将yyyy-MM-dd HH:mm:ss转化为毫秒数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">formatMilliseconds</span>(<span class=\"params\">str</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// str = &#x27;2018-7-19 15:14:30&#x27;;</span></span><br><span class=\"line\">    str = str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/-/g</span>,<span class=\"string\">&#x27;/&#x27;</span>);<span class=\"comment\">//由于部分浏览器以及一些低版本浏览器不兼容new Date(yyyy-MM-dd HH:mm:ss)</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(str);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> date.<span class=\"title function_\">getTime</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取两个时间的秒数差</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">SecondsDiff</span>(<span class=\"params\">startDate,endDate</span>)&#123;</span><br><span class=\"line\">    startDate = <span class=\"string\">&quot;2018-7-18 10:56:23&quot;</span>,endDate = <span class=\"string\">&quot;2018-7-19 12:00:00&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> startTime = <span class=\"title function_\">formatMilliseconds</span>(startDate),<span class=\"comment\">//获得毫秒数</span></span><br><span class=\"line\">        endTime = <span class=\"title function_\">formatMilliseconds</span>(endDate),</span><br><span class=\"line\">        milliseconds = endTime - startTime;<span class=\"comment\">//毫秒数之差</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(milliseconds/<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//根据剩余秒数获取剩余HH:mm:ss（应用在活动倒计时或物品过期还有多久&#x27;dd天HH小时&#x27;）</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">secondsFormat</span>(<span class=\"params\">seconds</span>)&#123;</span><br><span class=\"line\">    seconds = <span class=\"title class_\">SecondsDiff</span>();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> day = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(seconds / <span class=\"number\">3600</span> / <span class=\"number\">24</span>),</span><br><span class=\"line\">        hour = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((seconds % <span class=\"number\">86400</span>) / <span class=\"number\">3600</span>),</span><br><span class=\"line\">        min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((seconds % <span class=\"number\">86400</span> % <span class=\"number\">3600</span>) / <span class=\"number\">60</span> ),</span><br><span class=\"line\">        second = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(seconds % <span class=\"number\">86400</span> % <span class=\"number\">3600</span> % <span class=\"number\">60</span>);</span><br><span class=\"line\">        hour += day * <span class=\"number\">24</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;formatNum(hour)&#125;</span>:<span class=\"subst\">$&#123;formatNum(min)&#125;</span>:<span class=\"subst\">$&#123;formatNum(second)&#125;</span>`</span>;<span class=\"comment\">//为什么只计算天数,因为一般活动只在相邻几天</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//获得某月的天数　　 </span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getMonthDays</span>(<span class=\"params\">year, month</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nowDate = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(year,month,<span class=\"number\">0</span>),</span><br><span class=\"line\">        days = nowDate.<span class=\"title function_\">getDate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> days;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//补0操作</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">formatNum</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e &gt;= <span class=\"number\">10</span> ? e : <span class=\"string\">`0<span class=\"subst\">$&#123;e&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"三：对当前时间的判定：\"><a href=\"#三：对当前时间的判定：\" class=\"headerlink\" title=\"三：对当前时间的判定：\"></a>三：对当前时间的判定：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断时间是否是今天</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isToday</span>(<span class=\"params\">str</span>)&#123;</span><br><span class=\"line\">    str = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/-/g</span>,<span class=\"string\">&quot;/&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str.<span class=\"title function_\">toDateString</span>() === <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">toDateString</span>()) &#123;<span class=\"comment\">//今天</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(str) &gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 判断某个时间是前天、昨天、今天、明天、后天</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@now</span>:当前服务器时间</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">daysText</span>(<span class=\"params\">str,now</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> date = str.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>,str.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&quot;-&quot;</span>)+<span class=\"number\">6</span>);</span><br><span class=\"line\">    now = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(now.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/-/g</span>,<span class=\"string\">&#x27;/&#x27;</span>));</span><br><span class=\"line\">    now = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(now.<span class=\"title function_\">getFullYear</span>(), now.<span class=\"title function_\">getMonth</span>(), now.<span class=\"title function_\">getDate</span>());</span><br><span class=\"line\">    str = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/-/g</span>,<span class=\"string\">&#x27;/&#x27;</span>));</span><br><span class=\"line\">    str = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(str.<span class=\"title function_\">getFullYear</span>(), str.<span class=\"title function_\">getMonth</span>(), str.<span class=\"title function_\">getDate</span>());</span><br><span class=\"line\">    <span class=\"keyword\">let</span> diff = (str - now) / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span> / <span class=\"number\">24</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (diff &lt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;前天&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff &lt; -<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;昨天&quot;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;今天&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;明日&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diff &lt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;后天&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断是否超过48小时</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">overTime</span>(<span class=\"params\">seconds</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> diffSeconds = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getTime</span>() - seconds)/<span class=\"number\">1000</span>),</span><br><span class=\"line\">        days = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(diffSeconds / <span class=\"number\">86400</span>),</span><br><span class=\"line\">        hour = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(diffSeconds % <span class=\"number\">86400</span> / <span class=\"number\">3600</span>),</span><br><span class=\"line\">        min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((diffSeconds % <span class=\"number\">86400</span> % <span class=\"number\">3600</span>) / <span class=\"number\">60</span> )</span><br><span class=\"line\">        second = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(diffSeconds % <span class=\"number\">86400</span> % <span class=\"number\">3600</span> % <span class=\"number\">60</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(days&gt;<span class=\"number\">2</span>)&#123;<span class=\"comment\">//超过两天超时</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(days==<span class=\"number\">2</span>)&#123; <span class=\"comment\">//刚好两天判断时分秒</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hour==<span class=\"number\">0</span>)&#123; </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(min==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(second==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//有多余秒数，超时</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//有多余分钟，超时</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//还有多余小时，超时</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123; <span class=\"comment\">//小于两天则没有超时</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断某个时间相对于现在过了多久</span></span><br><span class=\"line\"><span class=\"comment\"> * seconds:毫秒数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pastTimes</span>(<span class=\"params\">seconds</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//得到时间</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> dateTime;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//传入时间</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> starDate = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(seconds),</span><br><span class=\"line\">        starYear = starDate.<span class=\"title function_\">getFullYear</span>(), <span class=\"comment\">//年</span></span><br><span class=\"line\">        starMonth = starDate.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>, <span class=\"comment\">//月</span></span><br><span class=\"line\">        starDay = starDate.<span class=\"title function_\">getDate</span>(),     <span class=\"comment\">//日</span></span><br><span class=\"line\">        starHour = starDate.<span class=\"title function_\">getHours</span>(),   <span class=\"comment\">//时</span></span><br><span class=\"line\">        starMin = starDate.<span class=\"title function_\">getMinutes</span>(),  <span class=\"comment\">//分</span></span><br><span class=\"line\">        starSen = starDate.<span class=\"title function_\">getSeconds</span>(); <span class=\"comment\">//秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当前时间</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> nowDate = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(),</span><br><span class=\"line\">        nowYear = nowDate.<span class=\"title function_\">getFullYear</span>(), <span class=\"comment\">//年</span></span><br><span class=\"line\">        nowMonth = nowDate.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>, <span class=\"comment\">//月</span></span><br><span class=\"line\">        nowDay = nowDate.<span class=\"title function_\">getDate</span>(),     <span class=\"comment\">//日</span></span><br><span class=\"line\">        nowHour = nowDate.<span class=\"title function_\">getHours</span>(),   <span class=\"comment\">//时</span></span><br><span class=\"line\">        nowMin = nowDate.<span class=\"title function_\">getMinutes</span>(),  <span class=\"comment\">//分</span></span><br><span class=\"line\">        nowSen = nowDate.<span class=\"title function_\">getSeconds</span>();  <span class=\"comment\">//秒</span></span><br><span class=\"line\">    <span class=\"comment\">//判断是否在同一年</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (starYear == nowYear) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否是同一个月</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (starMonth == nowMonth) &#123;</span><br><span class=\"line\">             <span class=\"comment\">//判断在今天昨天或者前天</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> diffDay = nowDay - starDay;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (diffDay == <span class=\"number\">0</span>) &#123;<span class=\"comment\">//今天</span></span><br><span class=\"line\">                <span class=\"comment\">//判断小时数</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> diffHours = nowHour - starHour;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> diffMinutes = nowMin - starMin;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (diffHours == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (diffMinutes &gt;= <span class=\"number\">0</span> &amp;&amp; diffMinutes &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                        dateTime = <span class=\"string\">&quot;刚刚&quot;</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffMinutes &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                        dateTime = diffMinutes + <span class=\"string\">&quot;分钟前&quot;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffHours == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (diffMinutes &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> minute = (<span class=\"number\">60</span> - starMin) + (nowMin - <span class=\"number\">0</span>);</span><br><span class=\"line\">                        dateTime = minute + <span class=\"string\">&quot;分钟前&quot;</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffMinutes &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        dateTime = <span class=\"string\">&quot;1个小时前&quot;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffHours == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                     <span class=\"keyword\">if</span> (diffMinutes &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        dateTime = <span class=\"string\">&quot;1个小时前&quot;</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffMinutes &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        dateTime = <span class=\"string\">&quot;2个小时前&quot;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    dateTime = <span class=\"title function_\">formatNum</span>(starHour) + <span class=\"string\">&#x27;:&#x27;</span> + <span class=\"title function_\">formatNum</span>(starMin);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(diffDay == <span class=\"number\">1</span>) &#123;<span class=\"comment\">//昨天</span></span><br><span class=\"line\">                dateTime = <span class=\"string\">&#x27;昨天&#x27;</span> + <span class=\"title function_\">formatNum</span>(starHour) + <span class=\"string\">&#x27;:&#x27;</span> + <span class=\"title function_\">formatNum</span>(starMin);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (diffDay == <span class=\"number\">2</span>) &#123;<span class=\"comment\">//前天</span></span><br><span class=\"line\">                dateTime = <span class=\"string\">&#x27;前天&#x27;</span> + <span class=\"title function_\">formatNum</span>(starHour) + <span class=\"string\">&#x27;:&#x27;</span> + <span class=\"title function_\">formatNum</span>(starMin);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dateTime = <span class=\"title function_\">formatNum</span>(starMonth) + <span class=\"string\">&#x27;-&#x27;</span> + <span class=\"title function_\">formatNum</span>(starDay) + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"title function_\">formatNum</span>(starHour) + <span class=\"string\">&#x27;:&#x27;</span> + <span class=\"title function_\">formatNum</span>(starMin);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//不在同一个月且在同一年的不显示年份</span></span><br><span class=\"line\">            dateTime = <span class=\"title function_\">formatNum</span>(starMonth) + <span class=\"string\">&#x27;-&#x27;</span> + <span class=\"title function_\">formatNum</span>(starDay) + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"title function_\">formatNum</span>(starHour) + <span class=\"string\">&#x27;:&#x27;</span> + <span class=\"title function_\">formatNum</span>(starMin);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//不在同一年的显示年月日时分</span></span><br><span class=\"line\">        dateTime = starYear + <span class=\"string\">&#x27;-&#x27;</span> + <span class=\"title function_\">formatNum</span>(starMonth) + <span class=\"string\">&#x27;-&#x27;</span> + <span class=\"title function_\">formatNum</span>(starDay) + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"title function_\">formatNum</span>(starHour) + <span class=\"string\">&#x27;:&#x27;</span> + <span class=\"title function_\">formatNum</span>(starMin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dateTime</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"js 将对象数组中具有相同值的对象取出组成新的数组","author":"熊 超","date":"2018-07-26T06:58:00.000Z","_content":"<!--more-->\n\n### 实现方法：\n```js\nlet arr = [\n  {\n    \"id\": 577,\n    \"name\": \"艾杜纱 毛孔洁净洗面奶\",\n    \"skuName\": \"125mL\",\n    \"image\": \"commodityImage/haZW5gLF.jpg\",\n    \"price\": 122.32,\n    \"store\": 327,\n    \"status\": 1,\n    \"brandId\": 18,\n    \"categoryId\": 32\n  }, {\n    \"id\": 536,\n    \"name\": \"心机彩妆 星魅霓光唇膏\",\n    \"skuName\": \"BE300\",\n    \"image\": \"commodityImage/ibg54OOx.jpg\",\n    \"price\": 273.65,\n    \"store\": 50,\n    \"status\": 1,\n    \"brandId\": 17,\n    \"categoryId\": 33\n  }, {\n    \"id\": 546,\n    \"name\": \"心机彩妆 炫眉膏\",\n    \"skuName\": \"77\",\n    \"image\": \"commodityImage/356LBmxe.jpg\",\n    \"price\": 160.68,\n    \"store\": 20,\n    \"status\": 1,\n    \"brandId\": 17,\n    \"categoryId\": 20\n  }\n]\n\nconsole.log(arr,'原始数组');\nconsole.log(sortArr(arr, 'brandId'),'转化后的数组');\n\n/**\n* arr 要转化的数组\n* key 根据某一键转化\n*/\nfunction sortArr(arr, key) {\n  let newArr = [],\n      tempArr = [],\n      temp;\n\n  // 按照特定的参数将数组排序，将具有相同值的排在一起\n  arr = arr.sort(function(a, b) {\n      let s = a[key],\n          t = b[key];\n\n      return s < t ? -1 : 1;\n  });\n  console.log(arr,\"排序之后的数组\");\n\n  if ( arr.length ){\n      temp = arr[0][key];\n  }\n\n  // 将相同类别的对象添加到统一个数组\n  for (let i in arr) {\n      if ( arr[i][key] === temp ){\n          tempArr.push( arr[i] );\n      } else {\n          temp = arr[i][key];\n          newArr.push(tempArr);\n          tempArr = [arr[i]];\n      }\n  }\n  // 将最后的内容推出新数组\n  newArr.push(tempArr);\n  return newArr;\n}\n\n```\n### 结果：\n\n![](http://xiongcao.github.io/blogImage/201807271015_408.png)\n![](http://xiongcao.github.io/blogImage/201807271015_241.png)\n","source":"_posts/js-将对象数组中具有相同值的对象取出组成新的数组.md","raw":"title: js 将对象数组中具有相同值的对象取出组成新的数组\nauthor: 熊 超\ntags:\n  - js\n  - Array\ncategories:\n  - javascript\ndate: 2018-07-26 14:58:00\n---\n<!--more-->\n\n### 实现方法：\n```js\nlet arr = [\n  {\n    \"id\": 577,\n    \"name\": \"艾杜纱 毛孔洁净洗面奶\",\n    \"skuName\": \"125mL\",\n    \"image\": \"commodityImage/haZW5gLF.jpg\",\n    \"price\": 122.32,\n    \"store\": 327,\n    \"status\": 1,\n    \"brandId\": 18,\n    \"categoryId\": 32\n  }, {\n    \"id\": 536,\n    \"name\": \"心机彩妆 星魅霓光唇膏\",\n    \"skuName\": \"BE300\",\n    \"image\": \"commodityImage/ibg54OOx.jpg\",\n    \"price\": 273.65,\n    \"store\": 50,\n    \"status\": 1,\n    \"brandId\": 17,\n    \"categoryId\": 33\n  }, {\n    \"id\": 546,\n    \"name\": \"心机彩妆 炫眉膏\",\n    \"skuName\": \"77\",\n    \"image\": \"commodityImage/356LBmxe.jpg\",\n    \"price\": 160.68,\n    \"store\": 20,\n    \"status\": 1,\n    \"brandId\": 17,\n    \"categoryId\": 20\n  }\n]\n\nconsole.log(arr,'原始数组');\nconsole.log(sortArr(arr, 'brandId'),'转化后的数组');\n\n/**\n* arr 要转化的数组\n* key 根据某一键转化\n*/\nfunction sortArr(arr, key) {\n  let newArr = [],\n      tempArr = [],\n      temp;\n\n  // 按照特定的参数将数组排序，将具有相同值的排在一起\n  arr = arr.sort(function(a, b) {\n      let s = a[key],\n          t = b[key];\n\n      return s < t ? -1 : 1;\n  });\n  console.log(arr,\"排序之后的数组\");\n\n  if ( arr.length ){\n      temp = arr[0][key];\n  }\n\n  // 将相同类别的对象添加到统一个数组\n  for (let i in arr) {\n      if ( arr[i][key] === temp ){\n          tempArr.push( arr[i] );\n      } else {\n          temp = arr[i][key];\n          newArr.push(tempArr);\n          tempArr = [arr[i]];\n      }\n  }\n  // 将最后的内容推出新数组\n  newArr.push(tempArr);\n  return newArr;\n}\n\n```\n### 结果：\n\n![](http://xiongcao.github.io/blogImage/201807271015_408.png)\n![](http://xiongcao.github.io/blogImage/201807271015_241.png)\n","slug":"js-将对象数组中具有相同值的对象取出组成新的数组","published":1,"updated":"2023-07-19T03:06:26.960Z","_id":"clk82gyjp000n31646w6e41cf","comments":1,"layout":"post","photos":[],"link":"","content":"<span id=\"more\"></span>\n\n<h3 id=\"实现方法：\"><a href=\"#实现方法：\" class=\"headerlink\" title=\"实现方法：\"></a>实现方法：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">577</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;艾杜纱 毛孔洁净洗面奶&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;skuName&quot;</span>: <span class=\"string\">&quot;125mL&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;image&quot;</span>: <span class=\"string\">&quot;commodityImage/haZW5gLF.jpg&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;price&quot;</span>: <span class=\"number\">122.32</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;store&quot;</span>: <span class=\"number\">327</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;status&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;brandId&quot;</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;categoryId&quot;</span>: <span class=\"number\">32</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">536</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;心机彩妆 星魅霓光唇膏&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;skuName&quot;</span>: <span class=\"string\">&quot;BE300&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;image&quot;</span>: <span class=\"string\">&quot;commodityImage/ibg54OOx.jpg&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;price&quot;</span>: <span class=\"number\">273.65</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;store&quot;</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;status&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;brandId&quot;</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;categoryId&quot;</span>: <span class=\"number\">33</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">546</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;心机彩妆 炫眉膏&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;skuName&quot;</span>: <span class=\"string\">&quot;77&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;image&quot;</span>: <span class=\"string\">&quot;commodityImage/356LBmxe.jpg&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;price&quot;</span>: <span class=\"number\">160.68</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;store&quot;</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;status&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;brandId&quot;</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;categoryId&quot;</span>: <span class=\"number\">20</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr,<span class=\"string\">&#x27;原始数组&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sortArr</span>(arr, <span class=\"string\">&#x27;brandId&#x27;</span>),<span class=\"string\">&#x27;转化后的数组&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* arr 要转化的数组</span></span><br><span class=\"line\"><span class=\"comment\">* key 根据某一键转化</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sortArr</span>(<span class=\"params\">arr, key</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newArr = [],</span><br><span class=\"line\">      tempArr = [],</span><br><span class=\"line\">      temp;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 按照特定的参数将数组排序，将具有相同值的排在一起</span></span><br><span class=\"line\">  arr = arr.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> s = a[key],</span><br><span class=\"line\">          t = b[key];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> s &lt; t ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr,<span class=\"string\">&quot;排序之后的数组&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( arr.<span class=\"property\">length</span> )&#123;</span><br><span class=\"line\">      temp = arr[<span class=\"number\">0</span>][key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将相同类别的对象添加到统一个数组</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( arr[i][key] === temp )&#123;</span><br><span class=\"line\">          tempArr.<span class=\"title function_\">push</span>( arr[i] );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          temp = arr[i][key];</span><br><span class=\"line\">          newArr.<span class=\"title function_\">push</span>(tempArr);</span><br><span class=\"line\">          tempArr = [arr[i]];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 将最后的内容推出新数组</span></span><br><span class=\"line\">  newArr.<span class=\"title function_\">push</span>(tempArr);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h3><p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201807271015_408.png\"\n                     \n                ><br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201807271015_241.png\"\n                     \n                ></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"实现方法：\"><a href=\"#实现方法：\" class=\"headerlink\" title=\"实现方法：\"></a>实现方法：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">577</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;艾杜纱 毛孔洁净洗面奶&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;skuName&quot;</span>: <span class=\"string\">&quot;125mL&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;image&quot;</span>: <span class=\"string\">&quot;commodityImage/haZW5gLF.jpg&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;price&quot;</span>: <span class=\"number\">122.32</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;store&quot;</span>: <span class=\"number\">327</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;status&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;brandId&quot;</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;categoryId&quot;</span>: <span class=\"number\">32</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">536</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;心机彩妆 星魅霓光唇膏&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;skuName&quot;</span>: <span class=\"string\">&quot;BE300&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;image&quot;</span>: <span class=\"string\">&quot;commodityImage/ibg54OOx.jpg&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;price&quot;</span>: <span class=\"number\">273.65</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;store&quot;</span>: <span class=\"number\">50</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;status&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;brandId&quot;</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;categoryId&quot;</span>: <span class=\"number\">33</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"number\">546</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;心机彩妆 炫眉膏&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;skuName&quot;</span>: <span class=\"string\">&quot;77&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;image&quot;</span>: <span class=\"string\">&quot;commodityImage/356LBmxe.jpg&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;price&quot;</span>: <span class=\"number\">160.68</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;store&quot;</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;status&quot;</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;brandId&quot;</span>: <span class=\"number\">17</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;categoryId&quot;</span>: <span class=\"number\">20</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr,<span class=\"string\">&#x27;原始数组&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sortArr</span>(arr, <span class=\"string\">&#x27;brandId&#x27;</span>),<span class=\"string\">&#x27;转化后的数组&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* arr 要转化的数组</span></span><br><span class=\"line\"><span class=\"comment\">* key 根据某一键转化</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sortArr</span>(<span class=\"params\">arr, key</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newArr = [],</span><br><span class=\"line\">      tempArr = [],</span><br><span class=\"line\">      temp;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 按照特定的参数将数组排序，将具有相同值的排在一起</span></span><br><span class=\"line\">  arr = arr.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> s = a[key],</span><br><span class=\"line\">          t = b[key];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> s &lt; t ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr,<span class=\"string\">&quot;排序之后的数组&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( arr.<span class=\"property\">length</span> )&#123;</span><br><span class=\"line\">      temp = arr[<span class=\"number\">0</span>][key];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将相同类别的对象添加到统一个数组</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( arr[i][key] === temp )&#123;</span><br><span class=\"line\">          tempArr.<span class=\"title function_\">push</span>( arr[i] );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          temp = arr[i][key];</span><br><span class=\"line\">          newArr.<span class=\"title function_\">push</span>(tempArr);</span><br><span class=\"line\">          tempArr = [arr[i]];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 将最后的内容推出新数组</span></span><br><span class=\"line\">  newArr.<span class=\"title function_\">push</span>(tempArr);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h3><p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201807271015_408.png\"\n                     \n                ><br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201807271015_241.png\"\n                     \n                ></p>"},{"title":"js经典排序算法","author":"熊 超","date":"2018-07-27T07:19:00.000Z","_content":"<!--more-->\n\n### 1.冒泡排序（Bubble Sort）\n\n冒泡排序动图演示：\n![](http://xiongcao.github.io/blogImage/1867034-e19840224b331fae.gif)\n\n```\n定义： 比较相邻的前后二个数据，如果前面数据大于后面的数据，就将二个 数据交换。\n对数组的第0个数据到N-1个数据进行一次遍历后，最大的一个数据就“沉”到数组第N-1个位置。\nN=N-1，如果N不为0就重复前面二步，否则排序完成。\n```\n```js\nfunction bubbleSort(arr){\n    var len = arr.length;\n    for(var i = 0;i < len;i++){\n        for(var j = 0;j < len - 1 - i;j++){\n            if(arr[j]>arr[j+1]){\n                var temp = arr[j];\n                arr[j+1] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}\n```\n### 2.选择排序（Selection Sort）\n\n选择排序动图演示：\n![](http://xiongcao.github.io/blogImage/1867034-c6cc220cfb2b9ac8.gif)\n\n```js\n/**\n* 比如在一个长度为N的无序数组中，在第一趟遍历N个数据，找出其中最小的数值与\n* 第一个元素交换，第二趟遍历剩下的N-1个数据，找出其中最小的数值与第二个元\n* 素交换……第N-1趟遍历剩下的2个数据，找出其中最小的数值与第N-1个元素交换，\n* 至此选择排序完成。\n*/\nfunction selectSort(arr){\n    var min,temp;\n    for(var i=0;i<arr.length-1;i++){\n        min=i;\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[j]<arr[min]){\n                min = j;\n            }\n        }\n        temp=arr[i];\n        arr[i]=arr[min];\n        arr[min]=temp;\n\n    }\n    return arr;\n}\n```\n\n### 3.插入排序（Insertion Sort）\n\n插入排序动图演示：\n![](http://xiongcao.github.io/blogImage/1867034-d1537e355abdd298.gif)\n\n```\n从第一个元素开始，该元素可以认为已经被排序； \n取出下一个元素，在已经排序的元素序列中从后向前扫描； \n如果该元素（已排序）大于新元素，将该元素移到下一位置； \n重复步骤3，直到找到已排序的元素小于或者等于新元素的位置； \n将新元素插入到该位置后； \n重复步骤2~5。\n```\n```js\nfunction insertionSort(arr) {\n    var len = arr.length;\n    var preIndex, current;\n    for (var i = 1; i < len; i++) {\n        preIndex = i - 1;\n        current = arr[i];\n        while(preIndex >= 0 && arr[preIndex] > current) {\n            arr[preIndex+1] = arr[preIndex];\n            preIndex--;\n        }\n        arr[preIndex+1] = current;\n    }\n    return arr;\n}\n```\n\n### 4.快速排序（Quick Sort）\n快速排序动图演示：\n![](http://xiongcao.github.io/blogImage/1867034-cd65e35d7dce5045.gif)\n\n```\n先从数列中取出一个数作为基准数。\n分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。\n再对左右区间重复第二步，直到各区间只有一个数。\n```\n\n```js\nfunction quickSort(arr){\n    if(arr.length<2){\n        return arr\n    }\n    var left=[],right=[],mid=arr.splice(Math.floor(arr.length/2),1);\n    for(var i=0;i<arr.length;i++){\n            if(arr[i]<mid){\n                left.push(arr[i]);\n            }else {\n                right.push(arr[i])\n            }\n    }\n    return bubbleSort(left).concat(mid,bubbleSort(right))\n  }\n```","source":"_posts/js经典算法.md","raw":"title: js经典排序算法\nauthor: 熊 超\ntags:\n  - Array\n  - sort\ncategories:\n  - 算法\ndate: 2018-07-27 15:19:00\n---\n<!--more-->\n\n### 1.冒泡排序（Bubble Sort）\n\n冒泡排序动图演示：\n![](http://xiongcao.github.io/blogImage/1867034-e19840224b331fae.gif)\n\n```\n定义： 比较相邻的前后二个数据，如果前面数据大于后面的数据，就将二个 数据交换。\n对数组的第0个数据到N-1个数据进行一次遍历后，最大的一个数据就“沉”到数组第N-1个位置。\nN=N-1，如果N不为0就重复前面二步，否则排序完成。\n```\n```js\nfunction bubbleSort(arr){\n    var len = arr.length;\n    for(var i = 0;i < len;i++){\n        for(var j = 0;j < len - 1 - i;j++){\n            if(arr[j]>arr[j+1]){\n                var temp = arr[j];\n                arr[j+1] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}\n```\n### 2.选择排序（Selection Sort）\n\n选择排序动图演示：\n![](http://xiongcao.github.io/blogImage/1867034-c6cc220cfb2b9ac8.gif)\n\n```js\n/**\n* 比如在一个长度为N的无序数组中，在第一趟遍历N个数据，找出其中最小的数值与\n* 第一个元素交换，第二趟遍历剩下的N-1个数据，找出其中最小的数值与第二个元\n* 素交换……第N-1趟遍历剩下的2个数据，找出其中最小的数值与第N-1个元素交换，\n* 至此选择排序完成。\n*/\nfunction selectSort(arr){\n    var min,temp;\n    for(var i=0;i<arr.length-1;i++){\n        min=i;\n        for(var j=i+1;j<arr.length;j++){\n            if(arr[j]<arr[min]){\n                min = j;\n            }\n        }\n        temp=arr[i];\n        arr[i]=arr[min];\n        arr[min]=temp;\n\n    }\n    return arr;\n}\n```\n\n### 3.插入排序（Insertion Sort）\n\n插入排序动图演示：\n![](http://xiongcao.github.io/blogImage/1867034-d1537e355abdd298.gif)\n\n```\n从第一个元素开始，该元素可以认为已经被排序； \n取出下一个元素，在已经排序的元素序列中从后向前扫描； \n如果该元素（已排序）大于新元素，将该元素移到下一位置； \n重复步骤3，直到找到已排序的元素小于或者等于新元素的位置； \n将新元素插入到该位置后； \n重复步骤2~5。\n```\n```js\nfunction insertionSort(arr) {\n    var len = arr.length;\n    var preIndex, current;\n    for (var i = 1; i < len; i++) {\n        preIndex = i - 1;\n        current = arr[i];\n        while(preIndex >= 0 && arr[preIndex] > current) {\n            arr[preIndex+1] = arr[preIndex];\n            preIndex--;\n        }\n        arr[preIndex+1] = current;\n    }\n    return arr;\n}\n```\n\n### 4.快速排序（Quick Sort）\n快速排序动图演示：\n![](http://xiongcao.github.io/blogImage/1867034-cd65e35d7dce5045.gif)\n\n```\n先从数列中取出一个数作为基准数。\n分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。\n再对左右区间重复第二步，直到各区间只有一个数。\n```\n\n```js\nfunction quickSort(arr){\n    if(arr.length<2){\n        return arr\n    }\n    var left=[],right=[],mid=arr.splice(Math.floor(arr.length/2),1);\n    for(var i=0;i<arr.length;i++){\n            if(arr[i]<mid){\n                left.push(arr[i]);\n            }else {\n                right.push(arr[i])\n            }\n    }\n    return bubbleSort(left).concat(mid,bubbleSort(right))\n  }\n```","slug":"js经典算法","published":1,"updated":"2023-07-19T03:06:35.479Z","_id":"clk82gyjs000p3164439f7q1z","comments":1,"layout":"post","photos":[],"link":"","content":"<span id=\"more\"></span>\n\n<h3 id=\"1-冒泡排序（Bubble-Sort）\"><a href=\"#1-冒泡排序（Bubble-Sort）\" class=\"headerlink\" title=\"1.冒泡排序（Bubble Sort）\"></a>1.冒泡排序（Bubble Sort）</h3><p>冒泡排序动图演示：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/1867034-e19840224b331fae.gif\"\n                     \n                ></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义： 比较相邻的前后二个数据，如果前面数据大于后面的数据，就将二个 数据交换。</span><br><span class=\"line\">对数组的第0个数据到N-1个数据进行一次遍历后，最大的一个数据就“沉”到数组第N-1个位置。</span><br><span class=\"line\">N=N-1，如果N不为0就重复前面二步，否则排序完成。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bubbleSort</span>(<span class=\"params\">arr</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; len;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;j &lt; len - <span class=\"number\">1</span> - i;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[j]&gt;arr[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp = arr[j];</span><br><span class=\"line\">                arr[j+<span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">                arr[j] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-选择排序（Selection-Sort）\"><a href=\"#2-选择排序（Selection-Sort）\" class=\"headerlink\" title=\"2.选择排序（Selection Sort）\"></a>2.选择排序（Selection Sort）</h3><p>选择排序动图演示：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/1867034-c6cc220cfb2b9ac8.gif\"\n                     \n                ></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 比如在一个长度为N的无序数组中，在第一趟遍历N个数据，找出其中最小的数值与</span></span><br><span class=\"line\"><span class=\"comment\">* 第一个元素交换，第二趟遍历剩下的N-1个数据，找出其中最小的数值与第二个元</span></span><br><span class=\"line\"><span class=\"comment\">* 素交换……第N-1趟遍历剩下的2个数据，找出其中最小的数值与第N-1个元素交换，</span></span><br><span class=\"line\"><span class=\"comment\">* 至此选择排序完成。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">selectSort</span>(<span class=\"params\">arr</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> min,temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        min=i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i+<span class=\"number\">1</span>;j&lt;arr.<span class=\"property\">length</span>;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[j]&lt;arr[min])&#123;</span><br><span class=\"line\">                min = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp=arr[i];</span><br><span class=\"line\">        arr[i]=arr[min];</span><br><span class=\"line\">        arr[min]=temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-插入排序（Insertion-Sort）\"><a href=\"#3-插入排序（Insertion-Sort）\" class=\"headerlink\" title=\"3.插入排序（Insertion Sort）\"></a>3.插入排序（Insertion Sort）</h3><p>插入排序动图演示：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/1867034-d1537e355abdd298.gif\"\n                     \n                ></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从第一个元素开始，该元素可以认为已经被排序； </span><br><span class=\"line\">取出下一个元素，在已经排序的元素序列中从后向前扫描； </span><br><span class=\"line\">如果该元素（已排序）大于新元素，将该元素移到下一位置； </span><br><span class=\"line\">重复步骤3，直到找到已排序的元素小于或者等于新元素的位置； </span><br><span class=\"line\">将新元素插入到该位置后； </span><br><span class=\"line\">重复步骤2~5。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">insertionSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> preIndex, current;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        preIndex = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        current = arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(preIndex &gt;= <span class=\"number\">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class=\"line\">            arr[preIndex+<span class=\"number\">1</span>] = arr[preIndex];</span><br><span class=\"line\">            preIndex--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[preIndex+<span class=\"number\">1</span>] = current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-快速排序（Quick-Sort）\"><a href=\"#4-快速排序（Quick-Sort）\" class=\"headerlink\" title=\"4.快速排序（Quick Sort）\"></a>4.快速排序（Quick Sort）</h3><p>快速排序动图演示：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/1867034-cd65e35d7dce5045.gif\"\n                     \n                ></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先从数列中取出一个数作为基准数。</span><br><span class=\"line\">分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</span><br><span class=\"line\">再对左右区间重复第二步，直到各区间只有一个数。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">quickSort</span>(<span class=\"params\">arr</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr.<span class=\"property\">length</span>&lt;<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left=[],right=[],mid=arr.<span class=\"title function_\">splice</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(arr.<span class=\"property\">length</span>/<span class=\"number\">2</span>),<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[i]&lt;mid)&#123;</span><br><span class=\"line\">                left.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                right.<span class=\"title function_\">push</span>(arr[i])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">bubbleSort</span>(left).<span class=\"title function_\">concat</span>(mid,<span class=\"title function_\">bubbleSort</span>(right))</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-冒泡排序（Bubble-Sort）\"><a href=\"#1-冒泡排序（Bubble-Sort）\" class=\"headerlink\" title=\"1.冒泡排序（Bubble Sort）\"></a>1.冒泡排序（Bubble Sort）</h3><p>冒泡排序动图演示：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/1867034-e19840224b331fae.gif\"\n                     \n                ></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">定义： 比较相邻的前后二个数据，如果前面数据大于后面的数据，就将二个 数据交换。</span><br><span class=\"line\">对数组的第0个数据到N-1个数据进行一次遍历后，最大的一个数据就“沉”到数组第N-1个位置。</span><br><span class=\"line\">N=N-1，如果N不为0就重复前面二步，否则排序完成。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bubbleSort</span>(<span class=\"params\">arr</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; len;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;j &lt; len - <span class=\"number\">1</span> - i;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[j]&gt;arr[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp = arr[j];</span><br><span class=\"line\">                arr[j+<span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">                arr[j] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-选择排序（Selection-Sort）\"><a href=\"#2-选择排序（Selection-Sort）\" class=\"headerlink\" title=\"2.选择排序（Selection Sort）\"></a>2.选择排序（Selection Sort）</h3><p>选择排序动图演示：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/1867034-c6cc220cfb2b9ac8.gif\"\n                     \n                ></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 比如在一个长度为N的无序数组中，在第一趟遍历N个数据，找出其中最小的数值与</span></span><br><span class=\"line\"><span class=\"comment\">* 第一个元素交换，第二趟遍历剩下的N-1个数据，找出其中最小的数值与第二个元</span></span><br><span class=\"line\"><span class=\"comment\">* 素交换……第N-1趟遍历剩下的2个数据，找出其中最小的数值与第N-1个元素交换，</span></span><br><span class=\"line\"><span class=\"comment\">* 至此选择排序完成。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">selectSort</span>(<span class=\"params\">arr</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> min,temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.<span class=\"property\">length</span>-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">        min=i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=i+<span class=\"number\">1</span>;j&lt;arr.<span class=\"property\">length</span>;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[j]&lt;arr[min])&#123;</span><br><span class=\"line\">                min = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp=arr[i];</span><br><span class=\"line\">        arr[i]=arr[min];</span><br><span class=\"line\">        arr[min]=temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-插入排序（Insertion-Sort）\"><a href=\"#3-插入排序（Insertion-Sort）\" class=\"headerlink\" title=\"3.插入排序（Insertion Sort）\"></a>3.插入排序（Insertion Sort）</h3><p>插入排序动图演示：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/1867034-d1537e355abdd298.gif\"\n                     \n                ></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从第一个元素开始，该元素可以认为已经被排序； </span><br><span class=\"line\">取出下一个元素，在已经排序的元素序列中从后向前扫描； </span><br><span class=\"line\">如果该元素（已排序）大于新元素，将该元素移到下一位置； </span><br><span class=\"line\">重复步骤3，直到找到已排序的元素小于或者等于新元素的位置； </span><br><span class=\"line\">将新元素插入到该位置后； </span><br><span class=\"line\">重复步骤2~5。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">insertionSort</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> preIndex, current;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        preIndex = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        current = arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(preIndex &gt;= <span class=\"number\">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class=\"line\">            arr[preIndex+<span class=\"number\">1</span>] = arr[preIndex];</span><br><span class=\"line\">            preIndex--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[preIndex+<span class=\"number\">1</span>] = current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-快速排序（Quick-Sort）\"><a href=\"#4-快速排序（Quick-Sort）\" class=\"headerlink\" title=\"4.快速排序（Quick Sort）\"></a>4.快速排序（Quick Sort）</h3><p>快速排序动图演示：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/1867034-cd65e35d7dce5045.gif\"\n                     \n                ></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">先从数列中取出一个数作为基准数。</span><br><span class=\"line\">分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</span><br><span class=\"line\">再对左右区间重复第二步，直到各区间只有一个数。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">quickSort</span>(<span class=\"params\">arr</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr.<span class=\"property\">length</span>&lt;<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> left=[],right=[],mid=arr.<span class=\"title function_\">splice</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(arr.<span class=\"property\">length</span>/<span class=\"number\">2</span>),<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[i]&lt;mid)&#123;</span><br><span class=\"line\">                left.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                right.<span class=\"title function_\">push</span>(arr[i])</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">bubbleSort</span>(left).<span class=\"title function_\">concat</span>(mid,<span class=\"title function_\">bubbleSort</span>(right))</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>"},{"title":"js跳出循环总结","author":"熊 超","date":"2018-07-31T01:53:00.000Z","_content":"<!--more-->\n\n## 一.跳出一层循环\n```js\nvar arr = [\"a\", \"b\",'c','d'];\n```\n### 结束for循环\n```js\nfor(var i=0;i<arr.length;i++){\n  if(i==2){\n      break;\n  }\n  console.log(arr[i],i);\n}\nconsole.log('循环外');\n```\n注意：return 虽说可以结束循环，但是循环体后面的内容也无法执行了\n\n### 结束forEach循环\n```js\ntry {\n    arr.forEach((o,i) => {\n        if(i==2){\n            throw new Error(\"EndIterative\");\n        }\n        console.log(o,i);\n    });\n} catch (e) {\n    if(e.message!='EndIterative'){\n        throw e;\n    }\n}\nconsole.log('循环体外');\n```\n\n注意：return 只能结束本次循环，并不能终止整个循环\n\n### 结束for...in循环\n```js\nfor (var i in arr) {\n    if(i==2){\n        break;\n    }\n    console.log(arr[i],i);\n}\nconsole.log('循环体外');\n```\n注意：return 虽说可以结束循环，但是循环体后面的内容也无法执行了\n\n##### 结果：\n![mark](http://xiongcao.github.io/blogImage/201807311448_240.png)\n\n## 二.跳出多层循环\n```js\nvar arr = [[\"a\", \"b\", \"c\"],[\"小红\", \"小明\", \"小亮\"]];\n```\n### 正常多层for循环\n```js\nfor (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n        console.log(arr[i][j], '内层');\n    }\n    console.log(arr[i], \"外层\");\n}\nconsole.log(\"循环体外\");\n```\n#####结果：\n![mark](http://xiongcao.github.io/blogImage/201808010918_525.png)\n\n### 使用break\n```js\nfor (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      if(j==i){\n          break;\n      }\n      console.log(arr[i][j], '内层');\n    }\n    console.log(arr[i], \"外层\");\n}\n```\n结果： 只跳出了一层循环\n\n![mark](http://xiongcao.github.io/blogImage/201807311606_181.png)\n\n### 我们可以使用以下方法跳出多层for循环\n```js\nvar flag = false;\nfor (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      if(j==1){\n          flag = true;\n          break;\n      }\n      console.log(arr[i][j], '内层');\n    }\n    if(flag){\n        break;\n    }\n    console.log(arr[i], \"外层\");\n}\n```\n结果： 只执行了一次j=0就结束了循环\n![mark](http://xiongcao.github.io/blogImage/201808010928_686.png)\n\n### 使用return\n```js\nfor (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      if(j==1){\n          return;\n      }\n      console.log(arr[i][j], '内层');\n    }\n    console.log(arr[i], \"外层\");\n}\nconsole.log('我在循环体外');\n```\n结果： 虽然跳出了多层循环，但是循环体后面的内容都没有被执行\n\n![mark](http://xiongcao.github.io/blogImage/201807311646_81.png)\n\n### 跳出多层forEach循环\n```js\ntry {\n    arr.forEach((newArr,i) => {\n        newArr.forEach((o,j)=>{\n            if(j==1){\n                throw new Error(\"EndIterative\");\n            }\n            console.log(o,'内层')\n        });\n        console.log(newArr,'外层');\n    });\n} catch (e) {\n    if(e.message!=\"EndIterative\"){\n        throw e;\n    }\n}\nconsole.log('循环体外');\n```\n结果： 正确跳出了多层循环\n![mark](http://xiongcao.github.io/blogImage/201808010928_686.png)\n\n## 最后总结：\n1. break只能在for、for...in循环中使用不能再forEach里面使用，并且break只能跳出单层循环；\n2. return 虽然可以终止循环，但是也终止了return之后的所有语句，特别注意：return 不能终止forEach循环，只能结束当前循环。\n\n","source":"_posts/js跳出循环总结.md","raw":"title: js跳出循环总结\nauthor: 熊 超\ntags:\n  - Array\n  - 循环\ncategories:\n  - javascript\ndate: 2018-07-31 09:53:00\n---\n<!--more-->\n\n## 一.跳出一层循环\n```js\nvar arr = [\"a\", \"b\",'c','d'];\n```\n### 结束for循环\n```js\nfor(var i=0;i<arr.length;i++){\n  if(i==2){\n      break;\n  }\n  console.log(arr[i],i);\n}\nconsole.log('循环外');\n```\n注意：return 虽说可以结束循环，但是循环体后面的内容也无法执行了\n\n### 结束forEach循环\n```js\ntry {\n    arr.forEach((o,i) => {\n        if(i==2){\n            throw new Error(\"EndIterative\");\n        }\n        console.log(o,i);\n    });\n} catch (e) {\n    if(e.message!='EndIterative'){\n        throw e;\n    }\n}\nconsole.log('循环体外');\n```\n\n注意：return 只能结束本次循环，并不能终止整个循环\n\n### 结束for...in循环\n```js\nfor (var i in arr) {\n    if(i==2){\n        break;\n    }\n    console.log(arr[i],i);\n}\nconsole.log('循环体外');\n```\n注意：return 虽说可以结束循环，但是循环体后面的内容也无法执行了\n\n##### 结果：\n![mark](http://xiongcao.github.io/blogImage/201807311448_240.png)\n\n## 二.跳出多层循环\n```js\nvar arr = [[\"a\", \"b\", \"c\"],[\"小红\", \"小明\", \"小亮\"]];\n```\n### 正常多层for循环\n```js\nfor (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n        console.log(arr[i][j], '内层');\n    }\n    console.log(arr[i], \"外层\");\n}\nconsole.log(\"循环体外\");\n```\n#####结果：\n![mark](http://xiongcao.github.io/blogImage/201808010918_525.png)\n\n### 使用break\n```js\nfor (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      if(j==i){\n          break;\n      }\n      console.log(arr[i][j], '内层');\n    }\n    console.log(arr[i], \"外层\");\n}\n```\n结果： 只跳出了一层循环\n\n![mark](http://xiongcao.github.io/blogImage/201807311606_181.png)\n\n### 我们可以使用以下方法跳出多层for循环\n```js\nvar flag = false;\nfor (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      if(j==1){\n          flag = true;\n          break;\n      }\n      console.log(arr[i][j], '内层');\n    }\n    if(flag){\n        break;\n    }\n    console.log(arr[i], \"外层\");\n}\n```\n结果： 只执行了一次j=0就结束了循环\n![mark](http://xiongcao.github.io/blogImage/201808010928_686.png)\n\n### 使用return\n```js\nfor (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      if(j==1){\n          return;\n      }\n      console.log(arr[i][j], '内层');\n    }\n    console.log(arr[i], \"外层\");\n}\nconsole.log('我在循环体外');\n```\n结果： 虽然跳出了多层循环，但是循环体后面的内容都没有被执行\n\n![mark](http://xiongcao.github.io/blogImage/201807311646_81.png)\n\n### 跳出多层forEach循环\n```js\ntry {\n    arr.forEach((newArr,i) => {\n        newArr.forEach((o,j)=>{\n            if(j==1){\n                throw new Error(\"EndIterative\");\n            }\n            console.log(o,'内层')\n        });\n        console.log(newArr,'外层');\n    });\n} catch (e) {\n    if(e.message!=\"EndIterative\"){\n        throw e;\n    }\n}\nconsole.log('循环体外');\n```\n结果： 正确跳出了多层循环\n![mark](http://xiongcao.github.io/blogImage/201808010928_686.png)\n\n## 最后总结：\n1. break只能在for、for...in循环中使用不能再forEach里面使用，并且break只能跳出单层循环；\n2. return 虽然可以终止循环，但是也终止了return之后的所有语句，特别注意：return 不能终止forEach循环，只能结束当前循环。\n\n","slug":"js跳出循环总结","published":1,"updated":"2023-07-19T03:06:46.369Z","_id":"clk82gyju000t316402vcd7sb","comments":1,"layout":"post","photos":[],"link":"","content":"<span id=\"more\"></span>\n\n<h2 id=\"一-跳出一层循环\"><a href=\"#一-跳出一层循环\" class=\"headerlink\" title=\"一.跳出一层循环\"></a>一.跳出一层循环</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>];</span><br></pre></td></tr></table></figure>\n<h3 id=\"结束for循环\"><a href=\"#结束for循环\" class=\"headerlink\" title=\"结束for循环\"></a>结束for循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i],i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;循环外&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>注意：return 虽说可以结束循环，但是循环体后面的内容也无法执行了</p>\n<h3 id=\"结束forEach循环\"><a href=\"#结束forEach循环\" class=\"headerlink\" title=\"结束forEach循环\"></a>结束forEach循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">o,i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;EndIterative&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o,i);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e.<span class=\"property\">message</span>!=<span class=\"string\">&#x27;EndIterative&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;循环体外&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>注意：return 只能结束本次循环，并不能终止整个循环</p>\n<h3 id=\"结束for…in循环\"><a href=\"#结束for…in循环\" class=\"headerlink\" title=\"结束for…in循环\"></a>结束for…in循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i],i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;循环体外&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>注意：return 虽说可以结束循环，但是循环体后面的内容也无法执行了</p>\n<h5 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h5><p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201807311448_240.png\"\n                      alt=\"mark\"\n                ></p>\n<h2 id=\"二-跳出多层循环\"><a href=\"#二-跳出多层循环\" class=\"headerlink\" title=\"二.跳出多层循环\"></a>二.跳出多层循环</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [[<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>],[<span class=\"string\">&quot;小红&quot;</span>, <span class=\"string\">&quot;小明&quot;</span>, <span class=\"string\">&quot;小亮&quot;</span>]];</span><br></pre></td></tr></table></figure>\n<h3 id=\"正常多层for循环\"><a href=\"#正常多层for循环\" class=\"headerlink\" title=\"正常多层for循环\"></a>正常多层for循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr[i].<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i][j], <span class=\"string\">&#x27;内层&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i], <span class=\"string\">&quot;外层&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;循环体外&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>#####结果：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808010918_525.png\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"使用break\"><a href=\"#使用break\" class=\"headerlink\" title=\"使用break\"></a>使用break</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr[i].<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(j==i)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i][j], <span class=\"string\">&#x27;内层&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i], <span class=\"string\">&quot;外层&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果： 只跳出了一层循环</p>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201807311606_181.png\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"我们可以使用以下方法跳出多层for循环\"><a href=\"#我们可以使用以下方法跳出多层for循环\" class=\"headerlink\" title=\"我们可以使用以下方法跳出多层for循环\"></a>我们可以使用以下方法跳出多层for循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr[i].<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(j==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">          flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i][j], <span class=\"string\">&#x27;内层&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i], <span class=\"string\">&quot;外层&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果： 只执行了一次j&#x3D;0就结束了循环<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808010928_686.png\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"使用return\"><a href=\"#使用return\" class=\"headerlink\" title=\"使用return\"></a>使用return</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr[i].<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(j==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i][j], <span class=\"string\">&#x27;内层&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i], <span class=\"string\">&quot;外层&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我在循环体外&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>结果： 虽然跳出了多层循环，但是循环体后面的内容都没有被执行</p>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201807311646_81.png\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"跳出多层forEach循环\"><a href=\"#跳出多层forEach循环\" class=\"headerlink\" title=\"跳出多层forEach循环\"></a>跳出多层forEach循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">newArr,i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        newArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">o,j</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;EndIterative&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o,<span class=\"string\">&#x27;内层&#x27;</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newArr,<span class=\"string\">&#x27;外层&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e.<span class=\"property\">message</span>!=<span class=\"string\">&quot;EndIterative&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;循环体外&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>结果： 正确跳出了多层循环<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808010928_686.png\"\n                      alt=\"mark\"\n                ></p>\n<h2 id=\"最后总结：\"><a href=\"#最后总结：\" class=\"headerlink\" title=\"最后总结：\"></a>最后总结：</h2><ol>\n<li>break只能在for、for…in循环中使用不能再forEach里面使用，并且break只能跳出单层循环；</li>\n<li>return 虽然可以终止循环，但是也终止了return之后的所有语句，特别注意：return 不能终止forEach循环，只能结束当前循环。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-跳出一层循环\"><a href=\"#一-跳出一层循环\" class=\"headerlink\" title=\"一.跳出一层循环\"></a>一.跳出一层循环</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>];</span><br></pre></td></tr></table></figure>\n<h3 id=\"结束for循环\"><a href=\"#结束for循环\" class=\"headerlink\" title=\"结束for循环\"></a>结束for循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i],i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;循环外&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>注意：return 虽说可以结束循环，但是循环体后面的内容也无法执行了</p>\n<h3 id=\"结束forEach循环\"><a href=\"#结束forEach循环\" class=\"headerlink\" title=\"结束forEach循环\"></a>结束forEach循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">o,i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;EndIterative&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o,i);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e.<span class=\"property\">message</span>!=<span class=\"string\">&#x27;EndIterative&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;循环体外&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>注意：return 只能结束本次循环，并不能终止整个循环</p>\n<h3 id=\"结束for…in循环\"><a href=\"#结束for…in循环\" class=\"headerlink\" title=\"结束for…in循环\"></a>结束for…in循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i==<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i],i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;循环体外&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>注意：return 虽说可以结束循环，但是循环体后面的内容也无法执行了</p>\n<h5 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h5><p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201807311448_240.png\"\n                      alt=\"mark\"\n                ></p>\n<h2 id=\"二-跳出多层循环\"><a href=\"#二-跳出多层循环\" class=\"headerlink\" title=\"二.跳出多层循环\"></a>二.跳出多层循环</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [[<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>],[<span class=\"string\">&quot;小红&quot;</span>, <span class=\"string\">&quot;小明&quot;</span>, <span class=\"string\">&quot;小亮&quot;</span>]];</span><br></pre></td></tr></table></figure>\n<h3 id=\"正常多层for循环\"><a href=\"#正常多层for循环\" class=\"headerlink\" title=\"正常多层for循环\"></a>正常多层for循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr[i].<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i][j], <span class=\"string\">&#x27;内层&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i], <span class=\"string\">&quot;外层&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;循环体外&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>#####结果：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808010918_525.png\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"使用break\"><a href=\"#使用break\" class=\"headerlink\" title=\"使用break\"></a>使用break</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr[i].<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(j==i)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i][j], <span class=\"string\">&#x27;内层&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i], <span class=\"string\">&quot;外层&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果： 只跳出了一层循环</p>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201807311606_181.png\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"我们可以使用以下方法跳出多层for循环\"><a href=\"#我们可以使用以下方法跳出多层for循环\" class=\"headerlink\" title=\"我们可以使用以下方法跳出多层for循环\"></a>我们可以使用以下方法跳出多层for循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr[i].<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(j==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">          flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i][j], <span class=\"string\">&#x27;内层&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i], <span class=\"string\">&quot;外层&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果： 只执行了一次j&#x3D;0就结束了循环<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808010928_686.png\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"使用return\"><a href=\"#使用return\" class=\"headerlink\" title=\"使用return\"></a>使用return</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr[i].<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(j==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i][j], <span class=\"string\">&#x27;内层&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i], <span class=\"string\">&quot;外层&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我在循环体外&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>结果： 虽然跳出了多层循环，但是循环体后面的内容都没有被执行</p>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201807311646_81.png\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"跳出多层forEach循环\"><a href=\"#跳出多层forEach循环\" class=\"headerlink\" title=\"跳出多层forEach循环\"></a>跳出多层forEach循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">newArr,i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        newArr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">o,j</span>)=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;EndIterative&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o,<span class=\"string\">&#x27;内层&#x27;</span>)</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newArr,<span class=\"string\">&#x27;外层&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e.<span class=\"property\">message</span>!=<span class=\"string\">&quot;EndIterative&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;循环体外&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>结果： 正确跳出了多层循环<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/201808010928_686.png\"\n                      alt=\"mark\"\n                ></p>\n<h2 id=\"最后总结：\"><a href=\"#最后总结：\" class=\"headerlink\" title=\"最后总结：\"></a>最后总结：</h2><ol>\n<li>break只能在for、for…in循环中使用不能再forEach里面使用，并且break只能跳出单层循环；</li>\n<li>return 虽然可以终止循环，但是也终止了return之后的所有语句，特别注意：return 不能终止forEach循环，只能结束当前循环。</li>\n</ol>"},{"title":"css3伪类选择器nth-child和nth-of-type的区别","author":"熊 超","date":"2017-06-10T08:35:00.000Z","_content":"---\n<!-- more -->\n\n\n### 使用误区\n\n之前在做项目时一直是:nth-child和:nth-of-type混着用，第一个不行就用第二个，当时就觉得能实现效果就行，后来这样的情况遇到多了，每次用的时候就感觉效果是试出来的，特别浪费时间，现在就来研究一下这两个用法的区别。\n\n\n### 1.用法效果相同的情况\n\n#### 示例一：\n\n```HTML\n# HTML代码\n<div class=\"main\">\n  <p>one</p>\n  <p>two</p>\n  <p>three</p>\n</div>\n\n```\n\n要实现的效果：将two变红\n\n>* nth-child()的方式:\n\n```CSS\n# CSS\np:nth-child(2){color:red;}\n\n```\n\n>* nth-of-type()的方式:\n\n```CSS\n# CSS\np:nth-of-type(2){color:red;}\n\n```\n\n效果：\n![mark](http://xiongcao.github.io/blogImage/blog/170610/hl1lJccBCj.png?imageslim)\n\n在同辈元素都相同的情况下两个用法效果一样\n\n### 2.用法相同效果不同的情况\n\n#### 示例二：\n\n```HTML\n# HTML代码\n<div class=\"main\">\n  <p>one</p>\n  <div>div</div>\n  <p>two</p>\n  <p>three</p>\n</div>\n\n```\n要实现的效果：同样将two变红\n\n>* 先看nth-of-type()的方式:\n\n```CSS\n# CSS\np:nth-of-type(2){color:red;}\n\n```\n效果：\n![mark](http://xiongcao.github.io/blogImage/blog/170610/5kG378GEBE.png?imageslim)\n\n>* 再来看nth-child()的方式:\n\n```CSS\n# CSS\np:nth-child(2){color:red;}\n\n```\n效果：\n![mark](http://xiongcao.github.io/blogImage/blog/170610/h346LeKK59.png?imageslim)\n\n### 3.用法不同效果相同的情况\n\n#### 示例三：\n\n```HTML\n# HTML代码\n<div class=\"main\">\n  <p>one</p>\n  <div>div</div>\n  <p>two</p>\n  <p>three</p>\n</div>\n\n```\n要实现的效果：同样将two变红\n\n>* 先看nth-of-type()的方式:\n\n```CSS\n# CSS\np:nth-of-type(2){color:red;}\n\n```\n\n>* 再来看nth-child()的方式:\n\n```CSS\n# CSS\np:nth-child(3){color:red;}\n\n```\n\n效果：\n![mark](http://xiongcao.github.io/blogImage/blog/170610/5kG378GEBE.png?imageslim)\n\n\n### 用法总结\n从以上三个示例可以看出：\n- 1.在所有子元素都相同的情况下，两种用法效果相同；\n- 2.在子元素不同的情况下，:nth-of-type选择的是相同（同种元素）元素中的第几个，而:nth-child选择的其父辈元素下面的第几个子元素；","source":"_posts/ss3伪类选择器nth-child和nth-of-type的区别.md","raw":"title: css3伪类选择器nth-child和nth-of-type的区别\nauthor: 熊 超\ntags:\n  - css\n  - 伪类选择器\ncategories:\n  - javascript\ndate: 2017-06-10 16:35:00\n---\n---\n<!-- more -->\n\n\n### 使用误区\n\n之前在做项目时一直是:nth-child和:nth-of-type混着用，第一个不行就用第二个，当时就觉得能实现效果就行，后来这样的情况遇到多了，每次用的时候就感觉效果是试出来的，特别浪费时间，现在就来研究一下这两个用法的区别。\n\n\n### 1.用法效果相同的情况\n\n#### 示例一：\n\n```HTML\n# HTML代码\n<div class=\"main\">\n  <p>one</p>\n  <p>two</p>\n  <p>three</p>\n</div>\n\n```\n\n要实现的效果：将two变红\n\n>* nth-child()的方式:\n\n```CSS\n# CSS\np:nth-child(2){color:red;}\n\n```\n\n>* nth-of-type()的方式:\n\n```CSS\n# CSS\np:nth-of-type(2){color:red;}\n\n```\n\n效果：\n![mark](http://xiongcao.github.io/blogImage/blog/170610/hl1lJccBCj.png?imageslim)\n\n在同辈元素都相同的情况下两个用法效果一样\n\n### 2.用法相同效果不同的情况\n\n#### 示例二：\n\n```HTML\n# HTML代码\n<div class=\"main\">\n  <p>one</p>\n  <div>div</div>\n  <p>two</p>\n  <p>three</p>\n</div>\n\n```\n要实现的效果：同样将two变红\n\n>* 先看nth-of-type()的方式:\n\n```CSS\n# CSS\np:nth-of-type(2){color:red;}\n\n```\n效果：\n![mark](http://xiongcao.github.io/blogImage/blog/170610/5kG378GEBE.png?imageslim)\n\n>* 再来看nth-child()的方式:\n\n```CSS\n# CSS\np:nth-child(2){color:red;}\n\n```\n效果：\n![mark](http://xiongcao.github.io/blogImage/blog/170610/h346LeKK59.png?imageslim)\n\n### 3.用法不同效果相同的情况\n\n#### 示例三：\n\n```HTML\n# HTML代码\n<div class=\"main\">\n  <p>one</p>\n  <div>div</div>\n  <p>two</p>\n  <p>three</p>\n</div>\n\n```\n要实现的效果：同样将two变红\n\n>* 先看nth-of-type()的方式:\n\n```CSS\n# CSS\np:nth-of-type(2){color:red;}\n\n```\n\n>* 再来看nth-child()的方式:\n\n```CSS\n# CSS\np:nth-child(3){color:red;}\n\n```\n\n效果：\n![mark](http://xiongcao.github.io/blogImage/blog/170610/5kG378GEBE.png?imageslim)\n\n\n### 用法总结\n从以上三个示例可以看出：\n- 1.在所有子元素都相同的情况下，两种用法效果相同；\n- 2.在子元素不同的情况下，:nth-of-type选择的是相同（同种元素）元素中的第几个，而:nth-child选择的其父辈元素下面的第几个子元素；","slug":"ss3伪类选择器nth-child和nth-of-type的区别","published":1,"updated":"2023-07-19T03:07:09.657Z","_id":"clk82gyjv000w3164haz47s35","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<span id=\"more\"></span>\n\n\n<h3 id=\"使用误区\"><a href=\"#使用误区\" class=\"headerlink\" title=\"使用误区\"></a>使用误区</h3><p>之前在做项目时一直是:nth-child和:nth-of-type混着用，第一个不行就用第二个，当时就觉得能实现效果就行，后来这样的情况遇到多了，每次用的时候就感觉效果是试出来的，特别浪费时间，现在就来研究一下这两个用法的区别。</p>\n<h3 id=\"1-用法效果相同的情况\"><a href=\"#1-用法效果相同的情况\" class=\"headerlink\" title=\"1.用法效果相同的情况\"></a>1.用法效果相同的情况</h3><h4 id=\"示例一：\"><a href=\"#示例一：\" class=\"headerlink\" title=\"示例一：\"></a>示例一：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># HTML代码</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>要实现的效果：将two变红</p>\n<blockquote>\n<ul>\n<li>nth-child()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># CSS</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>)&#123;<span class=\"attribute\">color</span>:red;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>nth-of-type()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># CSS</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-of-type</span>(<span class=\"number\">2</span>)&#123;<span class=\"attribute\">color</span>:red;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170610/hl1lJccBCj.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<p>在同辈元素都相同的情况下两个用法效果一样</p>\n<h3 id=\"2-用法相同效果不同的情况\"><a href=\"#2-用法相同效果不同的情况\" class=\"headerlink\" title=\"2.用法相同效果不同的情况\"></a>2.用法相同效果不同的情况</h3><h4 id=\"示例二：\"><a href=\"#示例二：\" class=\"headerlink\" title=\"示例二：\"></a>示例二：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># HTML代码</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>要实现的效果：同样将two变红</p>\n<blockquote>\n<ul>\n<li>先看nth-of-type()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># CSS</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-of-type</span>(<span class=\"number\">2</span>)&#123;<span class=\"attribute\">color</span>:red;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>效果：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170610/5kG378GEBE.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<blockquote>\n<ul>\n<li>再来看nth-child()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># CSS</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>)&#123;<span class=\"attribute\">color</span>:red;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>效果：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170610/h346LeKK59.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"3-用法不同效果相同的情况\"><a href=\"#3-用法不同效果相同的情况\" class=\"headerlink\" title=\"3.用法不同效果相同的情况\"></a>3.用法不同效果相同的情况</h3><h4 id=\"示例三：\"><a href=\"#示例三：\" class=\"headerlink\" title=\"示例三：\"></a>示例三：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># HTML代码</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>要实现的效果：同样将two变红</p>\n<blockquote>\n<ul>\n<li>先看nth-of-type()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># CSS</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-of-type</span>(<span class=\"number\">2</span>)&#123;<span class=\"attribute\">color</span>:red;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>再来看nth-child()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># CSS</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">3</span>)&#123;<span class=\"attribute\">color</span>:red;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170610/5kG378GEBE.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"用法总结\"><a href=\"#用法总结\" class=\"headerlink\" title=\"用法总结\"></a>用法总结</h3><p>从以上三个示例可以看出：</p>\n<ul>\n<li>1.在所有子元素都相同的情况下，两种用法效果相同；</li>\n<li>2.在子元素不同的情况下，:nth-of-type选择的是相同（同种元素）元素中的第几个，而:nth-child选择的其父辈元素下面的第几个子元素；</li>\n</ul>\n","site":{"data":{}},"excerpt":"<hr>","more":"<h3 id=\"使用误区\"><a href=\"#使用误区\" class=\"headerlink\" title=\"使用误区\"></a>使用误区</h3><p>之前在做项目时一直是:nth-child和:nth-of-type混着用，第一个不行就用第二个，当时就觉得能实现效果就行，后来这样的情况遇到多了，每次用的时候就感觉效果是试出来的，特别浪费时间，现在就来研究一下这两个用法的区别。</p>\n<h3 id=\"1-用法效果相同的情况\"><a href=\"#1-用法效果相同的情况\" class=\"headerlink\" title=\"1.用法效果相同的情况\"></a>1.用法效果相同的情况</h3><h4 id=\"示例一：\"><a href=\"#示例一：\" class=\"headerlink\" title=\"示例一：\"></a>示例一：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># HTML代码</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>要实现的效果：将two变红</p>\n<blockquote>\n<ul>\n<li>nth-child()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># CSS</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>)&#123;<span class=\"attribute\">color</span>:red;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>nth-of-type()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># CSS</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-of-type</span>(<span class=\"number\">2</span>)&#123;<span class=\"attribute\">color</span>:red;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170610/hl1lJccBCj.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<p>在同辈元素都相同的情况下两个用法效果一样</p>\n<h3 id=\"2-用法相同效果不同的情况\"><a href=\"#2-用法相同效果不同的情况\" class=\"headerlink\" title=\"2.用法相同效果不同的情况\"></a>2.用法相同效果不同的情况</h3><h4 id=\"示例二：\"><a href=\"#示例二：\" class=\"headerlink\" title=\"示例二：\"></a>示例二：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># HTML代码</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>要实现的效果：同样将two变红</p>\n<blockquote>\n<ul>\n<li>先看nth-of-type()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># CSS</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-of-type</span>(<span class=\"number\">2</span>)&#123;<span class=\"attribute\">color</span>:red;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>效果：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170610/5kG378GEBE.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<blockquote>\n<ul>\n<li>再来看nth-child()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># CSS</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">2</span>)&#123;<span class=\"attribute\">color</span>:red;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>效果：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170610/h346LeKK59.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"3-用法不同效果相同的情况\"><a href=\"#3-用法不同效果相同的情况\" class=\"headerlink\" title=\"3.用法不同效果相同的情况\"></a>3.用法不同效果相同的情况</h3><h4 id=\"示例三：\"><a href=\"#示例三：\" class=\"headerlink\" title=\"示例三：\"></a>示例三：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># HTML代码</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>one<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>two<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>three<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>要实现的效果：同样将two变红</p>\n<blockquote>\n<ul>\n<li>先看nth-of-type()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># CSS</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-of-type</span>(<span class=\"number\">2</span>)&#123;<span class=\"attribute\">color</span>:red;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>再来看nth-child()的方式:</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># CSS</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-pseudo\">:nth-child</span>(<span class=\"number\">3</span>)&#123;<span class=\"attribute\">color</span>:red;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>效果：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170610/5kG378GEBE.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"用法总结\"><a href=\"#用法总结\" class=\"headerlink\" title=\"用法总结\"></a>用法总结</h3><p>从以上三个示例可以看出：</p>\n<ul>\n<li>1.在所有子元素都相同的情况下，两种用法效果相同；</li>\n<li>2.在子元素不同的情况下，:nth-of-type选择的是相同（同种元素）元素中的第几个，而:nth-child选择的其父辈元素下面的第几个子元素；</li>\n</ul>"},{"title":"使用gulp插件快速开发项目","author":"熊 超","date":"2017-07-15T16:15:00.000Z","_content":"---\n<!--more-->\n\n## 简介：\n&ensp;&ensp;&ensp;&ensp;gulp有着丰富的插件库，她能自动化地完成javascript、coffee、sass、less、html、image、css 等文件的的测试、检查、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤，能快速提高我们项目的开发效率。\n\n\n## 1.gulpfile.js基本配置示例：\n&ensp;&ensp;&ensp;&ensp;通过此配置示例可以让我们快速编写js,css代码并打包压缩文件，减少文件资源大小。\n\n\n\n```js\n//导入工具包 require('node_modules里对应模块')\nvar gulp = require('gulp'); //本地安装gulp所用到的地方\nvar sass = require('gulp-sass');//将scss文件编译成浏览器可识别的css\nvar minifycss = require('gulp-minify-css');//压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\nvar cleancss = require('gulp-clean-css');//压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\nvar livereload = require('gulp-livereload');//监听文件发生变化时，浏览器自动刷新页面\nvar babel = require('gulp-babel');//将ES6编译成ES5\nvar uglify = require('gulp-uglify');//压缩js\nvar autoprefixer = require('gulp-autoprefixer');//根据设置浏览器版本自动处理浏览器前缀\n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass()) //该任务调用的模块\n        .pipe(cleancss({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(autoprefixer({\n            browsers: ['last 2 versions', 'Android >= 4.0'],\n            cascade: true, //是否美化属性值 默认：true \n            remove:true //是否去掉不必要的前缀 默认：true \n        }))\n        .pipe(gulp.dest('./css')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n        .pipe(livereload());//监听文件发生变化时，浏览器自动刷新页面\n});\n\n//定义一个babel任务（自定义任务名称）编译js\ngulp.task('babel', function () {\n    gulp.src('./src/**/*.js') //该任务针对的文件\n        .pipe(babel({\n            presets: ['es2015']\n        })) //该任务调用的模块\n        .pipe(livereload())//监听文件发生变化时，浏览器自动刷新页面\n        .pipe(uglify({ //压缩js\n            // mangle: false,//类型：Boolean 默认：true 是否修改变量名\n            // compress: true//类型：Boolean 默认：true 是否完全压缩\n        }))\n        .pipe(gulp.dest('./js')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n\ngulp.task('auto', function () {\n    gulp.watch('./sass/**/*.scss', ['sass']);\n    gulp.watch('./src/**/*.js', ['babel']);\n    // livereload.listen();\n});\n \ngulp.task('default',['sass','auto','babel']); //定义默认任务\n\n// 通配符路径匹配示例：\n// “src/a.js”：指定具体文件；\n// “*”：匹配所有文件    例：src/*.js(包含src下的所有js文件)；\n// “**”：匹配0个或多个子文件夹    例：src/**/*.js(包含src的0个或多个子文件夹下的js文件)；\n// “{}”：匹配多个属性    例：src/{a,b}.js(包含a.js和b.js文件)  src/*.{jpg,png,gif}(src下的所有jpg/png/gif文件)；\n// “!”：排除文件    例：!src/a.js(不包含src下的a.js文件)；\n\n//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数\n//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) \n//gulp.dest(path[, options]) 处理完后文件生成路径\n\n```\n\n### 配置文件详解：\n#### 执行一个任务分三步走：\n1.导入工具包 require('node_modules里对应模块')  \n```js\nvar gulp = require('gulp'); //本地安装gulp所用到的地方\n```\n\n2.定义一个任务（自定义任务名称）  \n```js   \ngulp.task('test', function () {\n  gulp.src('./sass/**/*.scss') //该任务针对的文件\n      .pipe(test())\n      .pipe(gulp.dest('./css')) //将会在css文件夹下生成.css文件（复制文件目录及文件）\n})\n```\n3.执行任务：   \ncmd命令提示符 \n```\ngulp test\n\n```\n##### 如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp test,而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：\n```\ngulp.task('auto', function () {\n    gulp.watch('./src/**/*.js', ['test']);\n});\ngulp.task('default',['auto','test']); //定义默认任务\n\n```\n这样我们只需要输入一次命令gulp,就可以监听到每次代码的修改，自动帮我们编译，减少了很多繁琐的操作。\n\n\n## 2.使用gulp编译css\n\n### 1.gulp-sass的使用：\n\n#### 1.简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\n\n#### 2.本地安转：npm install gulp-less --save-dev\n\n#### 3.配置gulpfile.js\n\n1.配置：\n\n```js\n//导入sass工具包\nvar sass = require('gulp-sass');\n\n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass({\n        outputStyle: 'compact'  //代码风格\n      // nested：嵌套缩进的css代码，它是默认值。\n      // expanded：没有缩进的、扩展的css代码。\n      // compact：简洁格式的css代码。\n      // compressed：压缩后的css代码。\n        })) //该任务调用的模块\n        .pipe(gulp.dest('./css')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n```\n\n2.sass使用示例：\n\n```css\n$blue : #1875e7;　\n.class {\n    font-size: 12px;\n}\n.main{\n    color:$blue;\n    @if 1 + 1 == 2 { \n        border: 1px solid red;\n    }@if 5 < 3 { \n        border: 2px dotted blue; \n    }\n    .parent{\n        margin-left:10px + 20px;\n        &:hover{\n            cursor: pointer;\n            @extend .class;\n        }\n    }\n}\n\n```\n\n#### 4.执行任务：   \n命令提示符：gulp sass\n\n\n#### 5.编译结果：\n\n![mark](http://xiongcao.github.io/blogImage/blog/170715/IaCJglCfag.png?imageslim)\n\n### 2.gulp-minify-css的使用：\n\n#### 1.插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存  \n\n\n#### 2.本地安转：npm install gulp-minify-css --save-dev。\n\n#### 3.配置gulpfile.js    \n\n1.配置\n```js\nvar minifycss = require('gulp-minify-css');\n\n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass({\n            outputStyle: 'compact'  //代码风格\n        // nested：嵌套缩进的css代码，它是默认值。\n        // expanded：没有缩进的、扩展的css代码。\n        // compact：简洁格式的css代码。\n        // compressed：压缩后的css代码。\n        })) //该任务调用的模块\n        .pipe(minifycss({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(gulp.dest('./css')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n\n```\n2.使用示例：\n![mark](http://xiongcao.github.io/blogImage/blog/170715/GCLHfi4haD.png?imageslim)\n\n#### 4.执行任务：   \n命令提示符：gulp sass\n\n#### 5.编译结果：\n![mark](http://xiongcao.github.io/blogImage/blog/170715/CHD62jD9kd.png?imageslim)\n编译之后的css文件被压缩了\n\n### 3.gulp-autoprefixer：\n\n#### 1.插件介绍：根据设置浏览器版本自动处理浏览器前缀\n\n\n#### 2.本地安转：npm install gulp-autoprefixer --save-dev。\n\n#### 3.配置gulpfile.js    \n\n1.配置\n```js\nvar autoprefixer = require('gulp-autoprefixer');\n\n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass({\n            outputStyle: 'compact'  //代码风格\n        // nested：嵌套缩进的css代码，它是默认值。\n        // expanded：没有缩进的、扩展的css代码。\n        // compact：简洁格式的css代码。\n        // compressed：压缩后的css代码。\n        })) //该任务调用的模块\n        .pipe(autoprefixer({\n            browsers: ['last 2 versions', 'Android >= 4.0'],\n            cascade: true, //是否美化属性值 默认：true \n            remove:true //是否去掉不必要的前缀 默认：true \n        }))\n        .pipe(gulp.dest('./css')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n\n```\n2.使用示例：\n![mark](http://xiongcao.github.io/blogImage/blog/170715/lhl9ajJEIA.png?imageslim)\n\n#### 4.执行任务：   \n命令提示符：gulp sass\n\n#### 5.编译结果：\n浏览器中的编译结果：\n![mark](http://xiongcao.github.io/blogImage/blog/170715/IKCG8CDh46.png?imageslim)\n\n\n## 3.使用gulp编译js\n\n### 1.gulp-babel的使用：\n\n#### 1.介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范\n\n#### 2.本地安转：\n1.npm install gulp-babel --save-dev  \n2.npm install babel-preset-es2015 --save-dev\n\n#### 3.配置gulpfile.js\n\n1.配置：\n\n```js\n//导入babel工具包\nvar less = require('gulp-babel');\n\n//定义一个babel任务（自定义任务名称）\n//定义一个babel任务（自定义任务名称）编译js\ngulp.task('babel', function () {\n    gulp.src('./src/**/*.js') //该任务针对的文件\n        .pipe(babel({\n            presets: ['es2015']\n        })) //该任务调用的模块\n        .pipe(gulp.dest('./js')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n```\n\n2.ES6使用示例：\n\n![mark](http://xiongcao.github.io/blogImage/blog/170716/LBLjFGhFF5.png?imageslim)\n\n#### 4.执行任务：   \n命令提示符：gulp babel\n\n\n#### 5.编译结果：\n\n![mark](http://xiongcao.github.io/blogImage/blog/170716/Hbd5lihjCL.png?imageslim)\n\n\n### 2.gulp-uglify的使用：\n\n#### 1.介绍：压缩js代码\n\n#### 2.本地安转： npm install gulp-uglify --save-dev  \n\n#### 3.配置gulpfile.js\n\n1.配置：\n\n```js\n//导入uglify工具包\nvar uglify = require('gulp-uglify');\n\n//定义一个babel任务（自定义任务名称）编译js\ngulp.task('babel', function () {\n    gulp.src('./src/**/*.js') //该任务针对的文件\n        .pipe(babel({\n            presets: ['es2015']\n        })) //该任务调用的模块\n        .pipe(uglify({ //压缩js\n         // mangle: false,//类型：Boolean 默认：true 是否修改变量名\n         // compress: true//类型：Boolean 默认：true 是否完全压缩\n        }))\n        .pipe(gulp.dest('./js')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n```\n\n2.ES6使用示例：\n\n![mark](http://xiongcao.github.io/blogImage/blog/170716/LBLjFGhFF5.png?imageslim)\n\n#### 4.执行任务：   \n命令提示符：gulp babel\n\n\n#### 5.编译结果：\n\n![mark](http://xiongcao.github.io/blogImage/blog/170716/7Kg8hi0Jla.png?imageslim)\n\n\n### gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。\n此dome在我的github上，可以下载自行查看<a href=\"https://github.com/xiongcao/project-gule\" target=\"_blank\">https://github.com/xiongcao/project-gule</a>","source":"_posts/使用gulp插件快速开发项目.md","raw":"title: 使用gulp插件快速开发项目\nauthor: 熊 超\ntags:\n  - gulp\ncategories:\n  - 工具\ndate: 2017-07-16 00:15:00\n---\n---\n<!--more-->\n\n## 简介：\n&ensp;&ensp;&ensp;&ensp;gulp有着丰富的插件库，她能自动化地完成javascript、coffee、sass、less、html、image、css 等文件的的测试、检查、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤，能快速提高我们项目的开发效率。\n\n\n## 1.gulpfile.js基本配置示例：\n&ensp;&ensp;&ensp;&ensp;通过此配置示例可以让我们快速编写js,css代码并打包压缩文件，减少文件资源大小。\n\n\n\n```js\n//导入工具包 require('node_modules里对应模块')\nvar gulp = require('gulp'); //本地安装gulp所用到的地方\nvar sass = require('gulp-sass');//将scss文件编译成浏览器可识别的css\nvar minifycss = require('gulp-minify-css');//压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\nvar cleancss = require('gulp-clean-css');//压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\nvar livereload = require('gulp-livereload');//监听文件发生变化时，浏览器自动刷新页面\nvar babel = require('gulp-babel');//将ES6编译成ES5\nvar uglify = require('gulp-uglify');//压缩js\nvar autoprefixer = require('gulp-autoprefixer');//根据设置浏览器版本自动处理浏览器前缀\n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass()) //该任务调用的模块\n        .pipe(cleancss({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(autoprefixer({\n            browsers: ['last 2 versions', 'Android >= 4.0'],\n            cascade: true, //是否美化属性值 默认：true \n            remove:true //是否去掉不必要的前缀 默认：true \n        }))\n        .pipe(gulp.dest('./css')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n        .pipe(livereload());//监听文件发生变化时，浏览器自动刷新页面\n});\n\n//定义一个babel任务（自定义任务名称）编译js\ngulp.task('babel', function () {\n    gulp.src('./src/**/*.js') //该任务针对的文件\n        .pipe(babel({\n            presets: ['es2015']\n        })) //该任务调用的模块\n        .pipe(livereload())//监听文件发生变化时，浏览器自动刷新页面\n        .pipe(uglify({ //压缩js\n            // mangle: false,//类型：Boolean 默认：true 是否修改变量名\n            // compress: true//类型：Boolean 默认：true 是否完全压缩\n        }))\n        .pipe(gulp.dest('./js')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n\ngulp.task('auto', function () {\n    gulp.watch('./sass/**/*.scss', ['sass']);\n    gulp.watch('./src/**/*.js', ['babel']);\n    // livereload.listen();\n});\n \ngulp.task('default',['sass','auto','babel']); //定义默认任务\n\n// 通配符路径匹配示例：\n// “src/a.js”：指定具体文件；\n// “*”：匹配所有文件    例：src/*.js(包含src下的所有js文件)；\n// “**”：匹配0个或多个子文件夹    例：src/**/*.js(包含src的0个或多个子文件夹下的js文件)；\n// “{}”：匹配多个属性    例：src/{a,b}.js(包含a.js和b.js文件)  src/*.{jpg,png,gif}(src下的所有jpg/png/gif文件)；\n// “!”：排除文件    例：!src/a.js(不包含src下的a.js文件)；\n\n//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数\n//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) \n//gulp.dest(path[, options]) 处理完后文件生成路径\n\n```\n\n### 配置文件详解：\n#### 执行一个任务分三步走：\n1.导入工具包 require('node_modules里对应模块')  \n```js\nvar gulp = require('gulp'); //本地安装gulp所用到的地方\n```\n\n2.定义一个任务（自定义任务名称）  \n```js   \ngulp.task('test', function () {\n  gulp.src('./sass/**/*.scss') //该任务针对的文件\n      .pipe(test())\n      .pipe(gulp.dest('./css')) //将会在css文件夹下生成.css文件（复制文件目录及文件）\n})\n```\n3.执行任务：   \ncmd命令提示符 \n```\ngulp test\n\n```\n##### 如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp test,而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：\n```\ngulp.task('auto', function () {\n    gulp.watch('./src/**/*.js', ['test']);\n});\ngulp.task('default',['auto','test']); //定义默认任务\n\n```\n这样我们只需要输入一次命令gulp,就可以监听到每次代码的修改，自动帮我们编译，减少了很多繁琐的操作。\n\n\n## 2.使用gulp编译css\n\n### 1.gulp-sass的使用：\n\n#### 1.简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\n\n#### 2.本地安转：npm install gulp-less --save-dev\n\n#### 3.配置gulpfile.js\n\n1.配置：\n\n```js\n//导入sass工具包\nvar sass = require('gulp-sass');\n\n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass({\n        outputStyle: 'compact'  //代码风格\n      // nested：嵌套缩进的css代码，它是默认值。\n      // expanded：没有缩进的、扩展的css代码。\n      // compact：简洁格式的css代码。\n      // compressed：压缩后的css代码。\n        })) //该任务调用的模块\n        .pipe(gulp.dest('./css')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n```\n\n2.sass使用示例：\n\n```css\n$blue : #1875e7;　\n.class {\n    font-size: 12px;\n}\n.main{\n    color:$blue;\n    @if 1 + 1 == 2 { \n        border: 1px solid red;\n    }@if 5 < 3 { \n        border: 2px dotted blue; \n    }\n    .parent{\n        margin-left:10px + 20px;\n        &:hover{\n            cursor: pointer;\n            @extend .class;\n        }\n    }\n}\n\n```\n\n#### 4.执行任务：   \n命令提示符：gulp sass\n\n\n#### 5.编译结果：\n\n![mark](http://xiongcao.github.io/blogImage/blog/170715/IaCJglCfag.png?imageslim)\n\n### 2.gulp-minify-css的使用：\n\n#### 1.插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存  \n\n\n#### 2.本地安转：npm install gulp-minify-css --save-dev。\n\n#### 3.配置gulpfile.js    \n\n1.配置\n```js\nvar minifycss = require('gulp-minify-css');\n\n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass({\n            outputStyle: 'compact'  //代码风格\n        // nested：嵌套缩进的css代码，它是默认值。\n        // expanded：没有缩进的、扩展的css代码。\n        // compact：简洁格式的css代码。\n        // compressed：压缩后的css代码。\n        })) //该任务调用的模块\n        .pipe(minifycss({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(gulp.dest('./css')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n\n```\n2.使用示例：\n![mark](http://xiongcao.github.io/blogImage/blog/170715/GCLHfi4haD.png?imageslim)\n\n#### 4.执行任务：   \n命令提示符：gulp sass\n\n#### 5.编译结果：\n![mark](http://xiongcao.github.io/blogImage/blog/170715/CHD62jD9kd.png?imageslim)\n编译之后的css文件被压缩了\n\n### 3.gulp-autoprefixer：\n\n#### 1.插件介绍：根据设置浏览器版本自动处理浏览器前缀\n\n\n#### 2.本地安转：npm install gulp-autoprefixer --save-dev。\n\n#### 3.配置gulpfile.js    \n\n1.配置\n```js\nvar autoprefixer = require('gulp-autoprefixer');\n\n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass({\n            outputStyle: 'compact'  //代码风格\n        // nested：嵌套缩进的css代码，它是默认值。\n        // expanded：没有缩进的、扩展的css代码。\n        // compact：简洁格式的css代码。\n        // compressed：压缩后的css代码。\n        })) //该任务调用的模块\n        .pipe(autoprefixer({\n            browsers: ['last 2 versions', 'Android >= 4.0'],\n            cascade: true, //是否美化属性值 默认：true \n            remove:true //是否去掉不必要的前缀 默认：true \n        }))\n        .pipe(gulp.dest('./css')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n\n```\n2.使用示例：\n![mark](http://xiongcao.github.io/blogImage/blog/170715/lhl9ajJEIA.png?imageslim)\n\n#### 4.执行任务：   \n命令提示符：gulp sass\n\n#### 5.编译结果：\n浏览器中的编译结果：\n![mark](http://xiongcao.github.io/blogImage/blog/170715/IKCG8CDh46.png?imageslim)\n\n\n## 3.使用gulp编译js\n\n### 1.gulp-babel的使用：\n\n#### 1.介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范\n\n#### 2.本地安转：\n1.npm install gulp-babel --save-dev  \n2.npm install babel-preset-es2015 --save-dev\n\n#### 3.配置gulpfile.js\n\n1.配置：\n\n```js\n//导入babel工具包\nvar less = require('gulp-babel');\n\n//定义一个babel任务（自定义任务名称）\n//定义一个babel任务（自定义任务名称）编译js\ngulp.task('babel', function () {\n    gulp.src('./src/**/*.js') //该任务针对的文件\n        .pipe(babel({\n            presets: ['es2015']\n        })) //该任务调用的模块\n        .pipe(gulp.dest('./js')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n```\n\n2.ES6使用示例：\n\n![mark](http://xiongcao.github.io/blogImage/blog/170716/LBLjFGhFF5.png?imageslim)\n\n#### 4.执行任务：   \n命令提示符：gulp babel\n\n\n#### 5.编译结果：\n\n![mark](http://xiongcao.github.io/blogImage/blog/170716/Hbd5lihjCL.png?imageslim)\n\n\n### 2.gulp-uglify的使用：\n\n#### 1.介绍：压缩js代码\n\n#### 2.本地安转： npm install gulp-uglify --save-dev  \n\n#### 3.配置gulpfile.js\n\n1.配置：\n\n```js\n//导入uglify工具包\nvar uglify = require('gulp-uglify');\n\n//定义一个babel任务（自定义任务名称）编译js\ngulp.task('babel', function () {\n    gulp.src('./src/**/*.js') //该任务针对的文件\n        .pipe(babel({\n            presets: ['es2015']\n        })) //该任务调用的模块\n        .pipe(uglify({ //压缩js\n         // mangle: false,//类型：Boolean 默认：true 是否修改变量名\n         // compress: true//类型：Boolean 默认：true 是否完全压缩\n        }))\n        .pipe(gulp.dest('./js')) //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n\n```\n\n2.ES6使用示例：\n\n![mark](http://xiongcao.github.io/blogImage/blog/170716/LBLjFGhFF5.png?imageslim)\n\n#### 4.执行任务：   \n命令提示符：gulp babel\n\n\n#### 5.编译结果：\n\n![mark](http://xiongcao.github.io/blogImage/blog/170716/7Kg8hi0Jla.png?imageslim)\n\n\n### gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。\n此dome在我的github上，可以下载自行查看<a href=\"https://github.com/xiongcao/project-gule\" target=\"_blank\">https://github.com/xiongcao/project-gule</a>","slug":"使用gulp插件快速开发项目","published":1,"updated":"2023-07-19T03:05:34.891Z","_id":"clk82gyjx00103164ahb477uc","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<span id=\"more\"></span>\n\n<h2 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h2><p>&ensp;&ensp;&ensp;&ensp;gulp有着丰富的插件库，她能自动化地完成javascript、coffee、sass、less、html、image、css 等文件的的测试、检查、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤，能快速提高我们项目的开发效率。</p>\n<h2 id=\"1-gulpfile-js基本配置示例：\"><a href=\"#1-gulpfile-js基本配置示例：\" class=\"headerlink\" title=\"1.gulpfile.js基本配置示例：\"></a>1.gulpfile.js基本配置示例：</h2><p>&ensp;&ensp;&ensp;&ensp;通过此配置示例可以让我们快速编写js,css代码并打包压缩文件，减少文件资源大小。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//导入工具包 require(&#x27;node_modules里对应模块&#x27;)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>); <span class=\"comment\">//本地安装gulp所用到的地方</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-sass&#x27;</span>);<span class=\"comment\">//将scss文件编译成浏览器可识别的css</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-minify-css&#x27;</span>);<span class=\"comment\">//压缩css文件，减小文件大小，并给引用url添加版本号避免缓存</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cleancss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-clean-css&#x27;</span>);<span class=\"comment\">//压缩css文件，减小文件大小，并给引用url添加版本号避免缓存</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> livereload = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-livereload&#x27;</span>);<span class=\"comment\">//监听文件发生变化时，浏览器自动刷新页面</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-babel&#x27;</span>);<span class=\"comment\">//将ES6编译成ES5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-uglify&#x27;</span>);<span class=\"comment\">//压缩js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-autoprefixer&#x27;</span>);<span class=\"comment\">//根据设置浏览器版本自动处理浏览器前缀</span></span><br><span class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;sass&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./sass/**/*.scss&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">sass</span>()) <span class=\"comment\">//该任务调用的模块</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">cleancss</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">advanced</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class=\"line\">            <span class=\"attr\">compatibility</span>: <span class=\"string\">&#x27;ie7&#x27;</span>,<span class=\"comment\">//保留ie7及以下兼容写法 类型：String 默认：&#x27;&#x27;or&#x27;*&#x27; [启用兼容模式； &#x27;ie7&#x27;：IE7兼容模式，&#x27;ie8&#x27;：IE8兼容模式，&#x27;*&#x27;：IE9+兼容模式]</span></span><br><span class=\"line\">            <span class=\"attr\">keepBreaks</span>: <span class=\"literal\">true</span>,<span class=\"comment\">//类型：Boolean 默认：false [是否保留换行]</span></span><br><span class=\"line\">            <span class=\"attr\">keepSpecialComments</span>: <span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\">            <span class=\"comment\">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">autoprefixer</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">browsers</span>: [<span class=\"string\">&#x27;last 2 versions&#x27;</span>, <span class=\"string\">&#x27;Android &gt;= 4.0&#x27;</span>],</span><br><span class=\"line\">            <span class=\"attr\">cascade</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//是否美化属性值 默认：true </span></span><br><span class=\"line\">            <span class=\"attr\">remove</span>:<span class=\"literal\">true</span> <span class=\"comment\">//是否去掉不必要的前缀 默认：true </span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./css&#x27;</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">livereload</span>());<span class=\"comment\">//监听文件发生变化时，浏览器自动刷新页面</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个babel任务（自定义任务名称）编译js</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;babel&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./src/**/*.js&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;es2015&#x27;</span>]</span><br><span class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">livereload</span>())<span class=\"comment\">//监听文件发生变化时，浏览器自动刷新页面</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>(&#123; <span class=\"comment\">//压缩js</span></span><br><span class=\"line\">            <span class=\"comment\">// mangle: false,//类型：Boolean 默认：true 是否修改变量名</span></span><br><span class=\"line\">            <span class=\"comment\">// compress: true//类型：Boolean 默认：true 是否完全压缩</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./js&#x27;</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;auto&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;./sass/**/*.scss&#x27;</span>, [<span class=\"string\">&#x27;sass&#x27;</span>]);</span><br><span class=\"line\">    gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;./src/**/*.js&#x27;</span>, [<span class=\"string\">&#x27;babel&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"comment\">// livereload.listen();</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;default&#x27;</span>,[<span class=\"string\">&#x27;sass&#x27;</span>,<span class=\"string\">&#x27;auto&#x27;</span>,<span class=\"string\">&#x27;babel&#x27;</span>]); <span class=\"comment\">//定义默认任务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通配符路径匹配示例：</span></span><br><span class=\"line\"><span class=\"comment\">// “src/a.js”：指定具体文件；</span></span><br><span class=\"line\"><span class=\"comment\">// “*”：匹配所有文件    例：src/*.js(包含src下的所有js文件)；</span></span><br><span class=\"line\"><span class=\"comment\">// “**”：匹配0个或多个子文件夹    例：src/**/*.js(包含src的0个或多个子文件夹下的js文件)；</span></span><br><span class=\"line\"><span class=\"comment\">// “&#123;&#125;”：匹配多个属性    例：src/&#123;a,b&#125;.js(包含a.js和b.js文件)  src/*.&#123;jpg,png,gif&#125;(src下的所有jpg/png/gif文件)；</span></span><br><span class=\"line\"><span class=\"comment\">// “!”：排除文件    例：!src/a.js(不包含src下的a.js文件)；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数</span></span><br><span class=\"line\"><span class=\"comment\">//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) </span></span><br><span class=\"line\"><span class=\"comment\">//gulp.dest(path[, options]) 处理完后文件生成路径</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件详解：\"><a href=\"#配置文件详解：\" class=\"headerlink\" title=\"配置文件详解：\"></a>配置文件详解：</h3><h4 id=\"执行一个任务分三步走：\"><a href=\"#执行一个任务分三步走：\" class=\"headerlink\" title=\"执行一个任务分三步走：\"></a>执行一个任务分三步走：</h4><p>1.导入工具包 require(‘node_modules里对应模块’)  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>); <span class=\"comment\">//本地安装gulp所用到的地方</span></span><br></pre></td></tr></table></figure>\n\n<p>2.定义一个任务（自定义任务名称）  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./sass/**/*.scss&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">      .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">test</span>())</span><br><span class=\"line\">      .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./css&#x27;</span>)) <span class=\"comment\">//将会在css文件夹下生成.css文件（复制文件目录及文件）</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>3.执行任务：<br>cmd命令提示符 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp-test-而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：\"><a href=\"#如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp-test-而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：\" class=\"headerlink\" title=\"如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp test,而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：\"></a>如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp test,而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(&#x27;auto&#x27;, function () &#123;</span><br><span class=\"line\">    gulp.watch(&#x27;./src/**/*.js&#x27;, [&#x27;test&#x27;]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">gulp.task(&#x27;default&#x27;,[&#x27;auto&#x27;,&#x27;test&#x27;]); //定义默认任务</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这样我们只需要输入一次命令gulp,就可以监听到每次代码的修改，自动帮我们编译，减少了很多繁琐的操作。</p>\n<h2 id=\"2-使用gulp编译css\"><a href=\"#2-使用gulp编译css\" class=\"headerlink\" title=\"2.使用gulp编译css\"></a>2.使用gulp编译css</h2><h3 id=\"1-gulp-sass的使用：\"><a href=\"#1-gulp-sass的使用：\" class=\"headerlink\" title=\"1.gulp-sass的使用：\"></a>1.gulp-sass的使用：</h3><h4 id=\"1-简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\"><a href=\"#1-简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\" class=\"headerlink\" title=\"1.简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\"></a>1.简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。</h4><h4 id=\"2-本地安转：npm-install-gulp-less-–save-dev\"><a href=\"#2-本地安转：npm-install-gulp-less-–save-dev\" class=\"headerlink\" title=\"2.本地安转：npm install gulp-less –save-dev\"></a>2.本地安转：npm install gulp-less –save-dev</h4><h4 id=\"3-配置gulpfile-js\"><a href=\"#3-配置gulpfile-js\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//导入sass工具包</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-sass&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;sass&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./sass/**/*.scss&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">sass</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">outputStyle</span>: <span class=\"string\">&#x27;compact&#x27;</span>  <span class=\"comment\">//代码风格</span></span><br><span class=\"line\">      <span class=\"comment\">// nested：嵌套缩进的css代码，它是默认值。</span></span><br><span class=\"line\">      <span class=\"comment\">// expanded：没有缩进的、扩展的css代码。</span></span><br><span class=\"line\">      <span class=\"comment\">// compact：简洁格式的css代码。</span></span><br><span class=\"line\">      <span class=\"comment\">// compressed：压缩后的css代码。</span></span><br><span class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./css&#x27;</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2.sass使用示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$blue : <span class=\"number\">#1875e7</span>;　</span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:$blue;</span><br><span class=\"line\">    <span class=\"keyword\">@if</span> <span class=\"number\">1</span> + <span class=\"number\">1</span> == <span class=\"number\">2</span> &#123; </span><br><span class=\"line\">        <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">@if</span> <span class=\"number\">5</span> &lt; <span class=\"number\">3</span> &#123; </span><br><span class=\"line\">        <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted blue; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">margin-left</span>:<span class=\"number\">10px</span> + <span class=\"number\">20px</span>;</span><br><span class=\"line\">        &amp;<span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">            <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">            <span class=\"keyword\">@extend</span> .class;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-执行任务：\"><a href=\"#4-执行任务：\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp sass</p>\n<h4 id=\"5-编译结果：\"><a href=\"#5-编译结果：\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170715/IaCJglCfag.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"2-gulp-minify-css的使用：\"><a href=\"#2-gulp-minify-css的使用：\" class=\"headerlink\" title=\"2.gulp-minify-css的使用：\"></a>2.gulp-minify-css的使用：</h3><h4 id=\"1-插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\"><a href=\"#1-插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\" class=\"headerlink\" title=\"1.插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\"></a>1.插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存</h4><h4 id=\"2-本地安转：npm-install-gulp-minify-css-–save-dev。\"><a href=\"#2-本地安转：npm-install-gulp-minify-css-–save-dev。\" class=\"headerlink\" title=\"2.本地安转：npm install gulp-minify-css –save-dev。\"></a>2.本地安转：npm install gulp-minify-css –save-dev。</h4><h4 id=\"3-配置gulpfile-js-1\"><a href=\"#3-配置gulpfile-js-1\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-minify-css&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;sass&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./sass/**/*.scss&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">sass</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">outputStyle</span>: <span class=\"string\">&#x27;compact&#x27;</span>  <span class=\"comment\">//代码风格</span></span><br><span class=\"line\">        <span class=\"comment\">// nested：嵌套缩进的css代码，它是默认值。</span></span><br><span class=\"line\">        <span class=\"comment\">// expanded：没有缩进的、扩展的css代码。</span></span><br><span class=\"line\">        <span class=\"comment\">// compact：简洁格式的css代码。</span></span><br><span class=\"line\">        <span class=\"comment\">// compressed：压缩后的css代码。</span></span><br><span class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">minifycss</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">advanced</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class=\"line\">            <span class=\"attr\">compatibility</span>: <span class=\"string\">&#x27;ie7&#x27;</span>,<span class=\"comment\">//保留ie7及以下兼容写法 类型：String 默认：&#x27;&#x27;or&#x27;*&#x27; [启用兼容模式； &#x27;ie7&#x27;：IE7兼容模式，&#x27;ie8&#x27;：IE8兼容模式，&#x27;*&#x27;：IE9+兼容模式]</span></span><br><span class=\"line\">            <span class=\"attr\">keepBreaks</span>: <span class=\"literal\">true</span>,<span class=\"comment\">//类型：Boolean 默认：false [是否保留换行]</span></span><br><span class=\"line\">            <span class=\"attr\">keepSpecialComments</span>: <span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\">            <span class=\"comment\">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./css&#x27;</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>2.使用示例：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170715/GCLHfi4haD.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h4 id=\"4-执行任务：-1\"><a href=\"#4-执行任务：-1\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp sass</p>\n<h4 id=\"5-编译结果：-1\"><a href=\"#5-编译结果：-1\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170715/CHD62jD9kd.png?imageslim\"\n                      alt=\"mark\"\n                ><br>编译之后的css文件被压缩了</p>\n<h3 id=\"3-gulp-autoprefixer：\"><a href=\"#3-gulp-autoprefixer：\" class=\"headerlink\" title=\"3.gulp-autoprefixer：\"></a>3.gulp-autoprefixer：</h3><h4 id=\"1-插件介绍：根据设置浏览器版本自动处理浏览器前缀\"><a href=\"#1-插件介绍：根据设置浏览器版本自动处理浏览器前缀\" class=\"headerlink\" title=\"1.插件介绍：根据设置浏览器版本自动处理浏览器前缀\"></a>1.插件介绍：根据设置浏览器版本自动处理浏览器前缀</h4><h4 id=\"2-本地安转：npm-install-gulp-autoprefixer-–save-dev。\"><a href=\"#2-本地安转：npm-install-gulp-autoprefixer-–save-dev。\" class=\"headerlink\" title=\"2.本地安转：npm install gulp-autoprefixer –save-dev。\"></a>2.本地安转：npm install gulp-autoprefixer –save-dev。</h4><h4 id=\"3-配置gulpfile-js-2\"><a href=\"#3-配置gulpfile-js-2\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-autoprefixer&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;sass&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./sass/**/*.scss&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">sass</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">outputStyle</span>: <span class=\"string\">&#x27;compact&#x27;</span>  <span class=\"comment\">//代码风格</span></span><br><span class=\"line\">        <span class=\"comment\">// nested：嵌套缩进的css代码，它是默认值。</span></span><br><span class=\"line\">        <span class=\"comment\">// expanded：没有缩进的、扩展的css代码。</span></span><br><span class=\"line\">        <span class=\"comment\">// compact：简洁格式的css代码。</span></span><br><span class=\"line\">        <span class=\"comment\">// compressed：压缩后的css代码。</span></span><br><span class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">autoprefixer</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">browsers</span>: [<span class=\"string\">&#x27;last 2 versions&#x27;</span>, <span class=\"string\">&#x27;Android &gt;= 4.0&#x27;</span>],</span><br><span class=\"line\">            <span class=\"attr\">cascade</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//是否美化属性值 默认：true </span></span><br><span class=\"line\">            <span class=\"attr\">remove</span>:<span class=\"literal\">true</span> <span class=\"comment\">//是否去掉不必要的前缀 默认：true </span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./css&#x27;</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>2.使用示例：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170715/lhl9ajJEIA.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h4 id=\"4-执行任务：-2\"><a href=\"#4-执行任务：-2\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp sass</p>\n<h4 id=\"5-编译结果：-2\"><a href=\"#5-编译结果：-2\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p>浏览器中的编译结果：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170715/IKCG8CDh46.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h2 id=\"3-使用gulp编译js\"><a href=\"#3-使用gulp编译js\" class=\"headerlink\" title=\"3.使用gulp编译js\"></a>3.使用gulp编译js</h2><h3 id=\"1-gulp-babel的使用：\"><a href=\"#1-gulp-babel的使用：\" class=\"headerlink\" title=\"1.gulp-babel的使用：\"></a>1.gulp-babel的使用：</h3><h4 id=\"1-介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范\"><a href=\"#1-介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范\" class=\"headerlink\" title=\"1.介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范\"></a>1.介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范</h4><h4 id=\"2-本地安转：\"><a href=\"#2-本地安转：\" class=\"headerlink\" title=\"2.本地安转：\"></a>2.本地安转：</h4><p>1.npm install gulp-babel –save-dev<br>2.npm install babel-preset-es2015 –save-dev</p>\n<h4 id=\"3-配置gulpfile-js-3\"><a href=\"#3-配置gulpfile-js-3\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//导入babel工具包</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-babel&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个babel任务（自定义任务名称）</span></span><br><span class=\"line\"><span class=\"comment\">//定义一个babel任务（自定义任务名称）编译js</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;babel&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./src/**/*.js&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;es2015&#x27;</span>]</span><br><span class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./js&#x27;</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2.ES6使用示例：</p>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170716/LBLjFGhFF5.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h4 id=\"4-执行任务：-3\"><a href=\"#4-执行任务：-3\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp babel</p>\n<h4 id=\"5-编译结果：-3\"><a href=\"#5-编译结果：-3\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170716/Hbd5lihjCL.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"2-gulp-uglify的使用：\"><a href=\"#2-gulp-uglify的使用：\" class=\"headerlink\" title=\"2.gulp-uglify的使用：\"></a>2.gulp-uglify的使用：</h3><h4 id=\"1-介绍：压缩js代码\"><a href=\"#1-介绍：压缩js代码\" class=\"headerlink\" title=\"1.介绍：压缩js代码\"></a>1.介绍：压缩js代码</h4><h4 id=\"2-本地安转：-npm-install-gulp-uglify-–save-dev\"><a href=\"#2-本地安转：-npm-install-gulp-uglify-–save-dev\" class=\"headerlink\" title=\"2.本地安转： npm install gulp-uglify –save-dev\"></a>2.本地安转： npm install gulp-uglify –save-dev</h4><h4 id=\"3-配置gulpfile-js-4\"><a href=\"#3-配置gulpfile-js-4\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//导入uglify工具包</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-uglify&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个babel任务（自定义任务名称）编译js</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;babel&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./src/**/*.js&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;es2015&#x27;</span>]</span><br><span class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>(&#123; <span class=\"comment\">//压缩js</span></span><br><span class=\"line\">         <span class=\"comment\">// mangle: false,//类型：Boolean 默认：true 是否修改变量名</span></span><br><span class=\"line\">         <span class=\"comment\">// compress: true//类型：Boolean 默认：true 是否完全压缩</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./js&#x27;</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2.ES6使用示例：</p>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170716/LBLjFGhFF5.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h4 id=\"4-执行任务：-4\"><a href=\"#4-执行任务：-4\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp babel</p>\n<h4 id=\"5-编译结果：-4\"><a href=\"#5-编译结果：-4\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170716/7Kg8hi0Jla.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。\"><a href=\"#gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。\" class=\"headerlink\" title=\"gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。\"></a>gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。</h3><p>此dome在我的github上，可以下载自行查看<a class=\"link\"   href=\"https://github.com/xiongcao/project-gule\"  target=\"_blank\">https://github.com/xiongcao/project-gule<i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{}},"excerpt":"<hr>","more":"<h2 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h2><p>&ensp;&ensp;&ensp;&ensp;gulp有着丰富的插件库，她能自动化地完成javascript、coffee、sass、less、html、image、css 等文件的的测试、检查、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤，能快速提高我们项目的开发效率。</p>\n<h2 id=\"1-gulpfile-js基本配置示例：\"><a href=\"#1-gulpfile-js基本配置示例：\" class=\"headerlink\" title=\"1.gulpfile.js基本配置示例：\"></a>1.gulpfile.js基本配置示例：</h2><p>&ensp;&ensp;&ensp;&ensp;通过此配置示例可以让我们快速编写js,css代码并打包压缩文件，减少文件资源大小。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//导入工具包 require(&#x27;node_modules里对应模块&#x27;)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>); <span class=\"comment\">//本地安装gulp所用到的地方</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-sass&#x27;</span>);<span class=\"comment\">//将scss文件编译成浏览器可识别的css</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-minify-css&#x27;</span>);<span class=\"comment\">//压缩css文件，减小文件大小，并给引用url添加版本号避免缓存</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cleancss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-clean-css&#x27;</span>);<span class=\"comment\">//压缩css文件，减小文件大小，并给引用url添加版本号避免缓存</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> livereload = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-livereload&#x27;</span>);<span class=\"comment\">//监听文件发生变化时，浏览器自动刷新页面</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> babel = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-babel&#x27;</span>);<span class=\"comment\">//将ES6编译成ES5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-uglify&#x27;</span>);<span class=\"comment\">//压缩js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-autoprefixer&#x27;</span>);<span class=\"comment\">//根据设置浏览器版本自动处理浏览器前缀</span></span><br><span class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;sass&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./sass/**/*.scss&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">sass</span>()) <span class=\"comment\">//该任务调用的模块</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">cleancss</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">advanced</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class=\"line\">            <span class=\"attr\">compatibility</span>: <span class=\"string\">&#x27;ie7&#x27;</span>,<span class=\"comment\">//保留ie7及以下兼容写法 类型：String 默认：&#x27;&#x27;or&#x27;*&#x27; [启用兼容模式； &#x27;ie7&#x27;：IE7兼容模式，&#x27;ie8&#x27;：IE8兼容模式，&#x27;*&#x27;：IE9+兼容模式]</span></span><br><span class=\"line\">            <span class=\"attr\">keepBreaks</span>: <span class=\"literal\">true</span>,<span class=\"comment\">//类型：Boolean 默认：false [是否保留换行]</span></span><br><span class=\"line\">            <span class=\"attr\">keepSpecialComments</span>: <span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\">            <span class=\"comment\">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">autoprefixer</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">browsers</span>: [<span class=\"string\">&#x27;last 2 versions&#x27;</span>, <span class=\"string\">&#x27;Android &gt;= 4.0&#x27;</span>],</span><br><span class=\"line\">            <span class=\"attr\">cascade</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//是否美化属性值 默认：true </span></span><br><span class=\"line\">            <span class=\"attr\">remove</span>:<span class=\"literal\">true</span> <span class=\"comment\">//是否去掉不必要的前缀 默认：true </span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./css&#x27;</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">livereload</span>());<span class=\"comment\">//监听文件发生变化时，浏览器自动刷新页面</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个babel任务（自定义任务名称）编译js</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;babel&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./src/**/*.js&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;es2015&#x27;</span>]</span><br><span class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">livereload</span>())<span class=\"comment\">//监听文件发生变化时，浏览器自动刷新页面</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>(&#123; <span class=\"comment\">//压缩js</span></span><br><span class=\"line\">            <span class=\"comment\">// mangle: false,//类型：Boolean 默认：true 是否修改变量名</span></span><br><span class=\"line\">            <span class=\"comment\">// compress: true//类型：Boolean 默认：true 是否完全压缩</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./js&#x27;</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;auto&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;./sass/**/*.scss&#x27;</span>, [<span class=\"string\">&#x27;sass&#x27;</span>]);</span><br><span class=\"line\">    gulp.<span class=\"title function_\">watch</span>(<span class=\"string\">&#x27;./src/**/*.js&#x27;</span>, [<span class=\"string\">&#x27;babel&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"comment\">// livereload.listen();</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;default&#x27;</span>,[<span class=\"string\">&#x27;sass&#x27;</span>,<span class=\"string\">&#x27;auto&#x27;</span>,<span class=\"string\">&#x27;babel&#x27;</span>]); <span class=\"comment\">//定义默认任务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通配符路径匹配示例：</span></span><br><span class=\"line\"><span class=\"comment\">// “src/a.js”：指定具体文件；</span></span><br><span class=\"line\"><span class=\"comment\">// “*”：匹配所有文件    例：src/*.js(包含src下的所有js文件)；</span></span><br><span class=\"line\"><span class=\"comment\">// “**”：匹配0个或多个子文件夹    例：src/**/*.js(包含src的0个或多个子文件夹下的js文件)；</span></span><br><span class=\"line\"><span class=\"comment\">// “&#123;&#125;”：匹配多个属性    例：src/&#123;a,b&#125;.js(包含a.js和b.js文件)  src/*.&#123;jpg,png,gif&#125;(src下的所有jpg/png/gif文件)；</span></span><br><span class=\"line\"><span class=\"comment\">// “!”：排除文件    例：!src/a.js(不包含src下的a.js文件)；</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数</span></span><br><span class=\"line\"><span class=\"comment\">//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) </span></span><br><span class=\"line\"><span class=\"comment\">//gulp.dest(path[, options]) 处理完后文件生成路径</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件详解：\"><a href=\"#配置文件详解：\" class=\"headerlink\" title=\"配置文件详解：\"></a>配置文件详解：</h3><h4 id=\"执行一个任务分三步走：\"><a href=\"#执行一个任务分三步走：\" class=\"headerlink\" title=\"执行一个任务分三步走：\"></a>执行一个任务分三步走：</h4><p>1.导入工具包 require(‘node_modules里对应模块’)  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>); <span class=\"comment\">//本地安装gulp所用到的地方</span></span><br></pre></td></tr></table></figure>\n\n<p>2.定义一个任务（自定义任务名称）  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;test&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./sass/**/*.scss&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">      .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">test</span>())</span><br><span class=\"line\">      .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./css&#x27;</span>)) <span class=\"comment\">//将会在css文件夹下生成.css文件（复制文件目录及文件）</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>3.执行任务：<br>cmd命令提示符 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp test</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp-test-而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：\"><a href=\"#如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp-test-而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：\" class=\"headerlink\" title=\"如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp test,而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：\"></a>如果只是简单的配置了上面部分，每当我们修改了代码都需要重新执行命令gulp test,而且如果有多个任务就要执行多个命令，为了避免这么繁琐的操作可以加上如下配置：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(&#x27;auto&#x27;, function () &#123;</span><br><span class=\"line\">    gulp.watch(&#x27;./src/**/*.js&#x27;, [&#x27;test&#x27;]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">gulp.task(&#x27;default&#x27;,[&#x27;auto&#x27;,&#x27;test&#x27;]); //定义默认任务</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这样我们只需要输入一次命令gulp,就可以监听到每次代码的修改，自动帮我们编译，减少了很多繁琐的操作。</p>\n<h2 id=\"2-使用gulp编译css\"><a href=\"#2-使用gulp编译css\" class=\"headerlink\" title=\"2.使用gulp编译css\"></a>2.使用gulp编译css</h2><h3 id=\"1-gulp-sass的使用：\"><a href=\"#1-gulp-sass的使用：\" class=\"headerlink\" title=\"1.gulp-sass的使用：\"></a>1.gulp-sass的使用：</h3><h4 id=\"1-简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\"><a href=\"#1-简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\" class=\"headerlink\" title=\"1.简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。\"></a>1.简介：SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。</h4><h4 id=\"2-本地安转：npm-install-gulp-less-–save-dev\"><a href=\"#2-本地安转：npm-install-gulp-less-–save-dev\" class=\"headerlink\" title=\"2.本地安转：npm install gulp-less –save-dev\"></a>2.本地安转：npm install gulp-less –save-dev</h4><h4 id=\"3-配置gulpfile-js\"><a href=\"#3-配置gulpfile-js\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//导入sass工具包</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-sass&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;sass&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./sass/**/*.scss&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">sass</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">outputStyle</span>: <span class=\"string\">&#x27;compact&#x27;</span>  <span class=\"comment\">//代码风格</span></span><br><span class=\"line\">      <span class=\"comment\">// nested：嵌套缩进的css代码，它是默认值。</span></span><br><span class=\"line\">      <span class=\"comment\">// expanded：没有缩进的、扩展的css代码。</span></span><br><span class=\"line\">      <span class=\"comment\">// compact：简洁格式的css代码。</span></span><br><span class=\"line\">      <span class=\"comment\">// compressed：压缩后的css代码。</span></span><br><span class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./css&#x27;</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2.sass使用示例：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$blue : <span class=\"number\">#1875e7</span>;　</span><br><span class=\"line\"><span class=\"selector-class\">.class</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:$blue;</span><br><span class=\"line\">    <span class=\"keyword\">@if</span> <span class=\"number\">1</span> + <span class=\"number\">1</span> == <span class=\"number\">2</span> &#123; </span><br><span class=\"line\">        <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">@if</span> <span class=\"number\">5</span> &lt; <span class=\"number\">3</span> &#123; </span><br><span class=\"line\">        <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted blue; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.parent</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">margin-left</span>:<span class=\"number\">10px</span> + <span class=\"number\">20px</span>;</span><br><span class=\"line\">        &amp;<span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">            <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">            <span class=\"keyword\">@extend</span> .class;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-执行任务：\"><a href=\"#4-执行任务：\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp sass</p>\n<h4 id=\"5-编译结果：\"><a href=\"#5-编译结果：\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170715/IaCJglCfag.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"2-gulp-minify-css的使用：\"><a href=\"#2-gulp-minify-css的使用：\" class=\"headerlink\" title=\"2.gulp-minify-css的使用：\"></a>2.gulp-minify-css的使用：</h3><h4 id=\"1-插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\"><a href=\"#1-插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\" class=\"headerlink\" title=\"1.插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存\"></a>1.插件介绍：压缩css文件，减小文件大小，并给引用url添加版本号避免缓存</h4><h4 id=\"2-本地安转：npm-install-gulp-minify-css-–save-dev。\"><a href=\"#2-本地安转：npm-install-gulp-minify-css-–save-dev。\" class=\"headerlink\" title=\"2.本地安转：npm install gulp-minify-css –save-dev。\"></a>2.本地安转：npm install gulp-minify-css –save-dev。</h4><h4 id=\"3-配置gulpfile-js-1\"><a href=\"#3-配置gulpfile-js-1\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-minify-css&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;sass&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./sass/**/*.scss&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">sass</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">outputStyle</span>: <span class=\"string\">&#x27;compact&#x27;</span>  <span class=\"comment\">//代码风格</span></span><br><span class=\"line\">        <span class=\"comment\">// nested：嵌套缩进的css代码，它是默认值。</span></span><br><span class=\"line\">        <span class=\"comment\">// expanded：没有缩进的、扩展的css代码。</span></span><br><span class=\"line\">        <span class=\"comment\">// compact：简洁格式的css代码。</span></span><br><span class=\"line\">        <span class=\"comment\">// compressed：压缩后的css代码。</span></span><br><span class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">minifycss</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">advanced</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class=\"line\">            <span class=\"attr\">compatibility</span>: <span class=\"string\">&#x27;ie7&#x27;</span>,<span class=\"comment\">//保留ie7及以下兼容写法 类型：String 默认：&#x27;&#x27;or&#x27;*&#x27; [启用兼容模式； &#x27;ie7&#x27;：IE7兼容模式，&#x27;ie8&#x27;：IE8兼容模式，&#x27;*&#x27;：IE9+兼容模式]</span></span><br><span class=\"line\">            <span class=\"attr\">keepBreaks</span>: <span class=\"literal\">true</span>,<span class=\"comment\">//类型：Boolean 默认：false [是否保留换行]</span></span><br><span class=\"line\">            <span class=\"attr\">keepSpecialComments</span>: <span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\">            <span class=\"comment\">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./css&#x27;</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>2.使用示例：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170715/GCLHfi4haD.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h4 id=\"4-执行任务：-1\"><a href=\"#4-执行任务：-1\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp sass</p>\n<h4 id=\"5-编译结果：-1\"><a href=\"#5-编译结果：-1\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170715/CHD62jD9kd.png?imageslim\"\n                      alt=\"mark\"\n                ><br>编译之后的css文件被压缩了</p>\n<h3 id=\"3-gulp-autoprefixer：\"><a href=\"#3-gulp-autoprefixer：\" class=\"headerlink\" title=\"3.gulp-autoprefixer：\"></a>3.gulp-autoprefixer：</h3><h4 id=\"1-插件介绍：根据设置浏览器版本自动处理浏览器前缀\"><a href=\"#1-插件介绍：根据设置浏览器版本自动处理浏览器前缀\" class=\"headerlink\" title=\"1.插件介绍：根据设置浏览器版本自动处理浏览器前缀\"></a>1.插件介绍：根据设置浏览器版本自动处理浏览器前缀</h4><h4 id=\"2-本地安转：npm-install-gulp-autoprefixer-–save-dev。\"><a href=\"#2-本地安转：npm-install-gulp-autoprefixer-–save-dev。\" class=\"headerlink\" title=\"2.本地安转：npm install gulp-autoprefixer –save-dev。\"></a>2.本地安转：npm install gulp-autoprefixer –save-dev。</h4><h4 id=\"3-配置gulpfile-js-2\"><a href=\"#3-配置gulpfile-js-2\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-autoprefixer&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;sass&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./sass/**/*.scss&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">sass</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">outputStyle</span>: <span class=\"string\">&#x27;compact&#x27;</span>  <span class=\"comment\">//代码风格</span></span><br><span class=\"line\">        <span class=\"comment\">// nested：嵌套缩进的css代码，它是默认值。</span></span><br><span class=\"line\">        <span class=\"comment\">// expanded：没有缩进的、扩展的css代码。</span></span><br><span class=\"line\">        <span class=\"comment\">// compact：简洁格式的css代码。</span></span><br><span class=\"line\">        <span class=\"comment\">// compressed：压缩后的css代码。</span></span><br><span class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">autoprefixer</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">browsers</span>: [<span class=\"string\">&#x27;last 2 versions&#x27;</span>, <span class=\"string\">&#x27;Android &gt;= 4.0&#x27;</span>],</span><br><span class=\"line\">            <span class=\"attr\">cascade</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//是否美化属性值 默认：true </span></span><br><span class=\"line\">            <span class=\"attr\">remove</span>:<span class=\"literal\">true</span> <span class=\"comment\">//是否去掉不必要的前缀 默认：true </span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./css&#x27;</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>2.使用示例：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170715/lhl9ajJEIA.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h4 id=\"4-执行任务：-2\"><a href=\"#4-执行任务：-2\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp sass</p>\n<h4 id=\"5-编译结果：-2\"><a href=\"#5-编译结果：-2\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p>浏览器中的编译结果：<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170715/IKCG8CDh46.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h2 id=\"3-使用gulp编译js\"><a href=\"#3-使用gulp编译js\" class=\"headerlink\" title=\"3.使用gulp编译js\"></a>3.使用gulp编译js</h2><h3 id=\"1-gulp-babel的使用：\"><a href=\"#1-gulp-babel的使用：\" class=\"headerlink\" title=\"1.gulp-babel的使用：\"></a>1.gulp-babel的使用：</h3><h4 id=\"1-介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范\"><a href=\"#1-介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范\" class=\"headerlink\" title=\"1.介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范\"></a>1.介绍：gulp-babel是可以将ES6编译成大多数浏览器可识别的ES5规范</h4><h4 id=\"2-本地安转：\"><a href=\"#2-本地安转：\" class=\"headerlink\" title=\"2.本地安转：\"></a>2.本地安转：</h4><p>1.npm install gulp-babel –save-dev<br>2.npm install babel-preset-es2015 –save-dev</p>\n<h4 id=\"3-配置gulpfile-js-3\"><a href=\"#3-配置gulpfile-js-3\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//导入babel工具包</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> less = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-babel&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个babel任务（自定义任务名称）</span></span><br><span class=\"line\"><span class=\"comment\">//定义一个babel任务（自定义任务名称）编译js</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;babel&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./src/**/*.js&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;es2015&#x27;</span>]</span><br><span class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./js&#x27;</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2.ES6使用示例：</p>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170716/LBLjFGhFF5.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h4 id=\"4-执行任务：-3\"><a href=\"#4-执行任务：-3\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp babel</p>\n<h4 id=\"5-编译结果：-3\"><a href=\"#5-编译结果：-3\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170716/Hbd5lihjCL.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"2-gulp-uglify的使用：\"><a href=\"#2-gulp-uglify的使用：\" class=\"headerlink\" title=\"2.gulp-uglify的使用：\"></a>2.gulp-uglify的使用：</h3><h4 id=\"1-介绍：压缩js代码\"><a href=\"#1-介绍：压缩js代码\" class=\"headerlink\" title=\"1.介绍：压缩js代码\"></a>1.介绍：压缩js代码</h4><h4 id=\"2-本地安转：-npm-install-gulp-uglify-–save-dev\"><a href=\"#2-本地安转：-npm-install-gulp-uglify-–save-dev\" class=\"headerlink\" title=\"2.本地安转： npm install gulp-uglify –save-dev\"></a>2.本地安转： npm install gulp-uglify –save-dev</h4><h4 id=\"3-配置gulpfile-js-4\"><a href=\"#3-配置gulpfile-js-4\" class=\"headerlink\" title=\"3.配置gulpfile.js\"></a>3.配置gulpfile.js</h4><p>1.配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//导入uglify工具包</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-uglify&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个babel任务（自定义任务名称）编译js</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;babel&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./src/**/*.js&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">babel</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">&#x27;es2015&#x27;</span>]</span><br><span class=\"line\">        &#125;)) <span class=\"comment\">//该任务调用的模块</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>(&#123; <span class=\"comment\">//压缩js</span></span><br><span class=\"line\">         <span class=\"comment\">// mangle: false,//类型：Boolean 默认：true 是否修改变量名</span></span><br><span class=\"line\">         <span class=\"comment\">// compress: true//类型：Boolean 默认：true 是否完全压缩</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./js&#x27;</span>)) <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>2.ES6使用示例：</p>\n<p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170716/LBLjFGhFF5.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h4 id=\"4-执行任务：-4\"><a href=\"#4-执行任务：-4\" class=\"headerlink\" title=\"4.执行任务：\"></a>4.执行任务：</h4><p>命令提示符：gulp babel</p>\n<h4 id=\"5-编译结果：-4\"><a href=\"#5-编译结果：-4\" class=\"headerlink\" title=\"5.编译结果：\"></a>5.编译结果：</h4><p><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170716/7Kg8hi0Jla.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h3 id=\"gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。\"><a href=\"#gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。\" class=\"headerlink\" title=\"gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。\"></a>gulp插件库还有其他很多优秀的插件，可以根据自己的需要引入。</h3><p>此dome在我的github上，可以下载自行查看<a class=\"link\"   href=\"https://github.com/xiongcao/project-gule\"  target=\"_blank\">https://github.com/xiongcao/project-gule<i class=\"fas fa-external-link-alt\"></i></a></p>"},{"title":"使用gulp自动化构建前端项目","author":"熊 超","date":"2017-07-09T02:30:00.000Z","_content":"---\n<!--more-->\n\n### gulp简介：\n&ensp;&ensp;&ensp;&ensp;gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成，从而大大提高我们的工作效率。<br/>\n\n&ensp;&ensp;&ensp;&ensp;gulp是基于Nodejs的自动任务运行器,她能自动化地完成javascript、coffee、sass、less、html、image、css 等文件的的测试、检查、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。\n\n\n\n### 环境搭建：\n\n#### 1.安装nodeJS\n1.gulp是基于nodejs，所以需要安装nodejs。   \n2.自己去node官网下载nodejs安装。\n\n#### 2.npm工具\n##### 说明：\nnpm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）；\n\n##### 使用npm安装插件：npm install &lt;name&gt; [-g] [--save-dev]；  \n1.name: node插件名称。例：npm install gulp-sass --save-dev；\n\n2.-g: 全局安装,可以通过命令行在任何地方调用它。如果不写-g则使非全局安装，将安装在定位目录的node_modules文件夹下，通过require()调用；  \n\n3.--save: 将保存配置信息至package.json（package.json是nodejs项目配置文件）；\n\n4.-dev: 保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；\n\n#### 3.安装gulp\n1.npm install gulp -g；\n\n#### 4.新建package.json文件\n\n1.说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；\n\n2.通过命令行新建：npm init， 创建过程中会提示让输入各种信息，可以一直回车忽略它。\n![mark](http://xiongcao.github.io/blogImage/blog/170709/1BEACEhcE9.png?imageslim)\n\n\n#### 5.新建gulpfile.js文件\n1.说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件\n2.新建gulpfile.js文件示例  \n```js\n//导入工具包 require('node_modules里对应模块')\nvar gulp = require('gulp'); //本地安装gulp所用到的地方\nvar sass = require('gulp-sass');\nvar minifycss = require('gulp-minify-css');//压缩css插件\nvar cleancss = require('gulp-clean-css');//压缩css插件\n \n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass()) //该任务调用的模块\n        .pipe(cleancss({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(gulp.dest('./css')); //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n \ngulp.task('default',['sass']); //定义默认任务\n \n//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数\n//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) \n//gulp.dest(path[, options]) 处理完后文件生成路径\n\n```\n\n#### 6.运行gulp\n1.gulp [name]:  gulpfile.js里面定义的模块的名称 例如:gulp sass。  \n2.gulp default: 如果定义了默认任务gulp.task('default',['sass'])可直接执行gulp命令。\n\n\n### &ensp;&ensp;&ensp;&ensp;到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。","source":"_posts/使用gulp自动化构建前端项目.md","raw":"title: 使用gulp自动化构建前端项目\nauthor: 熊 超\ntags:\n  - gulp\ncategories:\n  - 工具\ndate: 2017-07-09 10:30:00\n---\n---\n<!--more-->\n\n### gulp简介：\n&ensp;&ensp;&ensp;&ensp;gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成，从而大大提高我们的工作效率。<br/>\n\n&ensp;&ensp;&ensp;&ensp;gulp是基于Nodejs的自动任务运行器,她能自动化地完成javascript、coffee、sass、less、html、image、css 等文件的的测试、检查、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。\n\n\n\n### 环境搭建：\n\n#### 1.安装nodeJS\n1.gulp是基于nodejs，所以需要安装nodejs。   \n2.自己去node官网下载nodejs安装。\n\n#### 2.npm工具\n##### 说明：\nnpm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）；\n\n##### 使用npm安装插件：npm install &lt;name&gt; [-g] [--save-dev]；  \n1.name: node插件名称。例：npm install gulp-sass --save-dev；\n\n2.-g: 全局安装,可以通过命令行在任何地方调用它。如果不写-g则使非全局安装，将安装在定位目录的node_modules文件夹下，通过require()调用；  \n\n3.--save: 将保存配置信息至package.json（package.json是nodejs项目配置文件）；\n\n4.-dev: 保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；\n\n#### 3.安装gulp\n1.npm install gulp -g；\n\n#### 4.新建package.json文件\n\n1.说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；\n\n2.通过命令行新建：npm init， 创建过程中会提示让输入各种信息，可以一直回车忽略它。\n![mark](http://xiongcao.github.io/blogImage/blog/170709/1BEACEhcE9.png?imageslim)\n\n\n#### 5.新建gulpfile.js文件\n1.说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件\n2.新建gulpfile.js文件示例  \n```js\n//导入工具包 require('node_modules里对应模块')\nvar gulp = require('gulp'); //本地安装gulp所用到的地方\nvar sass = require('gulp-sass');\nvar minifycss = require('gulp-minify-css');//压缩css插件\nvar cleancss = require('gulp-clean-css');//压缩css插件\n \n//定义一个sass任务（自定义任务名称）\ngulp.task('sass', function () {\n    gulp.src('./sass/**/*.scss') //该任务针对的文件\n        .pipe(sass()) //该任务调用的模块\n        .pipe(cleancss({\n            advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]\n            compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]\n            keepBreaks: true,//类型：Boolean 默认：false [是否保留换行]\n            keepSpecialComments: '*'\n            //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀\n        }))\n        .pipe(gulp.dest('./css')); //将会在css文件夹下生成index.css（复制文件目录及文件）\n});\n \ngulp.task('default',['sass']); //定义默认任务\n \n//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数\n//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) \n//gulp.dest(path[, options]) 处理完后文件生成路径\n\n```\n\n#### 6.运行gulp\n1.gulp [name]:  gulpfile.js里面定义的模块的名称 例如:gulp sass。  \n2.gulp default: 如果定义了默认任务gulp.task('default',['sass'])可直接执行gulp命令。\n\n\n### &ensp;&ensp;&ensp;&ensp;到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。","slug":"使用gulp自动化构建前端项目","published":1,"updated":"2023-07-19T03:05:30.838Z","_id":"clk82gyjy00133164d8it22nr","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<span id=\"more\"></span>\n\n<h3 id=\"gulp简介：\"><a href=\"#gulp简介：\" class=\"headerlink\" title=\"gulp简介：\"></a>gulp简介：</h3><p>&ensp;&ensp;&ensp;&ensp;gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成，从而大大提高我们的工作效率。<br/></p>\n<p>&ensp;&ensp;&ensp;&ensp;gulp是基于Nodejs的自动任务运行器,她能自动化地完成javascript、coffee、sass、less、html、image、css 等文件的的测试、检查、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。</p>\n<h3 id=\"环境搭建：\"><a href=\"#环境搭建：\" class=\"headerlink\" title=\"环境搭建：\"></a>环境搭建：</h3><h4 id=\"1-安装nodeJS\"><a href=\"#1-安装nodeJS\" class=\"headerlink\" title=\"1.安装nodeJS\"></a>1.安装nodeJS</h4><p>1.gulp是基于nodejs，所以需要安装nodejs。<br>2.自己去node官网下载nodejs安装。</p>\n<h4 id=\"2-npm工具\"><a href=\"#2-npm工具\" class=\"headerlink\" title=\"2.npm工具\"></a>2.npm工具</h4><h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><p>npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）；</p>\n<h5 id=\"使用npm安装插件：npm-install-g-–save-dev-；\"><a href=\"#使用npm安装插件：npm-install-g-–save-dev-；\" class=\"headerlink\" title=\"使用npm安装插件：npm install &lt;name&gt; [-g] [–save-dev]；\"></a>使用npm安装插件：npm install &lt;name&gt; [-g] [–save-dev]；</h5><p>1.name: node插件名称。例：npm install gulp-sass –save-dev；</p>\n<p>2.-g: 全局安装,可以通过命令行在任何地方调用它。如果不写-g则使非全局安装，将安装在定位目录的node_modules文件夹下，通过require()调用；  </p>\n<p>3.–save: 将保存配置信息至package.json（package.json是nodejs项目配置文件）；</p>\n<p>4.-dev: 保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；</p>\n<h4 id=\"3-安装gulp\"><a href=\"#3-安装gulp\" class=\"headerlink\" title=\"3.安装gulp\"></a>3.安装gulp</h4><p>1.npm install gulp -g；</p>\n<h4 id=\"4-新建package-json文件\"><a href=\"#4-新建package-json文件\" class=\"headerlink\" title=\"4.新建package.json文件\"></a>4.新建package.json文件</h4><p>1.说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；</p>\n<p>2.通过命令行新建：npm init， 创建过程中会提示让输入各种信息，可以一直回车忽略它。<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170709/1BEACEhcE9.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h4 id=\"5-新建gulpfile-js文件\"><a href=\"#5-新建gulpfile-js文件\" class=\"headerlink\" title=\"5.新建gulpfile.js文件\"></a>5.新建gulpfile.js文件</h4><p>1.说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件<br>2.新建gulpfile.js文件示例  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//导入工具包 require(&#x27;node_modules里对应模块&#x27;)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>); <span class=\"comment\">//本地安装gulp所用到的地方</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-sass&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-minify-css&#x27;</span>);<span class=\"comment\">//压缩css插件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cleancss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-clean-css&#x27;</span>);<span class=\"comment\">//压缩css插件</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;sass&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./sass/**/*.scss&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">sass</span>()) <span class=\"comment\">//该任务调用的模块</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">cleancss</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">advanced</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class=\"line\">            <span class=\"attr\">compatibility</span>: <span class=\"string\">&#x27;ie7&#x27;</span>,<span class=\"comment\">//保留ie7及以下兼容写法 类型：String 默认：&#x27;&#x27;or&#x27;*&#x27; [启用兼容模式； &#x27;ie7&#x27;：IE7兼容模式，&#x27;ie8&#x27;：IE8兼容模式，&#x27;*&#x27;：IE9+兼容模式]</span></span><br><span class=\"line\">            <span class=\"attr\">keepBreaks</span>: <span class=\"literal\">true</span>,<span class=\"comment\">//类型：Boolean 默认：false [是否保留换行]</span></span><br><span class=\"line\">            <span class=\"attr\">keepSpecialComments</span>: <span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\">            <span class=\"comment\">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./css&#x27;</span>)); <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;default&#x27;</span>,[<span class=\"string\">&#x27;sass&#x27;</span>]); <span class=\"comment\">//定义默认任务</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数</span></span><br><span class=\"line\"><span class=\"comment\">//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) </span></span><br><span class=\"line\"><span class=\"comment\">//gulp.dest(path[, options]) 处理完后文件生成路径</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-运行gulp\"><a href=\"#6-运行gulp\" class=\"headerlink\" title=\"6.运行gulp\"></a>6.运行gulp</h4><p>1.gulp [name]:  gulpfile.js里面定义的模块的名称 例如:gulp sass。<br>2.gulp default: 如果定义了默认任务gulp.task(‘default’,[‘sass’])可直接执行gulp命令。</p>\n<h3 id=\"ensp-ensp-ensp-ensp-到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。\"><a href=\"#ensp-ensp-ensp-ensp-到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。\" class=\"headerlink\" title=\"&ensp;&ensp;&ensp;&ensp;到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。\"></a>&ensp;&ensp;&ensp;&ensp;到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。</h3>","site":{"data":{}},"excerpt":"<hr>","more":"<h3 id=\"gulp简介：\"><a href=\"#gulp简介：\" class=\"headerlink\" title=\"gulp简介：\"></a>gulp简介：</h3><p>&ensp;&ensp;&ensp;&ensp;gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成，从而大大提高我们的工作效率。<br/></p>\n<p>&ensp;&ensp;&ensp;&ensp;gulp是基于Nodejs的自动任务运行器,她能自动化地完成javascript、coffee、sass、less、html、image、css 等文件的的测试、检查、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。</p>\n<h3 id=\"环境搭建：\"><a href=\"#环境搭建：\" class=\"headerlink\" title=\"环境搭建：\"></a>环境搭建：</h3><h4 id=\"1-安装nodeJS\"><a href=\"#1-安装nodeJS\" class=\"headerlink\" title=\"1.安装nodeJS\"></a>1.安装nodeJS</h4><p>1.gulp是基于nodejs，所以需要安装nodejs。<br>2.自己去node官网下载nodejs安装。</p>\n<h4 id=\"2-npm工具\"><a href=\"#2-npm工具\" class=\"headerlink\" title=\"2.npm工具\"></a>2.npm工具</h4><h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><p>npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）；</p>\n<h5 id=\"使用npm安装插件：npm-install-g-–save-dev-；\"><a href=\"#使用npm安装插件：npm-install-g-–save-dev-；\" class=\"headerlink\" title=\"使用npm安装插件：npm install &lt;name&gt; [-g] [–save-dev]；\"></a>使用npm安装插件：npm install &lt;name&gt; [-g] [–save-dev]；</h5><p>1.name: node插件名称。例：npm install gulp-sass –save-dev；</p>\n<p>2.-g: 全局安装,可以通过命令行在任何地方调用它。如果不写-g则使非全局安装，将安装在定位目录的node_modules文件夹下，通过require()调用；  </p>\n<p>3.–save: 将保存配置信息至package.json（package.json是nodejs项目配置文件）；</p>\n<p>4.-dev: 保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；</p>\n<h4 id=\"3-安装gulp\"><a href=\"#3-安装gulp\" class=\"headerlink\" title=\"3.安装gulp\"></a>3.安装gulp</h4><p>1.npm install gulp -g；</p>\n<h4 id=\"4-新建package-json文件\"><a href=\"#4-新建package-json文件\" class=\"headerlink\" title=\"4.新建package.json文件\"></a>4.新建package.json文件</h4><p>1.说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；</p>\n<p>2.通过命令行新建：npm init， 创建过程中会提示让输入各种信息，可以一直回车忽略它。<br><img  \n                     lazyload\n                     alt=\"image\"\n                     data-src=\"http://xiongcao.github.io/blogImage/blog/170709/1BEACEhcE9.png?imageslim\"\n                      alt=\"mark\"\n                ></p>\n<h4 id=\"5-新建gulpfile-js文件\"><a href=\"#5-新建gulpfile-js文件\" class=\"headerlink\" title=\"5.新建gulpfile.js文件\"></a>5.新建gulpfile.js文件</h4><p>1.说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件<br>2.新建gulpfile.js文件示例  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//导入工具包 require(&#x27;node_modules里对应模块&#x27;)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>); <span class=\"comment\">//本地安装gulp所用到的地方</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sass = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-sass&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> minifycss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-minify-css&#x27;</span>);<span class=\"comment\">//压缩css插件</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cleancss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp-clean-css&#x27;</span>);<span class=\"comment\">//压缩css插件</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//定义一个sass任务（自定义任务名称）</span></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;sass&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    gulp.<span class=\"title function_\">src</span>(<span class=\"string\">&#x27;./sass/**/*.scss&#x27;</span>) <span class=\"comment\">//该任务针对的文件</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">sass</span>()) <span class=\"comment\">//该任务调用的模块</span></span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">cleancss</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">advanced</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class=\"line\">            <span class=\"attr\">compatibility</span>: <span class=\"string\">&#x27;ie7&#x27;</span>,<span class=\"comment\">//保留ie7及以下兼容写法 类型：String 默认：&#x27;&#x27;or&#x27;*&#x27; [启用兼容模式； &#x27;ie7&#x27;：IE7兼容模式，&#x27;ie8&#x27;：IE8兼容模式，&#x27;*&#x27;：IE9+兼容模式]</span></span><br><span class=\"line\">            <span class=\"attr\">keepBreaks</span>: <span class=\"literal\">true</span>,<span class=\"comment\">//类型：Boolean 默认：false [是否保留换行]</span></span><br><span class=\"line\">            <span class=\"attr\">keepSpecialComments</span>: <span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\">            <span class=\"comment\">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class=\"line\">        &#125;))</span><br><span class=\"line\">        .<span class=\"title function_\">pipe</span>(gulp.<span class=\"title function_\">dest</span>(<span class=\"string\">&#x27;./css&#x27;</span>)); <span class=\"comment\">//将会在css文件夹下生成index.css（复制文件目录及文件）</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&#x27;default&#x27;</span>,[<span class=\"string\">&#x27;sass&#x27;</span>]); <span class=\"comment\">//定义默认任务</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数</span></span><br><span class=\"line\"><span class=\"comment\">//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) </span></span><br><span class=\"line\"><span class=\"comment\">//gulp.dest(path[, options]) 处理完后文件生成路径</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-运行gulp\"><a href=\"#6-运行gulp\" class=\"headerlink\" title=\"6.运行gulp\"></a>6.运行gulp</h4><p>1.gulp [name]:  gulpfile.js里面定义的模块的名称 例如:gulp sass。<br>2.gulp default: 如果定义了默认任务gulp.task(‘default’,[‘sass’])可直接执行gulp命令。</p>\n<h3 id=\"ensp-ensp-ensp-ensp-到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。\"><a href=\"#ensp-ensp-ensp-ensp-到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。\" class=\"headerlink\" title=\"&ensp;&ensp;&ensp;&ensp;到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。\"></a>&ensp;&ensp;&ensp;&ensp;到此为止使用gulp自动化构建前端项目的环境已经配置完成了，接下来就是我们自己去安装相应的插件来完善项目了。</h3>"}],"PostAsset":[],"PostCategory":[{"post_id":"clk82gyj700013164b3es7hd6","category_id":"clk82gyjc00043164acrm6wi2","_id":"clk82gyjm000e3164absh5cpt"},{"post_id":"clk82gyja00033164g678cgl1","category_id":"clk82gyjc00043164acrm6wi2","_id":"clk82gyjo000j3164hjwwgbex"},{"post_id":"clk82gyje000631648ogka8s0","category_id":"clk82gyjl000d3164gzubhrm0","_id":"clk82gyjt000q3164d5np2xsu"},{"post_id":"clk82gyjo000i31640znb7wfb","category_id":"clk82gyjl000d3164gzubhrm0","_id":"clk82gyjv000u3164c95y5j1q"},{"post_id":"clk82gyjp000n31646w6e41cf","category_id":"clk82gyjl000d3164gzubhrm0","_id":"clk82gyjw000x3164283ad5rn"},{"post_id":"clk82gyjf00073164dlwpfxli","category_id":"clk82gyjo000l31647kcre09q","_id":"clk82gyjx001131641q3fd1tr"},{"post_id":"clk82gyju000t316402vcd7sb","category_id":"clk82gyjl000d3164gzubhrm0","_id":"clk82gyjz001431641cln1czj"},{"post_id":"clk82gyjg000831644mwk0xeo","category_id":"clk82gyjt000r31643bjm725b","_id":"clk82gyjz0017316442dc61db"},{"post_id":"clk82gyjv000w3164haz47s35","category_id":"clk82gyjl000d3164gzubhrm0","_id":"clk82gyk0001931640efi6bf5"},{"post_id":"clk82gyjj000b316480s21akn","category_id":"clk82gyjw000y3164arzqc0fj","_id":"clk82gyk0001b31643oz7g1wu"},{"post_id":"clk82gyjk000c3164c7cc00s1","category_id":"clk82gyjl000d3164gzubhrm0","_id":"clk82gyk1001e3164addo5d03"},{"post_id":"clk82gyjm000g3164ggy20iva","category_id":"clk82gyk0001a3164bwm9hhc4","_id":"clk82gyk2001h31647r44h6zk"},{"post_id":"clk82gyjs000p3164439f7q1z","category_id":"clk82gyk1001f316473yn8hmo","_id":"clk82gyk3001m3164a5ut8292"},{"post_id":"clk82gyjx00103164ahb477uc","category_id":"clk82gyk0001a3164bwm9hhc4","_id":"clk82gyk4001q316476kd7s59"},{"post_id":"clk82gyjy00133164d8it22nr","category_id":"clk82gyk0001a3164bwm9hhc4","_id":"clk82gyk4001s3164apsy2qsy"}],"PostTag":[{"post_id":"clk82gyj700013164b3es7hd6","tag_id":"clk82gyjd00053164he4teb48","_id":"clk82gyjn000h31648g55f9h2"},{"post_id":"clk82gyj700013164b3es7hd6","tag_id":"clk82gyjh000a31640yfw4tey","_id":"clk82gyjo000k316496r53dji"},{"post_id":"clk82gyja00033164g678cgl1","tag_id":"clk82gyjd00053164he4teb48","_id":"clk82gyjs000o316484d58kul"},{"post_id":"clk82gyje000631648ogka8s0","tag_id":"clk82gyjp000m3164fi1a9eqi","_id":"clk82gyjv000v3164afqk150f"},{"post_id":"clk82gyjf00073164dlwpfxli","tag_id":"clk82gyju000s3164bk3xbs0k","_id":"clk82gyjy00123164fcz69kpc"},{"post_id":"clk82gyjg000831644mwk0xeo","tag_id":"clk82gyjw000z3164324j7qp0","_id":"clk82gyk0001831643nov6u77"},{"post_id":"clk82gyjj000b316480s21akn","tag_id":"clk82gyjz0016316446nodtwg","_id":"clk82gyk1001d31640w2q6ahr"},{"post_id":"clk82gyjk000c3164c7cc00s1","tag_id":"clk82gyk0001c31644yy03qj6","_id":"clk82gyk3001k3164e5262ve9"},{"post_id":"clk82gyjk000c3164c7cc00s1","tag_id":"clk82gyk1001g3164g4txabkc","_id":"clk82gyk3001n3164bd9tcatv"},{"post_id":"clk82gyjm000g3164ggy20iva","tag_id":"clk82gyk2001j31648dxofztg","_id":"clk82gyk3001p31642sds5r5m"},{"post_id":"clk82gyjo000i31640znb7wfb","tag_id":"clk82gyk3001o3164cpetdqmr","_id":"clk82gyk4001u3164gmen5y25"},{"post_id":"clk82gyjo000i31640znb7wfb","tag_id":"clk82gyk4001r31647ye190l8","_id":"clk82gyk5001v316498fbd015"},{"post_id":"clk82gyjp000n31646w6e41cf","tag_id":"clk82gyk3001o3164cpetdqmr","_id":"clk82gyk5001y31644qlf34dp"},{"post_id":"clk82gyjp000n31646w6e41cf","tag_id":"clk82gyk5001w3164aoth430g","_id":"clk82gyk5001z3164dupt53ml"},{"post_id":"clk82gyjs000p3164439f7q1z","tag_id":"clk82gyk5001w3164aoth430g","_id":"clk82gyk60022316499sr0y2w"},{"post_id":"clk82gyjs000p3164439f7q1z","tag_id":"clk82gyk500203164druhc5vy","_id":"clk82gyk6002331646woq8t27"},{"post_id":"clk82gyju000t316402vcd7sb","tag_id":"clk82gyk5001w3164aoth430g","_id":"clk82gyk700263164f8zz0dp0"},{"post_id":"clk82gyju000t316402vcd7sb","tag_id":"clk82gyk600243164fyvzc88g","_id":"clk82gyk7002731647vpf0rag"},{"post_id":"clk82gyjv000w3164haz47s35","tag_id":"clk82gyk6002531644ce27mh5","_id":"clk82gyk7002a3164g1921ddx"},{"post_id":"clk82gyjv000w3164haz47s35","tag_id":"clk82gyk700283164gd8hdj5u","_id":"clk82gyk7002b3164dfaze5oc"},{"post_id":"clk82gyjx00103164ahb477uc","tag_id":"clk82gyk7002931640gom704g","_id":"clk82gyk8002d31645u450qhu"},{"post_id":"clk82gyjy00133164d8it22nr","tag_id":"clk82gyk7002931640gom704g","_id":"clk82gyk8002e3164bu639zac"}],"Tag":[{"name":"ajax","_id":"clk82gyjd00053164he4teb48"},{"name":"跨域","_id":"clk82gyjh000a31640yfw4tey"},{"name":"jquery","_id":"clk82gyjp000m3164fi1a9eqi"},{"name":"Markdown","_id":"clk82gyju000s3164bk3xbs0k"},{"name":"upload","_id":"clk82gyjw000z3164324j7qp0"},{"name":"CSS","_id":"clk82gyjz0016316446nodtwg"},{"name":"sessionStorage","_id":"clk82gyk0001c31644yy03qj6"},{"name":"localStorage","_id":"clk82gyk1001g3164g4txabkc"},{"name":"git","_id":"clk82gyk2001j31648dxofztg"},{"name":"js","_id":"clk82gyk3001o3164cpetdqmr"},{"name":"date","_id":"clk82gyk4001r31647ye190l8"},{"name":"Array","_id":"clk82gyk5001w3164aoth430g"},{"name":"sort","_id":"clk82gyk500203164druhc5vy"},{"name":"循环","_id":"clk82gyk600243164fyvzc88g"},{"name":"css","_id":"clk82gyk6002531644ce27mh5"},{"name":"伪类选择器","_id":"clk82gyk700283164gd8hdj5u"},{"name":"gulp","_id":"clk82gyk7002931640gom704g"}]}}